[project]
name = "ipyvizzu-story"
dynamic = ["version"]
description = "Build, present and share animated data stories in Jupyter Notebook and similar environments."
authors = [
    {name = "Vizzu Inc.", email = "hello@vizzuhq.com"},
]
readme = "README.md"
requires-python = ">=3.6"
dependencies = [
    "ipyvizzu",
]
license = {text = "Apache-2.0"}
classifiers = [
    "Environment :: Console",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
keywords = [
    "python",
    "template",
    "notebook",
    "interactive",
    "presentation",
    "data-visualization",
    "charting",
    "datastory",
    "datastorytelling",
]

[project.optional-dependencies]
jupyter = [
    "IPython",
]
streamlit = [
    "streamlit",
]
panel = [
    "panel",
]

[project.urls]
Homepage = "https://ipyvizzu-story.vizzuhq.com"
Documentation = "https://ipyvizzu-story.vizzuhq.com"
Source = "https://github.com/vizzuhq/ipyvizzu-story"
Tracker = "https://github.com/vizzuhq/ipyvizzu-story/issues"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.package-dir]
ipyvizzu = "src/ipyvizzustory"

[tool.pdm.version]
source = "file"
path = "src/ipyvizzustory/__version__.py"

[tool.pdm.scripts]
init_py = "pdm install"
init_js = "npm install"

init_src = {composite = ["init_py"]}
init_docs = {composite = ["init"]}
init_tools = {composite = ["init"]}

init = {composite = ["pkg_install", "init_py", "init_js"]}


lock_py = "pdm lock --no-default -d"
lock_js = "npm update"

lock = {composite = ["lock_py", "lock_js"]}


fix_format_black = "black"
format_black = "black --diff --check"
fix_format_mdformat = "python ./tools/ci/std_check.py mdformat --wrap 80 --end-of-line keep --line-length 70"
format_mdformat = "python ./tools/ci/std_check.py mdformat --wrap 80 --end-of-line keep --line-length 70 --check"
fix_format_prettier = "npx prettier -w"
format_prettier = "npx prettier -c" 

fix_format_src = {composite = ["fix_format_black src tests"]}
format_src = {composite = ["format_black src tests"]}
fix_format_docs = {composite = ["fix_format_mdformat docs README.md CONTRIBUTING.md CODE_OF_CONDUCT.md", "fix_format_prettier docs"]}
format_docs = {composite = ["format_mdformat docs README.md CONTRIBUTING.md CODE_OF_CONDUCT.md", "format_prettier docs"]}
fix_format_tools = {composite = ["fix_format_black tools", "fix_format_black -l 70 docs", "fix_format_prettier package.json tools .github"]}
format_tools = {composite = ["format_black tools", "format_black -l 70 docs", "format_prettier package.json tools .github"]}

fix_format = {composite = ["fix_format_src", "fix_format_docs", "fix_format_tools"]}
format = {composite = ["format_src", "format_docs", "format_tools"]}


lint_pylint = "pylint"
fix_lint_eslint = "npx eslint --ext .js,.cjs,.mjs --fix"
lint_eslint = "npx eslint --ext .js,.cjs,.mjs"

lint_src = {composite = ["lint_pylint src tests"]}
fix_lint_docs = {composite = ["fix_lint_eslint docs"]}
lint_docs = {composite = ["lint_eslint docs"]}
lint_tools = {composite = ["lint_pylint tools"]}

fix_lint = {composite = ["fix_lint_docs"]}
lint = {composite = ["lint_src", "lint_docs", "lint_tools"]}


type_mypy = "mypy"

type_src = {composite = ["type_mypy src tests"]}
type_tools = {composite = ["type_mypy tools"]}

type = {composite = ["type_src", "type_tools"]}


test = "tox"


ci_src = {composite = ["format_src", "lint_src", "type_src", "test"]}
ci_docs = {composite = ["format_docs", "lint_docs"]}
ci_tools = {composite = ["format_tools", "lint_tools", "type_tools"]}

ci = {composite = ["ci_src", "ci_docs", "ci_tools"]}


docs_build = "mkdocs build -f ./tools/docs/mkdocs.yml"
docs_deploy = {composite = ["pip install ipyvizzu --upgrade", "python ./tools/docs/deploy.py"]}


pkg_install = "pip install -e ."
pkg_build = {composite = ["python ./tools/ci/version.py False", "pdm build"]}
pkg_check = "twine check dist/*.tar.gz dist/*.whl"
pkg_release = {composite = ["pkg_build", "pkg_check", "python ./tools/ci/version.py True"]}

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    py{36,37,38,39,310,311}
    coverage

[testenv]
setenv =
    COVERAGE_FILE = .coverage/env/.coverage.{envname}
deps =
    coverage[toml]
    ddt
extras =
    jupyter
    streamlit
    panel
commands =
    python -m coverage run --branch --source ipyvizzustory -m unittest discover tests
    python -m coverage report -m
    python -c "import os; pyenv='{envname}'; os.rename('.coverage/env/.coverage.' + pyenv, '.coverage/env/.coverage.3.' + pyenv[3:])"

[testenv:py{37,38,39,310,311}]
package = editable

[testenv:coverage]
skip_install = True
commands =
    python -m coverage combine --keep --data-file .coverage/.coverage .coverage/env/
    python -m coverage html --data-file .coverage/.coverage -d .coverage/html
    python -m coverage report --data-file .coverage/.coverage -m --fail-under=100
"""

[tool.pdm.dev-dependencies]
packagetool = [
    "pdm==2.8.0 ; python_version >= '3.10'",
    "twine ; python_version >= '3.10'"
]
packagedeps = [
    "ipyvizzu ; python_version >= '3.10'",
]
codequality = [
    "pre-commit ; python_version >= '3.10'",
    "black ; python_version >= '3.10'",
    "black[jupyter] ; python_version >= '3.10'",
    "pylint ; python_version >= '3.10'",
    "mypy ; python_version >= '3.10'",
    "tox ; python_version >= '3.10'",
]
env = [
    "notebook ; python_version >= '3.10'",
    "IPython ; python_version >= '3.10'",
    "streamlit ; python_version >= '3.10'",
    "panel ; python_version >= '3.10'",
]
docs = [
    "mdformat ; python_version >= '3.10'",
    "mdformat-beautysh ; python_version >= '3.10'",
    "mdformat-black ; python_version >= '3.10'",
    "mdformat-configurable-black ; python_version >= '3.10'",
    "mdformat-config ; python_version >= '3.10'",
    "mdformat-web ; python_version >= '3.10'",
    "mdformat-admon ; python_version >= '3.10'",
    "mdformat-gfm ; python_version >= '3.10'",
    "mdformat-tables ; python_version >= '3.10'",
    "mdformat-footnote ; python_version >= '3.10'",
    "mdformat-frontmatter ; python_version >= '3.10'",
    "mdx_truly_sane_lists ; python_version >= '3.10'",
    "pyyaml ; python_version >= '3.10'",
    "types-pyyaml ; python_version >= '3.10'",
    "requests ; python_version >= '3.10'",
    "types-requests ; python_version >= '3.10'",
    "mkdocs ; python_version >= '3.10'",
    "mkdocs-material ; python_version >= '3.10'",
    "mkdocs-section-index ; python_version >= '3.10'",
    "mkdocs-literate-nav ; python_version >= '3.10'",
    "mkdocs-autorefs ; python_version >= '3.10'",
    "mkdocstrings[python] ; python_version >= '3.10'",
    "mkdocs-gen-files ; python_version >= '3.10'",
    "mkdocs-coverage ; python_version >= '3.10'",
    "mike @ git+https://github.com/jimporter/mike.git@master",
]

[tool.pylint.messages-control]
disable = ["fixme"]
good-names= ["i", "df"]

[tool.coverage.paths]
source = ["src/", ".tox/py*/lib/python*/site-packages/"]
