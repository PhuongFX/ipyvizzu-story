{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p>ipyvizzu-story - Build, present and share animated data stories in Jupyter Notebook and similar environments</p> <p> Documentation     \u00b7 Examples     \u00b7 Repository </p> </p> <p> </p>"},{"location":"#ipyvizzu-story","title":"ipyvizzu-story","text":""},{"location":"#about-the-extension","title":"About The Extension","text":"<p><code>ipyvizzu-story</code> is an extension of the animated charting tool ipyvizzu that enables users to create and present interactive data presentations within the data science notebook of their choice and to share them as an <code>HTML</code> file. The extension provides a widget that contains the presentation and adds controls for navigating between slides - predefined stages within the story being presented. Navigation also works with keyboard shortcuts - arrow keys, <code>PgUp</code>, <code>PgDn</code>, <code>Home</code>, <code>End</code> - and you can also use a clicker to switch between the slides.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install ipyvizzu-story</code></pre> <p>Visit Installation chapter for more options and details.</p>"},{"location":"#usage","title":"Usage","text":"<p>You can check and download the code behind the animation on the top of the page in our Example gallery.</p> <p>You can create the story below with the following code snippet.</p> <p> </p> <pre><code>from ipyvizzu import Data, Config\nfrom ipyvizzustory import Story, Slide, Step\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\nstory = Story(data=data)\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\nstory.play()</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Visit our Documentation site for more details and a step-by-step tutorial into <code>ipyvizzu-story</code> or check out our Example gallery.</p>"},{"location":"#environments","title":"Environments","text":"<p><code>ipyvizzu-story</code> can be used in a wide variety of environments, visit Environments chapter for more details.</p> <ul> <li>Notebooks<ul> <li>Jupyter Notebook</li> <li>Colab</li> <li>DataCamp</li> <li>Deepnote</li> <li>JupyterLab</li> <li>JupyterLite</li> <li>Kaggle</li> <li>Noteable</li> </ul> </li> <li>App platforms<ul> <li>Streamlit</li> <li>Flask</li> <li>Mercury/mljar</li> <li>Voil\u00e0</li> </ul> </li> <li>BI tools<ul> <li>Mode</li> </ul> </li> <li>IDEs<ul> <li>PyCharm</li> <li>VSCode Python</li> </ul> </li> <li>Python</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to the project, visit our Contributing guide for further info.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Join our Slack if you have any questions or comments:   vizzu-community.slack.com</li> <li>Drop us a line at hello@vizzuhq.com</li> <li>Follow us on Twitter: VizzuHQ</li> </ul>"},{"location":"#license","title":"License","text":"<p>Copyright \u00a9 2022-2023 Vizzu Inc.</p> <p>Released under the Apache 2.0 License.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>See Code of Conduct of the Vizzu community.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>You can find our open issues in the project's issue tracker. Please let us know if you find any issues or have any feature requests there.</p>"},{"location":"CONTRIBUTING/#contributing_1","title":"Contributing","text":"<p>If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects.</p>"},{"location":"CONTRIBUTING/#ci-cd","title":"CI-CD","text":""},{"location":"CONTRIBUTING/#development-environment","title":"Development environment","text":"<p>You can initialize the development environment of <code>ipyvizzu-story</code> with <code>Python</code> virtual env.</p> <p>Run the <code>dev</code> make target to set up your environment.</p> <pre><code>make dev</code></pre> <p>Note: The <code>dev</code> make target is going to set up pre-commit and pre-push hooks into your local git repository. Pre-commit hook is going to format the code with <code>black</code> and pre-push hook is going to run the CI steps.</p> <p>Run the <code>clean</code> make target to clear your environment.</p> <pre><code>make clean</code></pre>"},{"location":"CONTRIBUTING/#ci","title":"CI","text":"<p>The CI steps check code formatting, run code analyses, check typing and run unit tests over the <code>ipyvizzu-story</code> project.</p> <p>The <code>check</code> make target collects the above tasks. Run the <code>check</code> make target to run the CI steps.</p> <pre><code>make check</code></pre>"},{"location":"CONTRIBUTING/#formatting","title":"Formatting","text":"<p>The <code>ipyvizzu-story</code> project is formatted with <code>black</code>.</p> <p>Run the <code>format</code> make target to format your code.</p> <pre><code>make format</code></pre> <p>Run the <code>check-format</code> target to check code formatting.</p> <pre><code>make check-format</code></pre>"},{"location":"CONTRIBUTING/#code-analyses","title":"Code analyses","text":"<p>The <code>ipyvizzu-story</code> project is analysed with <code>pylint</code>.</p> <p>Run the <code>lint</code> make target to run code analyses.</p> <pre><code>make lint</code></pre>"},{"location":"CONTRIBUTING/#typing","title":"Typing","text":"<p>The <code>ipyvizzu-story</code> project is using type hints.</p> <p>Run the <code>check-typing</code> make target to run check code typing.</p> <pre><code>make check-typing</code></pre>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>The <code>ipyvizzu-story</code> project is tested with <code>unittest</code> testing framework.</p> <p>Run the <code>test</code> make target to install <code>ipyvizzu-story</code> into your virtual environment and run the tests.</p> <pre><code>make test</code></pre>"},{"location":"CONTRIBUTING/#release","title":"Release","text":"<p><code>ipyvizzu-story</code> is distributed on pypi. Note: You need to be an administrator to release the project.</p> <p>If you want to release <code>ipyvizzu-story</code> follow the steps below.</p> <ul> <li>You should increase the version number in <code>setup.py</code>. The version bump should   be in a separated commit.</li> </ul> <ul> <li>Generate the release notes and publish the new release on   Releases.</li> </ul> <p>Note: Publishing a new release will automatically trigger the <code>release</code> workflow which builds, checks and uploads the <code>ipyvizzu-story</code> package to pypi.</p> <p>You can build and check the package before a release with the <code>release</code> make target.</p> <pre><code>make release</code></pre>"},{"location":"LICENSE/","title":"License","text":"<pre>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</pre>"},{"location":"installation/","title":"Installation","text":"<p><code>ipyvizzu-story</code> requires the ipyvizzu package.</p> <p>Info</p> <p><code>ipyvizzu-story</code> requires and downloads the Vizzu <code>JavaScript</code>/<code>C++</code> library and the Vizzu-Story <code>JavaScript</code> package from <code>jsDelivr CDN</code>.</p>"},{"location":"installation/#pypi","title":"pypi","text":"<p>Run the following command to install <code>ipyvizzu-story</code> from pypi</p> <pre><code>pip install ipyvizzu-story</code></pre> <p>and this is how to upgrade it.</p> <pre><code>pip install -U ipyvizzu-story</code></pre> <p>You can use <code>ipyvizzu-story</code> in <code>Jupyter/IPython</code>, <code>Streamlit</code> or <code>Python</code> (see Environments chapter for more details).</p>"},{"location":"installation/#jupyteripython","title":"Jupyter/IPython","text":"<p>You can install <code>ipyvizzu-story</code> in your notebook without using the command line by entering the following code into a cell.</p> <pre><code>!pip install ipyvizzu-story</code></pre> <p>If you want to install <code>Jupyter/IPython</code> as a dependency, install <code>ipyvizzu-story</code> with the following command.</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"installation/#streamlit","title":"Streamlit","text":"<p>If you want to install <code>Streamlit</code> as a dependency, install <code>ipyvizzu-story</code> with the following command.</p> <pre><code>pip install ipyvizzu-story[streamlit]</code></pre>"},{"location":"dev/","title":"Development","text":"<p>We have compiled some information on the development of <code>ipyvizzu-story</code> here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage.</p> <ul> <li>Contributing</li> <li>Code of Conduct</li> <li>Coverage report</li> </ul>"},{"location":"environments/","title":"Environments","text":"<p><code>ipyvizzu-story</code> can be used in a lot of different environments. We grouped these into several categories. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Notebooks</li> <li>App platforms</li> <li>BI tools</li> <li>IDEs</li> <li>Python</li> </ul>"},{"location":"environments/python/","title":"Python","text":""},{"location":"environments/python/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Python</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen *</li> </ul> <ul> <li> Use navigation buttons *</li> </ul> <ul> <li> Set width/height of the <code>Story</code> *</li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*can only be used in the exported html file.</p>"},{"location":"environments/python/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu-story</code></pre>"},{"location":"environments/python/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Python</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.py.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)</code></pre> <p>Place the above code blocks into a python file (for example called <code>ipyvizzustory_example.py</code>) and run the following command in your command line in order to try it.</p> <pre><code>python3 ipyvizzustory_example.py</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/bi/","title":"BI tools","text":"<p><code>ipyvizzu-story</code> is available in the following BI tools. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Mode</li> </ul>"},{"location":"environments/bi/mode/","title":"Mode","text":""},{"location":"environments/bi/mode/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Mode</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen *</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file **</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*<code>Mode</code> disables the fullscreen button</p> <p>**<code>Mode</code> does not provide a download option for the created file</p>"},{"location":"environments/bi/mode/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter] -t \"/tmp\" &gt; /dev/null 2&gt;&amp;1</code></pre>"},{"location":"environments/bi/mode/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Mode</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/ide/","title":"IDEs","text":"<p><code>ipyvizzu-story</code> is available in the following IDEs. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>PyCharm</li> <li>VSCode Python</li> </ul>"},{"location":"environments/ide/pycharm/","title":"PyCharm","text":""},{"location":"environments/ide/pycharm/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>PyCharm Professional</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/ide/pycharm/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/ide/pycharm/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>PyCharm Professional</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/ide/vscode/","title":"VSCode Python","text":""},{"location":"environments/ide/vscode/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>VSCode Python</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/ide/vscode/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/ide/vscode/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>VSCode Python</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/","title":"Notebooks","text":"<p><code>ipyvizzu-story</code> is available in the following Notebooks. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Jupyter Notebook</li> <li>Colab</li> <li>DataCamp</li> <li>Deepnote</li> <li>JupyterLab</li> <li>JupyterLite</li> <li>Kaggle</li> <li>Noteable</li> </ul>"},{"location":"environments/notebook/colab/","title":"Colab","text":""},{"location":"environments/notebook/colab/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Colab</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen *</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*<code>Colab</code> disables the fullscreen button, use the built-in <code>view output fullscreen</code> option instead</p>"},{"location":"environments/notebook/colab/#live-example","title":"Live example","text":""},{"location":"environments/notebook/colab/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/colab/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Colab</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# note: in Colab,\n# it is recommended to set the width and height (CSS style),\n# because it will be too large with the default settings\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/datacamp/","title":"DataCamp","text":""},{"location":"environments/notebook/datacamp/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>DataCamp</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method) *</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method) *</li> </ul> <ul> <li> Use fullscreen **</li> </ul> <ul> <li> Use navigation buttons *</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file *</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*<code>ipyvizzu-story</code> does not work in the default editor, switch to the <code>JupyterLab</code>-style editor</p> <p>**<code>DataCamp</code> disables the fullscreen button</p>"},{"location":"environments/notebook/datacamp/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/datacamp/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>DataCamp</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/deepnote/","title":"Deepnote","text":""},{"location":"environments/notebook/deepnote/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Deepnote</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen *</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code> **</li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*<code>Deepnote</code> disables the fullscreen button</p> <p>**mandatory</p>"},{"location":"environments/notebook/deepnote/#live-example","title":"Live example","text":""},{"location":"environments/notebook/deepnote/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/deepnote/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Deepnote</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# note: in Deepnote,\n# you need to set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyterlab/","title":"JupyterLab","text":""},{"location":"environments/notebook/jupyterlab/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>JupyterLab</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/notebook/jupyterlab/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/jupyterlab/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>JupyterLab</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyterlite/","title":"JupyterLite","text":""},{"location":"environments/notebook/jupyterlite/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>JupyterLite</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/notebook/jupyterlite/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>import micropip\n\nawait micropip.install(\"ipyvizzu-story[jupyter]\")</code></pre>"},{"location":"environments/notebook/jupyterlite/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>JupyterLite</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/jupyternotebook/","title":"Jupyter Notebook","text":""},{"location":"environments/notebook/jupyternotebook/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Jupyter Notebook</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/notebook/jupyternotebook/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter]</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/jupyternotebook/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Jupyter Notebook</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/kaggle/","title":"Kaggle","text":""},{"location":"environments/notebook/kaggle/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Kaggle</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen *</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*<code>Kaggle</code> disables the fullscreen button</p>"},{"location":"environments/notebook/kaggle/#live-example","title":"Live example","text":""},{"location":"environments/notebook/kaggle/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/kaggle/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Kaggle</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/notebook/noteable/","title":"Noteable","text":""},{"location":"environments/notebook/noteable/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Noteable</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/notebook/noteable/#installation","title":"Installation","text":"<p>Place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/notebook/noteable/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Noteable</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/","title":"App platforms","text":"<p><code>ipyvizzu-story</code> is available in the following App platforms. <code>ipyvizzu-story</code> tries to figure out the environment it is used in and import the correct type of <code>Story</code>, however <code>Story</code> could also be imported using full path.</p> <p>We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo.</p> <ul> <li>Streamlit</li> <li>Flask</li> <li>Mercury/mljar</li> <li>Voil\u00e0</li> </ul>"},{"location":"environments/platform/flask/","title":"Flask","text":""},{"location":"environments/platform/flask/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Flask</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method) *</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method) *</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*you can display the created <code>Story</code> in other ways, see the sample below</p>"},{"location":"environments/platform/flask/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu-story flask</code></pre>"},{"location":"environments/platform/flask/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Flask</code> with the following sample.</p> <pre><code># import flask, ipyvizzu and ipyvizzu-story\n\nfrom pathlib import Path\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.py.story import Story\n\nfrom flask import Flask, render_template\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\n\n\n# you can display the Story from the saved string\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef vizzu():\n    return render_template(\"vizzu.html\", mystory=html)</code></pre> <p>Place the above code blocks into a python file (for example called <code>application.py</code>), create the html template (<code>templates/vizzu.html</code>) with the following content if you display the <code>Story</code> from the saved string</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;body&gt;\n  &lt;div class=\"container\"&gt;\n   &lt;iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mystory }}\" width=\"800px\"&gt;\n   &lt;/iframe&gt;\n  &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>or with the following if you display the <code>Story</code> from the exported html file</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;body&gt;\n  &lt;div class=\"container\"&gt;\n   &lt;iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\" {{url_for('static', filename='/mystory.html')}}\" width=\"800px\"&gt;\n   &lt;/iframe&gt;\n  &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>and run the following command in your command line in order to try it.</p> <pre><code>flask --app application run</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/mercury/","title":"Mercury/mljar","text":""},{"location":"environments/platform/mercury/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Mercury/mljar</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/platform/mercury/#live-example","title":"Live example","text":""},{"location":"environments/platform/mercury/#installation","title":"Installation","text":"<p>Add <code>ipyvizzu-story</code> to <code>requirements.txt</code>.</p> <pre><code>python-dotenv\npandas\nmljar-mercury\nipyvizzu-story</code></pre>"},{"location":"environments/platform/mercury/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Mercury/mljar</code> with the following sample.</p> <pre><code>---\ntitle: ipyvizzu-story demo\ndescription: ipyvizzu-story demo with mercury\nshow-code: False\nparams:\nparams:\n    selected:\n        input: select\n        label: select what you want to see\n        choices: [animation, code]\n        multi: True\n---</code></pre> <pre><code># configure default value\n\nselected = [\"animation\"]\n\n\n# import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\nfrom IPython.display import display as display_html, HTML\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\n\n\nif \"animation\" is selected:\n    # you can display the Story with the `play` method\n    story.play()\nif \"code\" is selected:\n    # you can display the html code\n    display_html(html)</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/streamlit/","title":"Streamlit","text":""},{"location":"environments/platform/streamlit/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Streamlit</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code> *</li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul> <p>*mandatory</p>"},{"location":"environments/platform/streamlit/#installation","title":"Installation","text":"<p>Run the following command in your command line in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>pip install ipyvizzu-story[streamlit]</code></pre>"},{"location":"environments/platform/streamlit/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Streamlit</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.st.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}))\n)\nstory.add_slide(slide2)\n\n\n# note: in Streamlit,\n# you need to set the width and height in pixels as int\n\nstory.set_size(width=800, height=480)\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()</code></pre> <p>Place the above code blocks into a python file (for example called <code>ipyvizzustory_example.py</code>) and run the following command in your command line in order to try it.</p> <pre><code>streamlit run ipyvizzustory_example.py</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"environments/platform/voila/","title":"Voil\u00e0","text":""},{"location":"environments/platform/voila/#features","title":"Features","text":"<p>The features of <code>ipyvizzu-story</code> that are available in <code>Voil\u00e0</code> are marked with a green check.</p> <ul> <li> Display the created <code>Story</code> (<code>play</code> method)</li> </ul> <ul> <li> Display the created <code>Story</code> (<code>_repr_html_</code> method)</li> </ul> <ul> <li> Use fullscreen</li> </ul> <ul> <li> Use navigation buttons</li> </ul> <ul> <li> Set width/height of the <code>Story</code></li> </ul> <ul> <li> Export the <code>Story</code> into a html file</li> </ul> <ul> <li> Get the html <code>Story</code> as a string</li> </ul>"},{"location":"environments/platform/voila/#installation","title":"Installation","text":"<p>Run the following command in your command line</p> <pre><code>pip install ipyvizzu-story[jupyter] voila</code></pre> <p>or place the following code into a notebook cell in order to install <code>ipyvizzu-story</code> (visit Installation chapter for more options and details).</p> <pre><code>!pip install ipyvizzu-story[jupyter]</code></pre>"},{"location":"environments/platform/voila/#sample","title":"Sample","text":"<p>Try <code>ipyvizzu-story</code> in <code>Voil\u00e0</code> with the following sample.</p> <pre><code># import ipyvizzu and ipyvizzu-story\n\nfrom ipyvizzu import Data, Config\nfrom ipyvizzustory import Slide, Step\n\nfrom ipyvizzustory import Story  # or\n\n# from ipyvizzustory.env.ipy.story import Story\n\n\n# create data and initialize Story with the created data\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n# you can also add data with pandas\n\n# import pandas as pd\n#\n# data = Data()\n# df = pd.read_csv(\n#     \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n# )\n# data.add_data_frame(df)\n\nstory = Story(data=data)\n\n\n# create Slides and Steps and add them to the Story\n\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# you can set the width and height (CSS style)\n\nstory.set_size(width=\"800px\", height=\"480px\")\n\n\n# you can get the html Story as a string\n\nhtml = story.to_html()\nprint(html)\n\n\n# you can display the Story with the `play` method\n\nstory.play()\n\n\n# or you can also use the `_repr_html_` method.\n\n# story</code></pre> <p>Place the above code blocks into notebook cells in a notebook file (for example called <code>ipyvizzustory_example.ipynb</code>) and run the following command in your command line in order to try it.</p> <pre><code>voila ipyvizzustory_example.ipynb</code></pre> <p>Check the Tutorial for more info.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/_basic/","title":"Basic example","text":"In\u00a0[1]: Copied! <pre>from ipyvizzu import Data, Config\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])\n\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\n# Create the second slide\n# Configs provided here are changes to the visualization\n# created in the previous Step\nslide2 = Slide(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nstory.add_slide(slide2)\n\n\n# Play the created story!\nstory.play()\n</pre> from ipyvizzu import Data, Config from ipyvizzustory import Story, Slide, Step   # Create data object data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2])   # Create story object, add data to it story = Story(data=data)   # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide(     Step(         Config({\"x\": \"Foo\", \"y\": \"Bar\"}),     ) ) # Add the slide to the story story.add_slide(slide1)  # Create the second slide # Configs provided here are changes to the visualization # created in the previous Step slide2 = Slide(     Step(         Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),     ) ) story.add_slide(slide2)   # Play the created story! story.play()"},{"location":"examples/_basic/#Basic-example","title":"Basic example\u00b6","text":"<p>The below story shows a basic use case for <code>ipyvizzu-story</code>.</p>"},{"location":"examples/linkedinpoll/","title":"Presentation Poll Results","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"./linkedinpoll/linkedinpoll.csv\",\n    dtype={\"Year\": str},\n)\ndata.add_data_frame(df)\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"450px\")\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Style(\n            {\n                \"legend\": {\n                    \"label\": {\"fontSize\": \"1.1em\"},\n                    \"paddingRight\": \"-1em\",\n                },\n                \"plot\": {\n                    \"marker\": {\"label\": {\"fontSize\": \"1.1em\"}},\n                    \"paddingLeft\": \"10em\",\n                    \"xAxis\": {\n                        \"title\": {\"color\": \"#00000000\"},\n                        \"label\": {\"fontSize\": \"1.1em\"},\n                    },\n                    \"yAxis\": {\"label\": {\"fontSize\": \"1.1em\"}},\n                },\n                \"logo\": {\"width\": \"6em\"},\n                \"fontSize\": \"0.8em\",\n            }\n        ),\n        Config(\n            {\n                \"x\": {\"set\": [\"Vote percentage [%]\", \"Answer\"]},\n                \"y\": \"Group number\",\n                \"color\": \"Answer\",\n                \"label\": \"Vote percentage [%]\",\n                \"title\": \"How often do you present \"\n                + \"your findings to business stakeholders?\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),\n        Config(\n            {\n                \"split\": True,\n                \"title\": \"2 or more is the most popular answer in every group\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide(\n    Step(\n        Style(\n            {\n                \"plot\": {\n                    \"marker\": {\"label\": {\"fontSize\": \"0.916667em\"}}\n                }\n            }\n        ),\n        Config(\n            {\n                \"x\": {\"set\": [\"Vote count\", \"Answer\"]},\n                \"label\": \"Vote count\",\n                \"title\": \"61% of the votes came from one group\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide()\nslide4.add_step(\n    Step(\n        Style({\"plot\": {\"yAxis\": {\"title\": {\"color\": \"#00000000\"}}}}),\n        Config(\n            {\n                \"x\": \"Answer\",\n                \"y\": [\"Group number\", \"Vote count\"],\n                \"split\": False,\n                \"legend\": \"color\",\n            }\n        ),\n    )\n)\nslide4.add_step(\n    Step(\n        Style({\"plot\": {\"marker\": {\"label\": {\"fontSize\": \"1.1em\"}}}}),\n        Config(\n            {\"y\": \"Vote count\", \"title\": \"More than 700 people voted\"}\n        ),\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide()\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"Answer percentage [%]\", \"Answer\"],\n                \"y\": None,\n                \"label\": \"Answer percentage [%]\",\n            }\n        )\n    )\n)\nslide5.add_step(\n    Step(\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),\n        Config(\n            {\n                \"coordSystem\": \"polar\",\n                \"title\": \"More than two-third of respondents present \"\n                + \"at least once per month\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\n\n# Play the created story!\nstory.play()\n</pre> import pandas as pd  from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step   # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv(     \"./linkedinpoll/linkedinpoll.csv\",     dtype={\"Year\": str}, ) data.add_data_frame(df)  # Create story object, add data to it story = Story(data=data)  # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"450px\")   # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide(     Step(         Style(             {                 \"legend\": {                     \"label\": {\"fontSize\": \"1.1em\"},                     \"paddingRight\": \"-1em\",                 },                 \"plot\": {                     \"marker\": {\"label\": {\"fontSize\": \"1.1em\"}},                     \"paddingLeft\": \"10em\",                     \"xAxis\": {                         \"title\": {\"color\": \"#00000000\"},                         \"label\": {\"fontSize\": \"1.1em\"},                     },                     \"yAxis\": {\"label\": {\"fontSize\": \"1.1em\"}},                 },                 \"logo\": {\"width\": \"6em\"},                 \"fontSize\": \"0.8em\",             }         ),         Config(             {                 \"x\": {\"set\": [\"Vote percentage [%]\", \"Answer\"]},                 \"y\": \"Group number\",                 \"color\": \"Answer\",                 \"label\": \"Vote percentage [%]\",                 \"title\": \"How often do you present \"                 + \"your findings to business stakeholders?\",             }         ),     ) ) # Add the slide to the story story.add_slide(slide1)  slide2 = Slide(     Step(         Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),         Config(             {                 \"split\": True,                 \"title\": \"2 or more is the most popular answer in every group\",             }         ),     ) ) story.add_slide(slide2)  slide3 = Slide(     Step(         Style(             {                 \"plot\": {                     \"marker\": {\"label\": {\"fontSize\": \"0.916667em\"}}                 }             }         ),         Config(             {                 \"x\": {\"set\": [\"Vote count\", \"Answer\"]},                 \"label\": \"Vote count\",                 \"title\": \"61% of the votes came from one group\",             }         ),     ) ) story.add_slide(slide3)  slide4 = Slide() slide4.add_step(     Step(         Style({\"plot\": {\"yAxis\": {\"title\": {\"color\": \"#00000000\"}}}}),         Config(             {                 \"x\": \"Answer\",                 \"y\": [\"Group number\", \"Vote count\"],                 \"split\": False,                 \"legend\": \"color\",             }         ),     ) ) slide4.add_step(     Step(         Style({\"plot\": {\"marker\": {\"label\": {\"fontSize\": \"1.1em\"}}}}),         Config(             {\"y\": \"Vote count\", \"title\": \"More than 700 people voted\"}         ),     ) ) story.add_slide(slide4)  slide5 = Slide() slide5.add_step(     Step(         Config(             {                 \"x\": [\"Answer percentage [%]\", \"Answer\"],                 \"y\": None,                 \"label\": \"Answer percentage [%]\",             }         )     ) ) slide5.add_step(     Step(         Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),         Config(             {                 \"coordSystem\": \"polar\",                 \"title\": \"More than two-third of respondents present \"                 + \"at least once per month\",             }         ),     ) ) story.add_slide(slide5)   # Play the created story! story.play() <ul> <li><p>Group 1: AI &amp; ML  - Analytics , Data Science  .  SAP BI/ Analytics Cloud /Tableau /Power BI /Birst</p> </li> <li><p>Group 2: Artificial Intelligence, Digital Transformation Data Science, Automation, Machine Learning Analytics</p> </li> <li><p>Group 3: Data Scientist, Data Analyst and Data Engineer</p> </li> <li><p>Group 4: Python Developers Community (moderated)</p> </li> <li><p>Group 5: Data Analytics, Data Science, Business Analytics, Business Intelligence, Data Scientist &amp; Analyst</p> </li> </ul>"},{"location":"examples/linkedinpoll/#Presentation-Poll-Results","title":"Presentation Poll Results\u00b6","text":"<p>In August, 2022, we asked data scientists in 5 LinkedIn groups about how often they have to present the results of their analysis to business stakeholders. This is a data story about the results of that poll.</p>"},{"location":"examples/population/","title":"UN Population Forecast","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"./population/population.csv\",\n    dtype={\"Year\": str},\n)\ndata.add_data_frame(df)\n\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Data.filter(\"record.Continent == 'Africa'\"),\n        Config.stackedArea(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"stackedBy\": \"Subregion\",\n                \"title\": \"Population of Africa 1953-2098\",\n            }\n        ),\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"angle\": 2.0}}}}),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config.percentageArea(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"stackedBy\": \"Subregion\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide(\n    Step(\n        Config.stream(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"stackedBy\": \"Subregion\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide(\n    Step(\n        Config.violin(\n            {\n                \"x\": \"Year\",\n                \"y\": \"Medium\",\n                \"splittedBy\": \"Subregion\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide4)\n\n\n# Play the created story!\nstory.play()\n</pre> import pandas as pd  from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step   # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv(     \"./population/population.csv\",     dtype={\"Year\": str}, ) data.add_data_frame(df)   # Create story object, add data to it story = Story(data=data)  # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\")  # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True)   # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide(     Step(         Data.filter(\"record.Continent == 'Africa'\"),         Config.stackedArea(             {                 \"x\": \"Year\",                 \"y\": \"Medium\",                 \"stackedBy\": \"Subregion\",                 \"title\": \"Population of Africa 1953-2098\",             }         ),         Style({\"plot\": {\"xAxis\": {\"label\": {\"angle\": 2.0}}}}),     ) ) # Add the slide to the story story.add_slide(slide1)  slide2 = Slide(     Step(         Config.percentageArea(             {                 \"x\": \"Year\",                 \"y\": \"Medium\",                 \"stackedBy\": \"Subregion\",             }         ),     ) ) story.add_slide(slide2)  slide3 = Slide(     Step(         Config.stream(             {                 \"x\": \"Year\",                 \"y\": \"Medium\",                 \"stackedBy\": \"Subregion\",             }         ),     ) ) story.add_slide(slide3)  slide4 = Slide(     Step(         Config.violin(             {                 \"x\": \"Year\",                 \"y\": \"Medium\",                 \"splittedBy\": \"Subregion\",             }         ),     ) ) story.add_slide(slide4)   # Play the created story! story.play()"},{"location":"examples/population/#UN-Population-Forecast","title":"UN Population Forecast\u00b6","text":"<p>In this example, we explore the population of Africa between 1953-2098. On top of that, this story shows how to use the chart configuration presets. Check ipyvizzu - Chart presets chapter and ipyvizzu - Preset charts gallery for more details on the available chart presets.</p>"},{"location":"examples/proglangs/","title":"Popularity of Programming Languages","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"./proglangs/proglangs.csv\",\n    dtype={\"Year\": str},\n)\ndata.add_data_frame(df)\n\n\n# Create story object, add data to it\nstory = Story(data=data)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"600px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n# Set a handler that prevents showing specific elements\nlabel_handler_method = (\n    \"if(event.data.text.split(' ')[0] &lt; 5) event.preventDefault()\"\n)\nstory.add_event(\"plot-marker-label-draw\", label_handler_method)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Data.filter(\"record.Year == 2022\"),\n        Config(\n            {\n                \"x\": [\"Popularity\", \"Value[%]\"],\n                \"y\": [\"Language\", \"Year\", \"Lang_year\"],\n                \"color\": \"Popularity\",\n                \"label\": \"Value[%]\",\n                \"align\": \"stretch\",\n                \"title\": \"Use of programming languages by data scientists in 2022\",\n                \"lightness\": \"Year\",\n                \"legend\": \"color\",\n            }\n        ),\n        Style(\n            {\n                \"logo\": {\"width\": \"5em\"},\n                \"plot\": {\n                    \"xAxis\": {\"title\": {\"color\": \"#00000000\"}},\n                    \"paddingLeft\": \"2.5em\",\n                    \"marker\": {\n                        \"colorPalette\": \"#3DAE2BFF \"\n                        + \"#00833EFF \"\n                        + \"#00A19BFF \"\n                        + \"#0075A9FF \"\n                        + \"#003764FF\",\n                        \"minLightness\": 0,\n                        \"maxLightness\": 0.4,\n                    },\n                },\n                \"fontSize\": \"0.8em\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Config(\n            {\n                \"split\": True,\n                \"align\": \"min\",\n                \"title\": \"Python is always or frequently used by 58%\",\n            }\n        ),\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide()\nslide3.add_step(\n    Step(\n        Config({\"split\": False, \"align\": \"stretch\"}),\n        Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#999999FF\"}}}}),\n    )\n)\nslide3.add_step(\n    Step(\n        Data.filter(\n\"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; record.Year == 2022\n            \"\"\"\n        ),\n        Config({\"x\": {\"range\": {\"max\": 100}}, \"align\": \"min\"}),\n    )\n)\nslide3.add_step(\n    Step(\n        Config(\n            {\n                \"sort\": \"byValue\",\n                \"title\": \"Python &amp; SQL are the most popular by a huge margin\",\n            }\n        )\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide()\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"sort\": \"none\",\n                \"title\": \"Let's focus on the six languages with data since 2020\",\n            }\n        )\n    )\n)\nslide4.add_step(\n    Step(\n        Data.filter(\n\"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; (record.Language == 'R' || \n            record.Language == 'Python' || \n            record.Language == 'JavaScript' || \n            record.Language == 'Java' || \n            record.Language == 'C#' || \n            record.Language == 'C/C++') \n            &amp;&amp; record.Year == 2022\n            \"\"\"\n        ),\n    )\n)\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Lang_year\", \"Year\"],\n                \"x\": [\"Popularity\", \"Language\", \"Value[%]\"],\n            }\n        )\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide()\nslide5.add_step(\n    Step(\n        Data.filter(\n\"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; (record.Language == 'R' || \n            record.Language == 'Python' || \n            record.Language == 'JavaScript' || \n            record.Language == 'Java' || \n            record.Language == 'C#' || \n            record.Language == 'C/C++') \n            &amp;&amp; record.Year != 2020\n            \"\"\"\n        ),\n    )\n)\nslide5.add_step(\n    Step(\n        Data.filter(\n\"\"\"\n            (record.Popularity == 'Always' || record.Popularity == 'Frequently') \n            &amp;&amp; (record.Language == 'R' || \n            record.Language == 'Python' || \n            record.Language == 'JavaScript' || \n            record.Language == 'Java' || \n            record.Language == 'C#' || \n            record.Language == 'C/C++')\n            \"\"\"\n        ),\n        Config(\n            {\n                \"title\": \"C/C++, C#, Java and Javascript are gaining popularity\"\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\n\n# Play the created story!\nstory.play()\n</pre> import pandas as pd  from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step   # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv(     \"./proglangs/proglangs.csv\",     dtype={\"Year\": str}, ) data.add_data_frame(df)   # Create story object, add data to it story = Story(data=data)  # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"600px\")  # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True)  # Set a handler that prevents showing specific elements label_handler_method = (     \"if(event.data.text.split(' ')[0] &lt; 5) event.preventDefault()\" ) story.add_event(\"plot-marker-label-draw\", label_handler_method)   # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide(     Step(         Data.filter(\"record.Year == 2022\"),         Config(             {                 \"x\": [\"Popularity\", \"Value[%]\"],                 \"y\": [\"Language\", \"Year\", \"Lang_year\"],                 \"color\": \"Popularity\",                 \"label\": \"Value[%]\",                 \"align\": \"stretch\",                 \"title\": \"Use of programming languages by data scientists in 2022\",                 \"lightness\": \"Year\",                 \"legend\": \"color\",             }         ),         Style(             {                 \"logo\": {\"width\": \"5em\"},                 \"plot\": {                     \"xAxis\": {\"title\": {\"color\": \"#00000000\"}},                     \"paddingLeft\": \"2.5em\",                     \"marker\": {                         \"colorPalette\": \"#3DAE2BFF \"                         + \"#00833EFF \"                         + \"#00A19BFF \"                         + \"#0075A9FF \"                         + \"#003764FF\",                         \"minLightness\": 0,                         \"maxLightness\": 0.4,                     },                 },                 \"fontSize\": \"0.8em\",             }         ),     ) ) # Add the slide to the story story.add_slide(slide1)  slide2 = Slide(     Step(         Config(             {                 \"split\": True,                 \"align\": \"min\",                 \"title\": \"Python is always or frequently used by 58%\",             }         ),         Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}),     ) ) story.add_slide(slide2)  slide3 = Slide() slide3.add_step(     Step(         Config({\"split\": False, \"align\": \"stretch\"}),         Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#999999FF\"}}}}),     ) ) slide3.add_step(     Step(         Data.filter(             \"\"\"             (record.Popularity == 'Always' || record.Popularity == 'Frequently')              &amp;&amp; record.Year == 2022             \"\"\"         ),         Config({\"x\": {\"range\": {\"max\": 100}}, \"align\": \"min\"}),     ) ) slide3.add_step(     Step(         Config(             {                 \"sort\": \"byValue\",                 \"title\": \"Python &amp; SQL are the most popular by a huge margin\",             }         )     ) ) story.add_slide(slide3)  slide4 = Slide() slide4.add_step(     Step(         Config(             {                 \"sort\": \"none\",                 \"title\": \"Let's focus on the six languages with data since 2020\",             }         )     ) ) slide4.add_step(     Step(         Data.filter(             \"\"\"             (record.Popularity == 'Always' || record.Popularity == 'Frequently')              &amp;&amp; (record.Language == 'R' ||              record.Language == 'Python' ||              record.Language == 'JavaScript' ||              record.Language == 'Java' ||              record.Language == 'C#' ||              record.Language == 'C/C++')              &amp;&amp; record.Year == 2022             \"\"\"         ),     ) ) slide4.add_step(     Step(         Config(             {                 \"y\": [\"Lang_year\", \"Year\"],                 \"x\": [\"Popularity\", \"Language\", \"Value[%]\"],             }         )     ) ) story.add_slide(slide4)  slide5 = Slide() slide5.add_step(     Step(         Data.filter(             \"\"\"             (record.Popularity == 'Always' || record.Popularity == 'Frequently')              &amp;&amp; (record.Language == 'R' ||              record.Language == 'Python' ||              record.Language == 'JavaScript' ||              record.Language == 'Java' ||              record.Language == 'C#' ||              record.Language == 'C/C++')              &amp;&amp; record.Year != 2020             \"\"\"         ),     ) ) slide5.add_step(     Step(         Data.filter(             \"\"\"             (record.Popularity == 'Always' || record.Popularity == 'Frequently')              &amp;&amp; (record.Language == 'R' ||              record.Language == 'Python' ||              record.Language == 'JavaScript' ||              record.Language == 'Java' ||              record.Language == 'C#' ||              record.Language == 'C/C++')             \"\"\"         ),         Config(             {                 \"title\": \"C/C++, C#, Java and Javascript are gaining popularity\"             }         ),     ) ) story.add_slide(slide5)   # Play the created story! story.play()"},{"location":"examples/proglangs/#Popularity-of-Programming-Languages","title":"Popularity of Programming Languages\u00b6","text":"<p>What programming languages do data scientists use?</p> <p>This was one of the questions in the State of Data Science Reports published by Anaconda between 2020 and 2022. This data story shows the answers to this question.</p>"},{"location":"examples/titanic/","title":"Passengers of the Titanic","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"./titanic/titanic.csv\",\n    dtype={\"Pclass\": str},\n)\n\ndf.loc[df[\"Age\"].between(0, 20, \"both\"), \"Age_group\"] = \"20-\"\ndf.loc[df[\"Age\"].between(20, 30, \"right\"), \"Age_group\"] = \"20-30\"\ndf.loc[df[\"Age\"].between(30, 40, \"right\"), \"Age_group\"] = \"30-40\"\ndf.loc[df[\"Age\"].between(40, 50, \"right\"), \"Age_group\"] = \"40-50\"\ndf.loc[df[\"Age\"].between(50, 60, \"right\"), \"Age_group\"] = \"50-60\"\ndf.loc[df[\"Age\"].between(60, 100, \"right\"), \"Age_group\"] = \"60+\"\ndf[\"Age_group\"] = df[\"Age_group\"].fillna(\"NaN\")\n\n# Prepare to sort the dataframe by salary list\nagegroupsorter = [\n    \"20-\",\n    \"20-30\",\n    \"30-40\",\n    \"40-50\",\n    \"50-60\",\n    \"60+\",\n    \"NaN\",\n]\n\n# Create the dictionary that defines the order for sorting\nsorterIndex = dict(zip(agegroupsorter, range(len(agegroupsorter))))\n\n# Generate a rank column that will be used to sort\n# the dataframe numerically\ndf[\"Age_group_rank\"] = df[\"Age_group\"].map(sorterIndex)\ndf.sort_values([\"Age_group_rank\"], inplace=True)\n\ndata.add_data_frame(df)\n\n\n# Set the style of the charts in the story\nstyle = Style(\n    {\n        \"plot\": {\n            \"yAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1em\",\n                    \"paddingRight\": \"1.2em\",\n                },\n                \"title\": {\"color\": \"#ffffff00\"},\n            },\n            \"xAxis\": {\n                \"label\": {\n                    \"angle\": \"2.5\",\n                    \"fontSize\": \"1.1em\",\n                    \"paddingRight\": \"0em\",\n                    \"paddingTop\": \"1em\",\n                },\n                \"title\": {\"fontSize\": \"1em\", \"paddingTop\": \"2.5em\"},\n            },\n        },\n        \"logo\": {\"width\": \"5em\"},\n    }\n)\n\n# Create story object, add data and style settings to it\nstory = Story(data=data, style=style)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Config.bar(\n            {\"x\": \"Count\", \"title\": \"Passengers of the Titanic\"}\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide()\nslide2.add_step(\n    Step(\n        Config.stackedBar({\"x\": \"Count\", \"stackedBy\": \"Sex\"}),\n    )\n)\nslide2.add_step(\n    Step(\n        Config.groupedBar(\n            {\n                \"x\": \"Count\",\n                \"y\": \"Sex\",\n                \"groupedBy\": \"Sex\",\n                \"legend\": \"color\",\n                \"title\": \"Rougly one-third of the passengers were ladies\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide()\nslide3.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"Count\", \"Survived\"],\n                \"y\": \"Sex\",\n                \"color\": \"Sex\",\n                \"lightness\": \"Survived\",\n                \"label\": [\"Survived\", \"Count\"],\n            }\n        ),\n    )\n)\nslide3.add_step(\n    Step(\n        Config(\n            {\n                \"align\": \"stretch\",\n                \"title\": \"Much more women survived than men\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide()\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"x\": \"Count\",\n                \"align\": \"none\",\n                \"label\": None,\n                \"lightness\": None,\n                \"title\": \"Let's add the age of the passengers to the mix\",\n            }\n        ),\n    )\n)\nslide4.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Count\", \"Sex\"],\n                \"x\": \"Age_group\",\n                \"label\": \"Count\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide()\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"label\": None,\n                \"title\": \"Let's see how many people survived/died \"\n                + \"in these age groups\",\n            }\n        ),\n    )\n)\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Count\", \"Sex\", \"Survived\"],\n                \"lightness\": \"Survived\",\n                \"legend\": \"lightness\",\n            }\n        ),\n    )\n)\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"Count\", \"Survived\", \"Sex\"],\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\nslide6 = Slide(\n    Step(\n        Config(\n            {\n                \"align\": \"stretch\",\n                \"title\": \"Survival rate varies a bit between age groups\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide6)\n\nslide7 = Slide(\n    Step(\n        Data.filter(\"record.Sex == 'male'\"),\n        Config(\n            {\n                \"title\": \"But again shows a very different picture for men...\"\n            }\n        ),\n    )\n)\nstory.add_slide(slide7)\n\nslide8 = Slide()\nslide8.add_step(Step(Data.filter(None)))\nslide8.add_step(\n    Step(\n        Data.filter(\"record.Sex == 'female'\"),\n        Config({\"title\": \"...and women\"}),\n    )\n)\nstory.add_slide(slide8)\n\n\n# Play the created story!\nstory.play()\n</pre> import pandas as pd  from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step   # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv(     \"./titanic/titanic.csv\",     dtype={\"Pclass\": str}, )  df.loc[df[\"Age\"].between(0, 20, \"both\"), \"Age_group\"] = \"20-\" df.loc[df[\"Age\"].between(20, 30, \"right\"), \"Age_group\"] = \"20-30\" df.loc[df[\"Age\"].between(30, 40, \"right\"), \"Age_group\"] = \"30-40\" df.loc[df[\"Age\"].between(40, 50, \"right\"), \"Age_group\"] = \"40-50\" df.loc[df[\"Age\"].between(50, 60, \"right\"), \"Age_group\"] = \"50-60\" df.loc[df[\"Age\"].between(60, 100, \"right\"), \"Age_group\"] = \"60+\" df[\"Age_group\"] = df[\"Age_group\"].fillna(\"NaN\")  # Prepare to sort the dataframe by salary list agegroupsorter = [     \"20-\",     \"20-30\",     \"30-40\",     \"40-50\",     \"50-60\",     \"60+\",     \"NaN\", ]  # Create the dictionary that defines the order for sorting sorterIndex = dict(zip(agegroupsorter, range(len(agegroupsorter))))  # Generate a rank column that will be used to sort # the dataframe numerically df[\"Age_group_rank\"] = df[\"Age_group\"].map(sorterIndex) df.sort_values([\"Age_group_rank\"], inplace=True)  data.add_data_frame(df)   # Set the style of the charts in the story style = Style(     {         \"plot\": {             \"yAxis\": {                 \"label\": {                     \"fontSize\": \"1em\",                     \"paddingRight\": \"1.2em\",                 },                 \"title\": {\"color\": \"#ffffff00\"},             },             \"xAxis\": {                 \"label\": {                     \"angle\": \"2.5\",                     \"fontSize\": \"1.1em\",                     \"paddingRight\": \"0em\",                     \"paddingTop\": \"1em\",                 },                 \"title\": {\"fontSize\": \"1em\", \"paddingTop\": \"2.5em\"},             },         },         \"logo\": {\"width\": \"5em\"},     } )  # Create story object, add data and style settings to it story = Story(data=data, style=style)  # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\")  # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True)   # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide(     Step(         Config.bar(             {\"x\": \"Count\", \"title\": \"Passengers of the Titanic\"}         ),     ) ) # Add the slide to the story story.add_slide(slide1)  slide2 = Slide() slide2.add_step(     Step(         Config.stackedBar({\"x\": \"Count\", \"stackedBy\": \"Sex\"}),     ) ) slide2.add_step(     Step(         Config.groupedBar(             {                 \"x\": \"Count\",                 \"y\": \"Sex\",                 \"groupedBy\": \"Sex\",                 \"legend\": \"color\",                 \"title\": \"Rougly one-third of the passengers were ladies\",             }         ),     ) ) story.add_slide(slide2)  slide3 = Slide() slide3.add_step(     Step(         Config(             {                 \"x\": [\"Count\", \"Survived\"],                 \"y\": \"Sex\",                 \"color\": \"Sex\",                 \"lightness\": \"Survived\",                 \"label\": [\"Survived\", \"Count\"],             }         ),     ) ) slide3.add_step(     Step(         Config(             {                 \"align\": \"stretch\",                 \"title\": \"Much more women survived than men\",             }         ),     ) ) story.add_slide(slide3)  slide4 = Slide() slide4.add_step(     Step(         Config(             {                 \"x\": \"Count\",                 \"align\": \"none\",                 \"label\": None,                 \"lightness\": None,                 \"title\": \"Let's add the age of the passengers to the mix\",             }         ),     ) ) slide4.add_step(     Step(         Config(             {                 \"y\": [\"Count\", \"Sex\"],                 \"x\": \"Age_group\",                 \"label\": \"Count\",             }         ),     ) ) story.add_slide(slide4)  slide5 = Slide() slide5.add_step(     Step(         Config(             {                 \"label\": None,                 \"title\": \"Let's see how many people survived/died \"                 + \"in these age groups\",             }         ),     ) ) slide5.add_step(     Step(         Config(             {                 \"y\": [\"Count\", \"Sex\", \"Survived\"],                 \"lightness\": \"Survived\",                 \"legend\": \"lightness\",             }         ),     ) ) slide5.add_step(     Step(         Config(             {                 \"y\": [\"Count\", \"Survived\", \"Sex\"],             }         ),     ) ) story.add_slide(slide5)  slide6 = Slide(     Step(         Config(             {                 \"align\": \"stretch\",                 \"title\": \"Survival rate varies a bit between age groups\",             }         ),     ) ) story.add_slide(slide6)  slide7 = Slide(     Step(         Data.filter(\"record.Sex == 'male'\"),         Config(             {                 \"title\": \"But again shows a very different picture for men...\"             }         ),     ) ) story.add_slide(slide7)  slide8 = Slide() slide8.add_step(Step(Data.filter(None))) slide8.add_step(     Step(         Data.filter(\"record.Sex == 'female'\"),         Config({\"title\": \"...and women\"}),     ) ) story.add_slide(slide8)   # Play the created story! story.play()"},{"location":"examples/titanic/#Passengers-of-the-Titanic","title":"Passengers of the Titanic\u00b6","text":""},{"location":"examples/trumptwitter/","title":"Trump Twitter Tirade","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\ndata = Data()\ndf = pd.read_csv(\n    \"./trumptwitter/trumptwitter.csv\",\n)\ndata.add_data_frame(df)\n\n\n# Set the style of the charts in the story\nstyle = Style(\n    {\n        \"tooltip\": {\"fontSize\": \"22px\"},\n        \"title\": {\"paddingTop\": \"1.2em\", \"fontSize\": \"2.5em\"},\n        \"legend\": {\"label\": {\"fontSize\": \"1.8em\"}, \"width\": \"16em\"},\n        \"logo\": {\"width\": \"6em\"},\n        \"plot\": {\n            \"marker\": {\"label\": {\"fontSize\": \"1.5em\"}},\n            \"yAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1.5em\",\n                },\n                \"title\": {\"color\": \"#ffffff00\"},\n                \"interlacing\": {\"color\": \"#ffffff00\"},\n            },\n            \"xAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1.6em\",\n                    \"paddingTop\": \"1em\",\n                },\n                \"title\": {\"fontSize\": \"1.4em\", \"paddingTop\": \"2.5em\"},\n            },\n        },\n    }\n)\n\n# Create story object, add data and style settings to it\nstory = Story(data=data, style=style)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Each slide here is a page in the final interactive story\n# Add the first slide\nslide1 = Slide(\n    Step(\n        Data.filter(\n            \"record.Firsttweet === 'Igen' &amp;&amp; record.Dummy === 'Nem'\"\n        ),\n        Config(\n            {\n                \"channels\": {\n                    \"y\": {\n                        \"set\": [\"tweets\"],\n                    },\n                    \"x\": {\"set\": [\"Period\", \"year\", \"month\"]},\n                    \"color\": \"Period\",\n                },\n                \"title\": \"Trump started tweeting in May '09\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\nslide2 = Slide(\n    Step(\n        Data.filter(\n            \"record.Period === 'New to Twitter' &amp;&amp; record.Dummy === 'Nem'\"\n        ),\n        Config(\n            {\n                \"title\": \"In the first two years he wasn't very active\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide2)\n\nslide3 = Slide(\n    Step(\n        Data.filter(\n\"\"\"\n            (record.Period === 'New to Twitter' || record.Period === 'Businessman')\n            &amp;&amp; record.Dummy === 'Nem'\n            \"\"\"\n        ),\n        Config(\n            {\n                \"title\": \"Then he got hooked on\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide3)\n\nslide4 = Slide(\n    Step(\n        Data.filter(\n\"\"\"\n            (record.Period === 'New to Twitter' || \n            record.Period === 'Businessman' || \n            record.Period === 'Nominee')\n            &amp;&amp; record.Dummy === 'Nem'\n            \"\"\"\n        ),\n        Config(\n            {\n                \"title\": \"Interesting trend after becoming a presidential nominee\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide4)\n\nslide5 = Slide(\n    Step(\n        Data.filter(\"record.Dummy === 'Nem'\"),\n        Config(\n            {\n                \"title\": \"And after he became President\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide5)\n\nslide6 = Slide()\nslide6.add_step(\n    Step(\n        Config({\"geometry\": \"area\", \"align\": \"center\"}),\n    )\n)\nslide6.add_step(\n    Step(\n        Config(\n            {\n                \"title\": \"All of Trump's tweets until May 2020\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide6)\n\nslide7 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": \"retweetcount\",\n                \"title\": \"And the number of times these were retweeted\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide7)\n\nslide8 = Slide()\nslide8.add_step(\n    Step(\n        Config(\n            {\n                \"y\": \"tweets\",\n                \"title\": \"Let's focus on the number of tweets for now\",\n            }\n        ),\n    )\n),\nslide8.add_step(\n    Step(\n        Config(\n            {\n                \"x\": {\"set\": [\"year\", \"month\"]},\n                \"color\": None,\n            }\n        )\n    )\n)\nstory.add_slide(slide8)\n\nslide9 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": [\"tweets\", \"Type\"],\n                \"color\": \"Type\",\n                \"title\": \"Original tweets, retweets &amp; replies sent\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"marker\": {\n                        \"colorPalette\": \"#A0CDEBFF #60C0E6FF #1DA1F3FF\"\n                    }\n                }\n            },\n        ),\n    )\n)\nstory.add_slide(slide9)\n\nslide10 = Slide(\n    Step(\n        Config({\"split\": True, \"align\": \"none\"}),\n        Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}),\n    )\n)\nstory.add_slide(slide10)\n\nslide11 = Slide(\n    Step(\n        Config(\n            {\n                \"split\": False,\n                \"align\": \"stretch\",\n                \"title\": \"Original tweets, retweets &amp; replies sent (%)\",\n            }\n        ),\n        Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#999999ff\"}}}}),\n    )\n)\nstory.add_slide(slide11)\n\nslide12 = Slide()\nslide12.add_step(\n    Step(\n        Config(\n            {\n                \"align\": \"center\",\n                \"title\": \"\",\n            }\n        ),\n    )\n)\nslide12.add_step(\n    Step(\n        Config({\"y\": \"tweets\", \"color\": None, \"legend\": \"lightness\"}),\n        Style(\n            {\"plot\": {\"marker\": {\"colorPalette\": \"null\"}}},\n        ),\n    )\n)\nslide12.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"tweets\", \"Tool\"],\n                \"color\": \"Tool\",\n                \"title\": \"Tools Trump Used to Tweet\",\n                \"legend\": \"color\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"marker\": {\n                        \"colorPalette\": \"#597696FF #ED2828FF #26EC87FF #29B9BFFF \"\n                    }\n                }\n            },\n        ),\n    )\n)\nstory.add_slide(slide12)\n\nslide13 = Slide(\n    Step(\n        Config({\"split\": True, \"align\": \"none\"}),\n        Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}),\n    )\n)\nstory.add_slide(slide13)\n\nslide14 = Slide()\nslide14.add_step(\n    Step(\n        Config(\n            {\n                \"geometry\": \"rectangle\",\n            }\n        ),\n    )\n)\nslide14.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"tweets\", \"year\", \"month\"],\n                \"y\": \"Tool\",\n                \"geometry\": \"rectangle\",\n                \"split\": False,\n                \"align\": \"none\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"xAxis\": {\"title\": {\"color\": \"#ffffff00\"}},\n                    \"yAxis\": {\"label\": {\"color\": \"#999999ff\"}},\n                }\n            },\n        ),\n    )\n)\nslide14.add_step(\n    Step(\n        Config(\n            {\n                \"x\": \"tweets\",\n                \"label\": \"tweets\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide14)\n\nslide15 = Slide()\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"tweets\", \"AMPM\", \"hour12\"],\n                \"label\": None,\n            }\n        ),\n    )\n)\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"y\": [\"tweets\", \"Tool\"],\n                \"x\": [\"AMPM\", \"hour12\"],\n                \"align\": \"max\",\n            }\n        ),\n    )\n)\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"geometry\": \"area\",\n            }\n        ),\n    )\n)\nslide15.add_step(\n    Step(\n        Config(\n            {\n                \"coordSystem\": \"polar\",\n                \"rotate\": 180,\n                \"title\": \"Time of Day When Trump Tweeted\",\n            }\n        ),\n        Style(\n            {\n                \"plot\": {\n                    \"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}},\n                    \"xAxis\": {\n                        \"label\": {\n                            \"fontSize\": \"2em\",\n                            \"paddingBottom\": \"2.5em\",\n                            \"paddingTop\": \"2.5em\",\n                            \"paddingLeft\": \"2.5em\",\n                            \"paddingRight\": \"2.5em\",\n                        }\n                    },\n                }\n            }\n        ),\n    )\n)\nstory.add_slide(slide15)\n\nslide16 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": [\"Businessman\", \"Tool\"],\n                \"title\": \"Times Trump Tweeted When Being a Businessman\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide16)\n\nslide17 = Slide(\n    Step(\n        Config(\n            {\n                \"y\": [\"President\", \"Tool\"],\n                \"title\": \"Times Trump Tweeted When Being President\",\n            }\n        ),\n    )\n)\nstory.add_slide(slide17)\n\n\n# Play the created story!\nstory.play()\n</pre> import pandas as pd  from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step   # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv(     \"./trumptwitter/trumptwitter.csv\", ) data.add_data_frame(df)   # Set the style of the charts in the story style = Style(     {         \"tooltip\": {\"fontSize\": \"22px\"},         \"title\": {\"paddingTop\": \"1.2em\", \"fontSize\": \"2.5em\"},         \"legend\": {\"label\": {\"fontSize\": \"1.8em\"}, \"width\": \"16em\"},         \"logo\": {\"width\": \"6em\"},         \"plot\": {             \"marker\": {\"label\": {\"fontSize\": \"1.5em\"}},             \"yAxis\": {                 \"label\": {                     \"fontSize\": \"1.5em\",                 },                 \"title\": {\"color\": \"#ffffff00\"},                 \"interlacing\": {\"color\": \"#ffffff00\"},             },             \"xAxis\": {                 \"label\": {                     \"fontSize\": \"1.6em\",                     \"paddingTop\": \"1em\",                 },                 \"title\": {\"fontSize\": \"1.4em\", \"paddingTop\": \"2.5em\"},             },         },     } )  # Create story object, add data and style settings to it story = Story(data=data, style=style)  # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\")  # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True)   # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide(     Step(         Data.filter(             \"record.Firsttweet === 'Igen' &amp;&amp; record.Dummy === 'Nem'\"         ),         Config(             {                 \"channels\": {                     \"y\": {                         \"set\": [\"tweets\"],                     },                     \"x\": {\"set\": [\"Period\", \"year\", \"month\"]},                     \"color\": \"Period\",                 },                 \"title\": \"Trump started tweeting in May '09\",             }         ),     ) ) # Add the slide to the story story.add_slide(slide1)  slide2 = Slide(     Step(         Data.filter(             \"record.Period === 'New to Twitter' &amp;&amp; record.Dummy === 'Nem'\"         ),         Config(             {                 \"title\": \"In the first two years he wasn't very active\",             }         ),     ) ) story.add_slide(slide2)  slide3 = Slide(     Step(         Data.filter(             \"\"\"             (record.Period === 'New to Twitter' || record.Period === 'Businessman')             &amp;&amp; record.Dummy === 'Nem'             \"\"\"         ),         Config(             {                 \"title\": \"Then he got hooked on\",             }         ),     ) ) story.add_slide(slide3)  slide4 = Slide(     Step(         Data.filter(             \"\"\"             (record.Period === 'New to Twitter' ||              record.Period === 'Businessman' ||              record.Period === 'Nominee')             &amp;&amp; record.Dummy === 'Nem'             \"\"\"         ),         Config(             {                 \"title\": \"Interesting trend after becoming a presidential nominee\",             }         ),     ) ) story.add_slide(slide4)  slide5 = Slide(     Step(         Data.filter(\"record.Dummy === 'Nem'\"),         Config(             {                 \"title\": \"And after he became President\",             }         ),     ) ) story.add_slide(slide5)  slide6 = Slide() slide6.add_step(     Step(         Config({\"geometry\": \"area\", \"align\": \"center\"}),     ) ) slide6.add_step(     Step(         Config(             {                 \"title\": \"All of Trump's tweets until May 2020\",             }         ),     ) ) story.add_slide(slide6)  slide7 = Slide(     Step(         Config(             {                 \"y\": \"retweetcount\",                 \"title\": \"And the number of times these were retweeted\",             }         ),     ) ) story.add_slide(slide7)  slide8 = Slide() slide8.add_step(     Step(         Config(             {                 \"y\": \"tweets\",                 \"title\": \"Let's focus on the number of tweets for now\",             }         ),     ) ), slide8.add_step(     Step(         Config(             {                 \"x\": {\"set\": [\"year\", \"month\"]},                 \"color\": None,             }         )     ) ) story.add_slide(slide8)  slide9 = Slide(     Step(         Config(             {                 \"y\": [\"tweets\", \"Type\"],                 \"color\": \"Type\",                 \"title\": \"Original tweets, retweets &amp; replies sent\",             }         ),         Style(             {                 \"plot\": {                     \"marker\": {                         \"colorPalette\": \"#A0CDEBFF #60C0E6FF #1DA1F3FF\"                     }                 }             },         ),     ) ) story.add_slide(slide9)  slide10 = Slide(     Step(         Config({\"split\": True, \"align\": \"none\"}),         Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}),     ) ) story.add_slide(slide10)  slide11 = Slide(     Step(         Config(             {                 \"split\": False,                 \"align\": \"stretch\",                 \"title\": \"Original tweets, retweets &amp; replies sent (%)\",             }         ),         Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#999999ff\"}}}}),     ) ) story.add_slide(slide11)  slide12 = Slide() slide12.add_step(     Step(         Config(             {                 \"align\": \"center\",                 \"title\": \"\",             }         ),     ) ) slide12.add_step(     Step(         Config({\"y\": \"tweets\", \"color\": None, \"legend\": \"lightness\"}),         Style(             {\"plot\": {\"marker\": {\"colorPalette\": \"null\"}}},         ),     ) ) slide12.add_step(     Step(         Config(             {                 \"y\": [\"tweets\", \"Tool\"],                 \"color\": \"Tool\",                 \"title\": \"Tools Trump Used to Tweet\",                 \"legend\": \"color\",             }         ),         Style(             {                 \"plot\": {                     \"marker\": {                         \"colorPalette\": \"#597696FF #ED2828FF #26EC87FF #29B9BFFF \"                     }                 }             },         ),     ) ) story.add_slide(slide12)  slide13 = Slide(     Step(         Config({\"split\": True, \"align\": \"none\"}),         Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}),     ) ) story.add_slide(slide13)  slide14 = Slide() slide14.add_step(     Step(         Config(             {                 \"geometry\": \"rectangle\",             }         ),     ) ) slide14.add_step(     Step(         Config(             {                 \"x\": [\"tweets\", \"year\", \"month\"],                 \"y\": \"Tool\",                 \"geometry\": \"rectangle\",                 \"split\": False,                 \"align\": \"none\",             }         ),         Style(             {                 \"plot\": {                     \"xAxis\": {\"title\": {\"color\": \"#ffffff00\"}},                     \"yAxis\": {\"label\": {\"color\": \"#999999ff\"}},                 }             },         ),     ) ) slide14.add_step(     Step(         Config(             {                 \"x\": \"tweets\",                 \"label\": \"tweets\",             }         ),     ) ) story.add_slide(slide14)  slide15 = Slide() slide15.add_step(     Step(         Config(             {                 \"x\": [\"tweets\", \"AMPM\", \"hour12\"],                 \"label\": None,             }         ),     ) ) slide15.add_step(     Step(         Config(             {                 \"y\": [\"tweets\", \"Tool\"],                 \"x\": [\"AMPM\", \"hour12\"],                 \"align\": \"max\",             }         ),     ) ) slide15.add_step(     Step(         Config(             {                 \"geometry\": \"area\",             }         ),     ) ) slide15.add_step(     Step(         Config(             {                 \"coordSystem\": \"polar\",                 \"rotate\": 180,                 \"title\": \"Time of Day When Trump Tweeted\",             }         ),         Style(             {                 \"plot\": {                     \"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}},                     \"xAxis\": {                         \"label\": {                             \"fontSize\": \"2em\",                             \"paddingBottom\": \"2.5em\",                             \"paddingTop\": \"2.5em\",                             \"paddingLeft\": \"2.5em\",                             \"paddingRight\": \"2.5em\",                         }                     },                 }             }         ),     ) ) story.add_slide(slide15)  slide16 = Slide(     Step(         Config(             {                 \"y\": [\"Businessman\", \"Tool\"],                 \"title\": \"Times Trump Tweeted When Being a Businessman\",             }         ),     ) ) story.add_slide(slide16)  slide17 = Slide(     Step(         Config(             {                 \"y\": [\"President\", \"Tool\"],                 \"title\": \"Times Trump Tweeted When Being President\",             }         ),     ) ) story.add_slide(slide17)   # Play the created story! story.play()"},{"location":"examples/trumptwitter/#Trump-Twitter-Tirade","title":"Trump Twitter Tirade\u00b6","text":""},{"location":"examples/usbudget/","title":"US Federal R&amp;D budget","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nfrom ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step\n\n\n# Create data object, read csv to data frame and add data frame to data object\nexample_data = Data()\nexample_df = pd.read_csv(\n    \"./usbudget/usbudget.csv\",\n    dtype={\"Year\": str},\n)\nexample_data.add_data_frame(example_df)\n\n\n# Set the style of the charts in the story\nexample_style = Style(\n    {\n        \"plot\": {\n            \"yAxis\": {\n                \"label\": {\n                    \"fontSize\": \"1em\",\n                    \"paddingRight\": \"1.2em\",\n                },\n                \"title\": {\"color\": \"#ffffff00\"},\n            },\n            \"xAxis\": {\n                \"label\": {\n                    \"angle\": \"2.5\",\n                    \"fontSize\": \"1.1em\",\n                    \"paddingRight\": \"0em\",\n                    \"paddingTop\": \"1em\",\n                },\n                \"title\": {\"fontSize\": \"0.8em\", \"paddingTop\": \"2.5em\"},\n            },\n        },\n        \"logo\": {\"width\": \"5em\"},\n    }\n)\n\n# Create story object, add data and style settings to it\nstory = Story(data=example_data, style=example_style)\n\n# Set the size of the HTML element\n# that appears within the notebook\nstory.set_size(\"100%\", \"400px\")\n\n\n# Add the first slide,\n# containing a single animation step that sets the initial chart\nslide1 = Slide(\n    Step(\n        # Only include rows where the Function value != Defense\n        # Note, filters currently only accept JavaScript style filters,\n        # hence the \"!==\", rather than \"!=\"\n        Data.filter(\"record.Function !== 'Defense'\"),\n        Config(\n            {\n                \"channels\": {\n                    \"y\": {\n                        \"set\": [\"Amount[B$]\", \"Function\"],\n                        # Set the range of the y-axis\n                        # to the min and max of the data being shown\n                        # default value is 110% of the maximum value\n                        \"range\": {\"min\": \"0%\", \"max\": \"100%\"},\n                    },\n                    \"x\": {\"set\": [\"Year\"]},\n                    \"color\": \"Function\",\n                },\n                \"title\": \"Stacked Area Chart - U.S. R&amp;D Budget in 1955-2020\",\n                \"geometry\": \"area\",\n            }\n        ),\n    )\n)\n# Add the slide to the story\nstory.add_slide(slide1)\n\n# Show components side-by-side\nslide2 = Slide(\n    Step(\n        Config(\n            {\n                \"split\": True,\n                \"title\": \"Show Components Side by Side\",\n            }\n        )\n    )\n)\nstory.add_slide(slide2)\n\n# This slide contains multiple steps\n# Note that the slide is created as an empty object,\n# then steps are added to it one-by-one\nslide3 = Slide()\n# Step 1 - let's get back to the previous view\nslide3.add_step(Step(Config({\"split\": False})))\n# Step 2 - Add the defense function to the chart by removing it from the filter\nslide3.add_step(\n    Step(\n        Data.filter(None),\n        Config(\n            {\"title\": \"Add New Category While Keeping the Context\"}\n        ),\n    )\n)\n# Add the multi-step slide to the story, just like any other slide\nstory.add_slide(slide3)\n\n# Show share of components\nslide4 = Slide(\n    Step(\n        Config(\n            {\n                \"align\": \"stretch\",\n                \"title\": \"Show Share of Components (%)\",\n            }\n        )\n    )\n)\nstory.add_slide(slide4)\n\n# Compare data from 1955 and 2020\nslide5 = Slide()\n# Step 1 - switch back to value instead of percentage\nslide5.add_step(Step(Config({\"align\": \"none\"})))\n# Step 2 - switch to a stacked column chart by changing the geometry\nslide5.add_step(\n    Step(\n        Config(\n            {\n                \"geometry\": \"rectangle\",\n            }\n        )\n    )\n)\n# Step 3 - zoom to data from the first and last years\nslide5.add_step(\n    Step(\n        Data.filter(\n            \"record.Year === '1955' || record.Year === '2020' \"\n        ),\n        Config(\n            {\n                \"title\": \"Zoom to Specific Elements\",\n            }\n        ),\n    ),\n)\nstory.add_slide(slide5)\n\n# Group &amp; rearrange elements for comparison\nslide6 = Slide()\nslide6.add_step(\n    Step(\n        Config(\n            {\n                \"x\": [\"Year\", \"Function\"],\n                \"y\": \"Amount[B$]\",\n                \"label\": \"Amount[B$]\",\n                \"title\": \"Group &amp; Rearrange for Better Comparison\",\n            }\n        )\n    )\n)\n\nslide6.add_step(Step(Config({\"x\": [\"Function\", \"Year\"]})))\nstory.add_slide(slide6)\n\n\n# Switch on the tooltip that appears\n# when the user hovers the mouse over a chart element\nstory.set_feature(\"tooltip\", True)\n\n\n# Set a handler that prevents showing the year values that are not divisible by 5\nhandler = \"\"\"\nlet Year = parseFloat(event.data.text);\nif (!isNaN(Year) &amp;&amp; Year &gt; 1950 &amp;&amp; Year &lt; 2020 &amp;&amp; Year % 5 !== 0) {\n    event.preventDefault();\n}\n\"\"\"\n# Add handler to the plot-axis-label-draw event so that it takes effect\nstory.add_event(\"plot-axis-label-draw\", handler)\n\n\n# Play the created story!\nstory.play()\n</pre> import pandas as pd  from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step   # Create data object, read csv to data frame and add data frame to data object example_data = Data() example_df = pd.read_csv(     \"./usbudget/usbudget.csv\",     dtype={\"Year\": str}, ) example_data.add_data_frame(example_df)   # Set the style of the charts in the story example_style = Style(     {         \"plot\": {             \"yAxis\": {                 \"label\": {                     \"fontSize\": \"1em\",                     \"paddingRight\": \"1.2em\",                 },                 \"title\": {\"color\": \"#ffffff00\"},             },             \"xAxis\": {                 \"label\": {                     \"angle\": \"2.5\",                     \"fontSize\": \"1.1em\",                     \"paddingRight\": \"0em\",                     \"paddingTop\": \"1em\",                 },                 \"title\": {\"fontSize\": \"0.8em\", \"paddingTop\": \"2.5em\"},             },         },         \"logo\": {\"width\": \"5em\"},     } )  # Create story object, add data and style settings to it story = Story(data=example_data, style=example_style)  # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\")   # Add the first slide, # containing a single animation step that sets the initial chart slide1 = Slide(     Step(         # Only include rows where the Function value != Defense         # Note, filters currently only accept JavaScript style filters,         # hence the \"!==\", rather than \"!=\"         Data.filter(\"record.Function !== 'Defense'\"),         Config(             {                 \"channels\": {                     \"y\": {                         \"set\": [\"Amount[B$]\", \"Function\"],                         # Set the range of the y-axis                         # to the min and max of the data being shown                         # default value is 110% of the maximum value                         \"range\": {\"min\": \"0%\", \"max\": \"100%\"},                     },                     \"x\": {\"set\": [\"Year\"]},                     \"color\": \"Function\",                 },                 \"title\": \"Stacked Area Chart - U.S. R&amp;D Budget in 1955-2020\",                 \"geometry\": \"area\",             }         ),     ) ) # Add the slide to the story story.add_slide(slide1)  # Show components side-by-side slide2 = Slide(     Step(         Config(             {                 \"split\": True,                 \"title\": \"Show Components Side by Side\",             }         )     ) ) story.add_slide(slide2)  # This slide contains multiple steps # Note that the slide is created as an empty object, # then steps are added to it one-by-one slide3 = Slide() # Step 1 - let's get back to the previous view slide3.add_step(Step(Config({\"split\": False}))) # Step 2 - Add the defense function to the chart by removing it from the filter slide3.add_step(     Step(         Data.filter(None),         Config(             {\"title\": \"Add New Category While Keeping the Context\"}         ),     ) ) # Add the multi-step slide to the story, just like any other slide story.add_slide(slide3)  # Show share of components slide4 = Slide(     Step(         Config(             {                 \"align\": \"stretch\",                 \"title\": \"Show Share of Components (%)\",             }         )     ) ) story.add_slide(slide4)  # Compare data from 1955 and 2020 slide5 = Slide() # Step 1 - switch back to value instead of percentage slide5.add_step(Step(Config({\"align\": \"none\"}))) # Step 2 - switch to a stacked column chart by changing the geometry slide5.add_step(     Step(         Config(             {                 \"geometry\": \"rectangle\",             }         )     ) ) # Step 3 - zoom to data from the first and last years slide5.add_step(     Step(         Data.filter(             \"record.Year === '1955' || record.Year === '2020' \"         ),         Config(             {                 \"title\": \"Zoom to Specific Elements\",             }         ),     ), ) story.add_slide(slide5)  # Group &amp; rearrange elements for comparison slide6 = Slide() slide6.add_step(     Step(         Config(             {                 \"x\": [\"Year\", \"Function\"],                 \"y\": \"Amount[B$]\",                 \"label\": \"Amount[B$]\",                 \"title\": \"Group &amp; Rearrange for Better Comparison\",             }         )     ) )  slide6.add_step(Step(Config({\"x\": [\"Function\", \"Year\"]}))) story.add_slide(slide6)   # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True)   # Set a handler that prevents showing the year values that are not divisible by 5 handler = \"\"\" let Year = parseFloat(event.data.text); if (!isNaN(Year) &amp;&amp; Year &gt; 1950 &amp;&amp; Year &lt; 2020 &amp;&amp; Year % 5 !== 0) {     event.preventDefault(); } \"\"\" # Add handler to the plot-axis-label-draw event so that it takes effect story.add_event(\"plot-axis-label-draw\", handler)   # Play the created story! story.play()"},{"location":"examples/usbudget/#US-Federal-R&D-budget","title":"US Federal R&amp;D budget\u00b6","text":"<p>In this more involved example, we explore the history of the US Federal R&amp;D budget between 1955-2020. On top of the base functionality, this story showcases:</p> <ul> <li>Styling the overall Story</li> <li>Setting the size of the Story</li> <li>Slides with multiple steps</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This is an excellent starting point to get acquainted with <code>ipyvizzu-story</code>, as it walks you through the installation and initialization of the extension, introduces the logic it employs and the different settings to control how your animated data stories look and behave.</p> <p>The tutorial is organized into chapters that introduce the concept and the details of <code>ipyvizzu-story</code> step-by-step. You can find the list of chapters at the end of this page and in the menu.</p> <p>Since <code>ipyvizzu-story</code> is built on top of ipyvizzu, it's recommended that you learn and understand <code>ipyvizzu</code> first. The tutorial for <code>ipyvizzu</code> can be found here.</p>"},{"location":"tutorial/#basic-logic-of-ipyvizzu-story","title":"Basic logic of ipyvizzu-story","text":"<p>With <code>ipyvizzu-story</code>, you can build, show and export a <code>Story</code> object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into <code>Slides</code> and <code>Steps</code>. When played,<code>ipyvizzu-story</code> automatically adds a set of buttons underneath the chart, via which the users can navigate between the <code>Slides</code> within the story.</p> <p><code>Slides</code> can contain one or more <code>Steps</code>.</p> <p>A <code>Step</code> (and a single-Step <code>Slide</code>) is basically the same as the <code>Chart</code> object in <code>ipyvizzu</code>, with some minor, but important differences (for now):</p> <ul> <li>all of the data has to be added to the story at initialization, and it can be   filtered at every <code>Step</code> throughout the <code>Story</code>.</li> <li>animation options are not available</li> </ul> <p>In case of a <code>Slide</code> with multiple <code>Steps</code>, all, but the last <code>Steps</code> are interim charts that connect a <code>Slide</code> with a previous <code>Slide</code> but the animation will not stop at these <code>Steps</code> when the <code>Story</code> is being played.</p>"},{"location":"tutorial/#installation","title":"Installation","text":"<pre><code>pip install ipyvizzu-story</code></pre> <p>Visit Installation chapter for more options and details.</p>"},{"location":"tutorial/#usage","title":"Usage","text":"<p>Note</p> <p><code>ipyvizzu-story</code> generates <code>JavaScript</code> code, then the <code>vizzu-story</code> and <code>vizzu</code> calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser. <code>vizzu-story</code> and <code>vizzu</code> reports its errors there. If you get a <code>vizzu-story</code> or <code>vizzu</code> error in your browser console that is not straightforward to understand, please clean your browser cache first, because it might be caused by an older version being stored in your browser.</p> <ul> <li>Data</li> <li>Initialization</li> <li>Building blocks</li> <li>Export</li> </ul>"},{"location":"tutorial/building_blocks/","title":"Building blocks","text":"<p>In<code>ipyvizzu-story</code>, you can build, show and export a <code>Story</code> object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into <code>Slides</code> and <code>Steps</code>.</p>"},{"location":"tutorial/building_blocks/#slides-and-steps","title":"Slides and Steps","text":"<p><code>Slides</code> can contain one or more <code>Steps</code>.</p> <p>A <code>Step</code> (and a single-Step <code>Slide</code>) is basically the same as the <code>Chart</code> object in ipyvizzu, with some minor, but important differences (for now):</p> <ul> <li>all of the data has to be added to the story at initialization, and it can be   filtered at every <code>Step</code> throughout the <code>Story</code>.</li> <li>animation options are not available</li> </ul> <pre><code>slide = Slide(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\"}),\n    )\n)\nstory.add_slide(slide)</code></pre> <p>In case of a <code>Slide</code> with a sequence of <code>Steps</code>, all, but the last <code>Steps</code> are interim charts that connect a <code>Slide</code> with a previous <code>Slide</code>. The animation will be automatically played until the last <code>Step</code> in the sequence, allowing for more complex transitions between <code>Slides</code>.</p> <pre><code>slide = Slide()\nslide.add_step(\n    Step(\n        Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}),\n    )\n)\nslide.add_step(\n    Step(\n        Config({\"x\": \"Foo\", \"y\": \"Bar\", \"geometry\": \"rectangle\"}),\n    )\n)\nstory.add_slide(slide)</code></pre> <p>Viewers can navigate between <code>Slides</code> with the navigation controls that appear beneath the chart. They can also use the <code>PgUp</code> and <code>PgDn</code> buttons, and the left and right arrows to navigate between <code>Slides</code>, and the <code>Home</code> and <code>End</code> buttons to jump to the first and last <code>Slide</code> in the <code>Story</code>.</p> <p>On each chart, you can define the chart configuration and style using the same objects as in <code>ipyvizzu</code>. However, you can not modify the underlying data between the slides, just the data filter can be used.</p> <pre><code>slide = Slide(\n    Step(\n        Data.filter(\"record['Foo'] == 'Bob'\"),\n        Config({\"geometry\": \"circle\"}),\n        Style({\"plot\": {\"marker\": {\"colorPalette\": \"#FF0000\"}}}),\n    )\n)\nstory.add_slide(slide)</code></pre> <p>Tip</p> <p>Check ipyvizzu - Filtering &amp; adding new records chapter for more details on data filtering options.</p> <p>There are some parameters of the <code>Story</code> you can change before you play it.</p>"},{"location":"tutorial/building_blocks/#story-features","title":"Story features","text":"<p>You can enable or disable chart features, such as the <code>Tooltip</code> that appears if the viewer hovers their mouse over a specific element of the chart.</p> <pre><code>story.set_feature(\"tooltip\", True)</code></pre> <p>Tip</p> <p>See ipyvizzu - Axes, title, tooltip chapter for more details on chart features.</p>"},{"location":"tutorial/building_blocks/#story-events","title":"Story events","text":"<p>You have many more options to change the look and feel of the <code>Story</code> by using events.</p> <pre><code>handler = \"alert(JSON.stringify(event.data))\"\n\nstory.add_event(\"click\", handler)</code></pre> <p>Tip</p> <p>See ipyvizzu - Events chapter for more details on events.</p>"},{"location":"tutorial/building_blocks/#play","title":"Play","text":"<p>After you created the <code>Story</code>, you can play it with the <code>play</code>, or the <code>_repr_html_</code> method, depending on the environment you run <code>ipyvizzu-story</code> in.</p> <pre><code>story.play()</code></pre> <p>or</p> <pre><code>story</code></pre> <p>Info</p> <p>If you run into issues with playing your story, check the Environments chapter for more details on the available features in your environment.</p>"},{"location":"tutorial/data/","title":"Data","text":"<p>You can use the same data definition formats as in the <code>ipyvizzu</code> library: <code>pandas DataFrame</code>, <code>JSON</code>, or add data manually in different formats. Similarly to <code>ipyvizzu</code>, there are two types of data series: dimensions and measures.</p> <p>Note</p> <p>Please note, that all of the data used throughout your data story has to be added to the story at initialization. The data being shown can be filtered at each step.</p> <p>Tip</p> <p>See ipyvizzu - Data chapter for more details about data.</p> <p>Here's some sample code for common use cases.</p>"},{"location":"tutorial/data/#using-pandas-dataframe","title":"Using pandas DataFrame","text":"<pre><code>from ipyvizzu import Data\nimport pandas as pd\n\n\ndata = Data()\ndf = pd.read_csv(\n    \"https://ipyvizzu-story.vizzuhq.com/0.2/assets/data/data.csv\"\n)\ndata.add_data_frame(df)</code></pre>"},{"location":"tutorial/data/#specify-data-by-series","title":"Specify data by series","text":"<pre><code>from ipyvizzu import Data\n\n\ndata = Data()\ndata.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"])\ndata.add_series(\"Bar\", [15, 32, 12])\ndata.add_series(\"Baz\", [5, 3, 2])</code></pre>"},{"location":"tutorial/export/","title":"Export","text":"<p>You can get the raw <code>HTML</code> string using the following code. The data, the <code>Story</code> and the navigation buttons will all be included in the generated <code>HTML</code>.</p> <pre><code>html = story.to_html()\nprint(html)</code></pre>"},{"location":"tutorial/initialization/","title":"Initialization","text":""},{"location":"tutorial/initialization/#import","title":"Import","text":"<p>From <code>ipyvizzu</code> import <code>Data</code>, <code>Config</code> and <code>Style</code> and from <code>ipyvizzu-story</code> import <code>Story</code>, <code>Slide</code> and <code>Step</code>:</p> <pre><code>from ipyvizzu import Data, Config, Style\nfrom ipyvizzustory import Story, Slide, Step</code></pre>"},{"location":"tutorial/initialization/#constructor","title":"Constructor","text":"<p>You need to put the <code>Data</code> object (described in the Data chapter) into the <code>Story</code> constructor. You can not alter the data later but the data being shown can be filtered at each step.</p> <pre><code>story = Story(data=data)</code></pre> <p>You can set the style used initally for the story as you can see in this example, and you can alter the style at each step within the story.</p> <pre><code>story = Story(data=data, style=Style({\"title\": {\"fontSize\": 50}}))</code></pre> <p>Tip</p> <p>Check ipyvizzu - Color palette &amp; fonts chapter and ipyvizzu - Chart layout chapter for more details on the available styling options.</p>"},{"location":"tutorial/initialization/#size","title":"Size","text":"<p><code>ipyvizzu-story</code> tries to apply the ideal <code>width</code> and <code>height</code> for the story, but you can also set them manually with the <code>set_size</code> method.</p> <pre><code>story.set_size(width=\"100%\", height=\"400px\")</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}