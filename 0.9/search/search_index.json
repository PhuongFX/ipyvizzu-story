{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ipyvizzu-story - Build, present and share animated data stories in Jupyter Notebook and similar environments Documentation \u00b7 Examples \u00b7 Code reference \u00b7 Repository \u00b7 Blog ipyvizzu-story About The Extension ipyvizzu-story is an extension of the animated charting tool ipyvizzu that enables users to create and present interactive data presentations within the data science notebook of their choice and to share them as an HTML file. The extension provides a widget that contains the presentation and adds controls for navigating between slides - predefined stages within the story being presented. Navigation also works with keyboard shortcuts - arrow keys, PgUp , PgDn , Home , End - and you can also use a clicker to switch between the slides. Installation pip install ipyvizzu-story Visit Installation chapter for more options and details. Usage You can check and download the code behind the animation on the top of the page in our Example gallery . You can create the story below with the following code snippet. from ipyvizzu import Data, Config from ipyvizzustory import Story, Slide, Step data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) story.play() Documentation Visit our Documentation site for more details and a step-by-step tutorial into ipyvizzu-story or check out our Example gallery . Environments ipyvizzu-story can be used in a wide variety of environments, visit Environments chapter for more details. Notebooks Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable App platforms Streamlit Flask Panel Mercury Voil\u00e0 BI tools Mode IDEs PyCharm VSCode Python Python Contributing We welcome contributions to the project, visit our Contributing guide for further info. Contact Join our Slack if you have any questions or comments: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: VizzuHQ Usage Statistics ipyvizzu-story collects aggregate usage statistics by default to follow the progress and overall trends of our library. This feature is optional, and users can choose to opt-out. However, we do not track, collect, or store any personal data or personally identifiable information. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. For more details, please visit Analytics chapter . License Copyright \u00a9 2022-2023 Vizzu Inc . Released under the Apache 2.0 License .","title":"Home"},{"location":"#ipyvizzu-story","text":"","title":"ipyvizzu-story"},{"location":"#about-the-extension","text":"ipyvizzu-story is an extension of the animated charting tool ipyvizzu that enables users to create and present interactive data presentations within the data science notebook of their choice and to share them as an HTML file. The extension provides a widget that contains the presentation and adds controls for navigating between slides - predefined stages within the story being presented. Navigation also works with keyboard shortcuts - arrow keys, PgUp , PgDn , Home , End - and you can also use a clicker to switch between the slides.","title":"About The Extension"},{"location":"#installation","text":"pip install ipyvizzu-story Visit Installation chapter for more options and details.","title":"Installation"},{"location":"#usage","text":"You can check and download the code behind the animation on the top of the page in our Example gallery . You can create the story below with the following code snippet. from ipyvizzu import Data, Config from ipyvizzustory import Story, Slide, Step data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) story.play()","title":"Usage"},{"location":"#documentation","text":"Visit our Documentation site for more details and a step-by-step tutorial into ipyvizzu-story or check out our Example gallery .","title":"Documentation"},{"location":"#environments","text":"ipyvizzu-story can be used in a wide variety of environments, visit Environments chapter for more details. Notebooks Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable App platforms Streamlit Flask Panel Mercury Voil\u00e0 BI tools Mode IDEs PyCharm VSCode Python Python","title":"Environments"},{"location":"#contributing","text":"We welcome contributions to the project, visit our Contributing guide for further info.","title":"Contributing"},{"location":"#contact","text":"Join our Slack if you have any questions or comments: vizzu-community.slack.com Drop us a line at hello@vizzuhq.com Follow us on Twitter: VizzuHQ","title":"Contact"},{"location":"#usage-statistics","text":"ipyvizzu-story collects aggregate usage statistics by default to follow the progress and overall trends of our library. This feature is optional, and users can choose to opt-out. However, we do not track, collect, or store any personal data or personally identifiable information. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. For more details, please visit Analytics chapter .","title":"Usage Statistics"},{"location":"#license","text":"Copyright \u00a9 2022-2023 Vizzu Inc . Released under the Apache 2.0 License .","title":"License"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct See Code of Conduct of the Vizzu community.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct","text":"See Code of Conduct of the Vizzu community.","title":"Code of Conduct"},{"location":"CONTRIBUTING/","text":"Contributing Issues You can find our open issues in the project's issue tracker . Please let us know if you find any issues or have any feature requests there. Contributing If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects . Our Roadmap page is a comprehensive list of tasks we want to do in the future. It is a good place to start if you want to contribute to Vizzu . In case you have something else in mind, that's awesome and we are very interested in hearing about it. CI-CD Development environment For contributing to the project, it is recommended to use Python 3.10 . However, for the documentation we are also using JavaScript . If you plan to contribute to this part of the project, you will need Node.js , preferably version 18 . The following steps demonstrate how to set up the development environment on an Ubuntu 22.04 operating system. However, the process can be adapted for other operating systems as well. To start using the ipyvizzu-story development environment, you need to create a virtual environment and install pdm within it. python3.10 -m venv \".venv\" source .venv/bin/activate pip install pdm==2.8.0 Once set up, you can utilize the pre-defined pdm scripts. For example, you can initialize the entire development environment using the command pdm run init , or specific parts like init_src , init_docs , or init_tools . pdm run init Note: For all available pdm scripts, run pdm run --list . The development requirements are installed based on the pdm.lock and package-lock.json files. To update the development requirements, you can use the command pdm run lock . For better development practices, you can set up pre-commit and pre-push hooks in your local Git repository. The pre-commit hook will format the code automatically, and the pre-push hook will run the CI steps before pushing your changes. pre-commit install --hook-type pre-commit --hook-type pre-push -c ./tools/ci/.pre-commit-ubuntu.yaml Note: The provided .pre-commit-ubuntu.yaml configuration file is tailored for Ubuntu 22.04 . If you intend to use another operating system, you may need to create a custom configuration file suitable for that environment. CI The CI pipeline includes code formatting checks, code analysis, typing validation, and unit tests for the ipyvizzu-story project. To run the entire CI pipeline, execute the following pdm script: pdm run ci However, if you want to run the CI steps on specific parts of the project, you can use the following scripts: ci_src , ci_docs , or ci_tools . Formatting You can check the code's formatting using the format script: pdm run format If you need to fix any formatting issues, you can use the fix_format script: pdm run fix_format If you wish to format specific parts of the project, you can use the following scripts: format_src , format_docs , format_tools , or fix_format_src , fix_format_docs , fix_format_tools . Code analyses To perform code analyses, you can use the lint script: pdm run lint If you need to run code analyses for specific parts of the project, you can utilize the following scripts: lint_src , lint_docs , or lint_tools . Typing For type checking, you can use the type script: pdm run type If you want to check specific parts of the project, you can use the following scripts: type_src or type_tools . Testing The project is tested using the unittest testing framework and tox . To run the tests, you can use the test script: pdm run test Documentation To build the documentation, you can use the docs_build script: pdm run docs_build You can read the online version at ipyvizzu-story.vizzuhq.com . Release ipyvizzu-story is distributed on pypi . Note: You need to be an administrator to release the project. To release ipyvizzu-story , follow the steps below: Increase the version number in __version__.py . The version bump should be in a separate commit. Generate the release notes and publish the new release on Releases . Note: Publishing a new release will automatically trigger the release workflow, which builds, checks, and uploads the ipyvizzu-story package to pypi . Before making a release, you can build and check the package using the pkg_release script: pdm run pkg_release","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#issues","text":"You can find our open issues in the project's issue tracker . Please let us know if you find any issues or have any feature requests there.","title":"Issues"},{"location":"CONTRIBUTING/#contributing_1","text":"If you want to contribute to the project, your help is very welcome. Just fork the project, make your changes and send us a pull request. You can find the detailed description of how to do this in Github's guide to contributing to projects . Our Roadmap page is a comprehensive list of tasks we want to do in the future. It is a good place to start if you want to contribute to Vizzu . In case you have something else in mind, that's awesome and we are very interested in hearing about it.","title":"Contributing"},{"location":"CONTRIBUTING/#ci-cd","text":"","title":"CI-CD"},{"location":"CONTRIBUTING/#development-environment","text":"For contributing to the project, it is recommended to use Python 3.10 . However, for the documentation we are also using JavaScript . If you plan to contribute to this part of the project, you will need Node.js , preferably version 18 . The following steps demonstrate how to set up the development environment on an Ubuntu 22.04 operating system. However, the process can be adapted for other operating systems as well. To start using the ipyvizzu-story development environment, you need to create a virtual environment and install pdm within it. python3.10 -m venv \".venv\" source .venv/bin/activate pip install pdm==2.8.0 Once set up, you can utilize the pre-defined pdm scripts. For example, you can initialize the entire development environment using the command pdm run init , or specific parts like init_src , init_docs , or init_tools . pdm run init Note: For all available pdm scripts, run pdm run --list . The development requirements are installed based on the pdm.lock and package-lock.json files. To update the development requirements, you can use the command pdm run lock . For better development practices, you can set up pre-commit and pre-push hooks in your local Git repository. The pre-commit hook will format the code automatically, and the pre-push hook will run the CI steps before pushing your changes. pre-commit install --hook-type pre-commit --hook-type pre-push -c ./tools/ci/.pre-commit-ubuntu.yaml Note: The provided .pre-commit-ubuntu.yaml configuration file is tailored for Ubuntu 22.04 . If you intend to use another operating system, you may need to create a custom configuration file suitable for that environment.","title":"Development environment"},{"location":"CONTRIBUTING/#ci","text":"The CI pipeline includes code formatting checks, code analysis, typing validation, and unit tests for the ipyvizzu-story project. To run the entire CI pipeline, execute the following pdm script: pdm run ci However, if you want to run the CI steps on specific parts of the project, you can use the following scripts: ci_src , ci_docs , or ci_tools .","title":"CI"},{"location":"CONTRIBUTING/#formatting","text":"You can check the code's formatting using the format script: pdm run format If you need to fix any formatting issues, you can use the fix_format script: pdm run fix_format If you wish to format specific parts of the project, you can use the following scripts: format_src , format_docs , format_tools , or fix_format_src , fix_format_docs , fix_format_tools .","title":"Formatting"},{"location":"CONTRIBUTING/#code-analyses","text":"To perform code analyses, you can use the lint script: pdm run lint If you need to run code analyses for specific parts of the project, you can utilize the following scripts: lint_src , lint_docs , or lint_tools .","title":"Code analyses"},{"location":"CONTRIBUTING/#typing","text":"For type checking, you can use the type script: pdm run type If you want to check specific parts of the project, you can use the following scripts: type_src or type_tools .","title":"Typing"},{"location":"CONTRIBUTING/#testing","text":"The project is tested using the unittest testing framework and tox . To run the tests, you can use the test script: pdm run test","title":"Testing"},{"location":"CONTRIBUTING/#documentation","text":"To build the documentation, you can use the docs_build script: pdm run docs_build You can read the online version at ipyvizzu-story.vizzuhq.com .","title":"Documentation"},{"location":"CONTRIBUTING/#release","text":"ipyvizzu-story is distributed on pypi . Note: You need to be an administrator to release the project. To release ipyvizzu-story , follow the steps below: Increase the version number in __version__.py . The version bump should be in a separate commit. Generate the release notes and publish the new release on Releases . Note: Publishing a new release will automatically trigger the release workflow, which builds, checks, and uploads the ipyvizzu-story package to pypi . Before making a release, you can build and check the package using the pkg_release script: pdm run pkg_release","title":"Release"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"installation/","text":"Installation ipyvizzu-story requires the ipyvizzu package. Info ipyvizzu-story requires and downloads the Vizzu JavaScript / C++ library and the Vizzu-Story JavaScript package from jsDelivr CDN , but you can also use a different or self-hosted version of them. Check Initialization chapter for more details. pypi Run the following command to install ipyvizzu-story from pypi pip install ipyvizzu-story and this is how to upgrade it. pip install -U ipyvizzu-story You can use ipyvizzu-story in Jupyter/IPython , Streamlit , Panel or Python (see Environments chapter for more details). Jupyter/IPython You can install ipyvizzu-story in your notebook without using the command line by entering the following code into a cell. !pip install ipyvizzu-story If you want to install Jupyter/IPython as a dependency, install ipyvizzu-story with the following command. pip install ipyvizzu-story[jupyter] Streamlit If you want to install Streamlit as a dependency, install ipyvizzu-story with the following command. pip install ipyvizzu-story[streamlit] Panel If you want to install Panel as a dependency, install ipyvizzu-story with the following command. pip install ipyvizzu-story[panel] conda / mamba Installing ipyvizzu-story from conda-forge can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge conda config --set channel_priority strict Once the conda-forge channel has been enabled, run the following command to install ipyvizzu-story from conda conda install ipyvizzu-story # or with mamba: mamba install ipyvizzu-story and this is how to upgrade it. conda update ipyvizzu-story # or with mamba: mamba update ipyvizzu-story","title":"Installation"},{"location":"installation/#installation","text":"ipyvizzu-story requires the ipyvizzu package. Info ipyvizzu-story requires and downloads the Vizzu JavaScript / C++ library and the Vizzu-Story JavaScript package from jsDelivr CDN , but you can also use a different or self-hosted version of them. Check Initialization chapter for more details.","title":"Installation"},{"location":"installation/#pypi","text":"Run the following command to install ipyvizzu-story from pypi pip install ipyvizzu-story and this is how to upgrade it. pip install -U ipyvizzu-story You can use ipyvizzu-story in Jupyter/IPython , Streamlit , Panel or Python (see Environments chapter for more details).","title":"pypi"},{"location":"installation/#jupyteripython","text":"You can install ipyvizzu-story in your notebook without using the command line by entering the following code into a cell. !pip install ipyvizzu-story If you want to install Jupyter/IPython as a dependency, install ipyvizzu-story with the following command. pip install ipyvizzu-story[jupyter]","title":"Jupyter/IPython"},{"location":"installation/#streamlit","text":"If you want to install Streamlit as a dependency, install ipyvizzu-story with the following command. pip install ipyvizzu-story[streamlit]","title":"Streamlit"},{"location":"installation/#panel","text":"If you want to install Panel as a dependency, install ipyvizzu-story with the following command. pip install ipyvizzu-story[panel]","title":"Panel"},{"location":"installation/#conda-mamba","text":"Installing ipyvizzu-story from conda-forge can be achieved by adding conda-forge to your channels with: conda config --add channels conda-forge conda config --set channel_priority strict Once the conda-forge channel has been enabled, run the following command to install ipyvizzu-story from conda conda install ipyvizzu-story # or with mamba: mamba install ipyvizzu-story and this is how to upgrade it. conda update ipyvizzu-story # or with mamba: mamba update ipyvizzu-story","title":"conda / mamba"},{"location":"dev/","text":"Development We have compiled some information on the development of ipyvizzu-story here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage. Contributing Code of Conduct Coverage report","title":"Development"},{"location":"dev/#development","text":"We have compiled some information on the development of ipyvizzu-story here. If you're interested in contributing to our open-source tool (which we highly encourage), please refer to the Contributing chapter. Our community upholds a strict Code of Conduct that we expect all members to follow. Plus, we've got you covered with info on our code's test coverage. Contributing Code of Conduct Coverage report","title":"Development"},{"location":"environments/","text":"Environments ipyvizzu-story can be used in a lot of different environments. We grouped these into several categories. ipyvizzu-story tries to figure out the environment it is used in and import the correct type of Story , however Story could also be imported using full path. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Notebooks App platforms BI tools IDEs Python","title":"Environments"},{"location":"environments/#environments","text":"ipyvizzu-story can be used in a lot of different environments. We grouped these into several categories. ipyvizzu-story tries to figure out the environment it is used in and import the correct type of Story , however Story could also be imported using full path. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Notebooks App platforms BI tools IDEs Python","title":"Environments"},{"location":"environments/python/","text":"Python Features The features of ipyvizzu-story that are available in Python are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons * Set width/height of the Story * Export the Story into a html file Get the html Story as a string *can only be used in the exported html file. Installation Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story Sample Try ipyvizzu-story in Python with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.py.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) Place the above code blocks into a python file (for example called ipyvizzustory_example.py ) and run the following command in your command line in order to try it. python3 ipyvizzustory_example.py Check the Tutorial for more info.","title":"Python"},{"location":"environments/python/#python","text":"","title":"Python"},{"location":"environments/python/#features","text":"The features of ipyvizzu-story that are available in Python are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons * Set width/height of the Story * Export the Story into a html file Get the html Story as a string *can only be used in the exported html file.","title":"Features"},{"location":"environments/python/#installation","text":"Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story","title":"Installation"},{"location":"environments/python/#sample","text":"Try ipyvizzu-story in Python with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.py.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) Place the above code blocks into a python file (for example called ipyvizzustory_example.py ) and run the following command in your command line in order to try it. python3 ipyvizzustory_example.py Check the Tutorial for more info.","title":"Sample"},{"location":"environments/bi/","text":"ipyvizzu-story is available in the following BI tools. ipyvizzu-story tries to figure out the environment it is used in and import the correct type of Story , however Story could also be imported using full path. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Mode","title":"BI tools"},{"location":"environments/bi/mode/","text":"Mode Features The features of ipyvizzu-story that are available in Mode are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story Export the Story into a html file ** Get the html Story as a string * Mode disables the fullscreen button ** Mode does not provide a download option for the created file Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] -t \"/tmp\" > /dev/null 2>&1 Sample Try ipyvizzu-story in Mode with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Mode"},{"location":"environments/bi/mode/#mode","text":"","title":"Mode"},{"location":"environments/bi/mode/#features","text":"The features of ipyvizzu-story that are available in Mode are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story Export the Story into a html file ** Get the html Story as a string * Mode disables the fullscreen button ** Mode does not provide a download option for the created file","title":"Features"},{"location":"environments/bi/mode/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] -t \"/tmp\" > /dev/null 2>&1","title":"Installation"},{"location":"environments/bi/mode/#sample","text":"Try ipyvizzu-story in Mode with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/ide/","text":"ipyvizzu-story is available in the following IDEs. ipyvizzu-story tries to figure out the environment it is used in and import the correct type of Story , however Story could also be imported using full path. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . PyCharm VSCode Python","title":"IDEs"},{"location":"environments/ide/pycharm/","text":"PyCharm Features The features of ipyvizzu-story that are available in PyCharm Professional are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in PyCharm Professional with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"PyCharm"},{"location":"environments/ide/pycharm/#pycharm","text":"","title":"PyCharm"},{"location":"environments/ide/pycharm/#features","text":"The features of ipyvizzu-story that are available in PyCharm Professional are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/ide/pycharm/#installation","text":"Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/ide/pycharm/#sample","text":"Try ipyvizzu-story in PyCharm Professional with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/ide/vscode/","text":"VSCode Python Features The features of ipyvizzu-story that are available in VSCode Python are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in VSCode Python with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"VSCode Python"},{"location":"environments/ide/vscode/#vscode-python","text":"","title":"VSCode Python"},{"location":"environments/ide/vscode/#features","text":"The features of ipyvizzu-story that are available in VSCode Python are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/ide/vscode/#installation","text":"Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/ide/vscode/#sample","text":"Try ipyvizzu-story in VSCode Python with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/","text":"ipyvizzu-story is available in the following Notebooks. ipyvizzu-story tries to figure out the environment it is used in and import the correct type of Story , however Story could also be imported using full path. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Jupyter Notebook Colab Databricks DataCamp Deepnote JupyterLab JupyterLite Kaggle Noteable","title":"Notebooks"},{"location":"environments/notebook/colab/","text":"Colab Features The features of ipyvizzu-story that are available in Colab are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string * Colab disables the fullscreen button, use the built-in view output fullscreen option instead Live example Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in Colab with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Colab, # it is recommended to set the width and height (CSS style), # because it will be too large with the default settings story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Colab"},{"location":"environments/notebook/colab/#colab","text":"","title":"Colab"},{"location":"environments/notebook/colab/#features","text":"The features of ipyvizzu-story that are available in Colab are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string * Colab disables the fullscreen button, use the built-in view output fullscreen option instead","title":"Features"},{"location":"environments/notebook/colab/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/colab/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/colab/#sample","text":"Try ipyvizzu-story in Colab with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Colab, # it is recommended to set the width and height (CSS style), # because it will be too large with the default settings story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/databricks/","text":"Databricks Features The features of ipyvizzu-story that are available in Databricks are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story * Export the Story into a html file Get the html Story as a string *mandatory Live example Open in Databricks Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in Databricks with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Databricks, # you need to set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file # `databricks_unique_id` is your id which can be found after `?o=` in the url) databricks_unique_id = \"000000000000000\" html_file = \"mystory.html\" story.export_to_html(filename=f\"/{html_file}\") dbutils.fs.cp(f\"file:/{html_file}\", f\"dbfs:/FileStore/{html_file}\") displayHTML( f'<a href=\"/files/{html_file}/?o={databricks_unique_id}\"' + \" \" + \"download>Download HTML</a>\" ) # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Databricks"},{"location":"environments/notebook/databricks/#databricks","text":"","title":"Databricks"},{"location":"environments/notebook/databricks/#features","text":"The features of ipyvizzu-story that are available in Databricks are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story * Export the Story into a html file Get the html Story as a string *mandatory","title":"Features"},{"location":"environments/notebook/databricks/#live-example","text":"Open in Databricks","title":"Live example"},{"location":"environments/notebook/databricks/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/databricks/#sample","text":"Try ipyvizzu-story in Databricks with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Databricks, # you need to set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file # `databricks_unique_id` is your id which can be found after `?o=` in the url) databricks_unique_id = \"000000000000000\" html_file = \"mystory.html\" story.export_to_html(filename=f\"/{html_file}\") dbutils.fs.cp(f\"file:/{html_file}\", f\"dbfs:/FileStore/{html_file}\") displayHTML( f'<a href=\"/files/{html_file}/?o={databricks_unique_id}\"' + \" \" + \"download>Download HTML</a>\" ) # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/datacamp/","text":"DataCamp Features The features of ipyvizzu-story that are available in DataCamp are marked with a green check. Display the created Story ( play method) * Display the created Story ( _repr_html_ method) * Use fullscreen ** Use navigation buttons * Set width/height of the Story Export the Story into a html file * Get the html Story as a string * ipyvizzu-story does not work in the default editor, switch to the JupyterLab -style editor ** DataCamp disables the fullscreen button Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in DataCamp with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"DataCamp"},{"location":"environments/notebook/datacamp/#datacamp","text":"","title":"DataCamp"},{"location":"environments/notebook/datacamp/#features","text":"The features of ipyvizzu-story that are available in DataCamp are marked with a green check. Display the created Story ( play method) * Display the created Story ( _repr_html_ method) * Use fullscreen ** Use navigation buttons * Set width/height of the Story Export the Story into a html file * Get the html Story as a string * ipyvizzu-story does not work in the default editor, switch to the JupyterLab -style editor ** DataCamp disables the fullscreen button","title":"Features"},{"location":"environments/notebook/datacamp/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/datacamp/#sample","text":"Try ipyvizzu-story in DataCamp with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/deepnote/","text":"Deepnote Features The features of ipyvizzu-story that are available in Deepnote are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story ** Export the Story into a html file Get the html Story as a string * Deepnote disables the fullscreen button **mandatory Live example Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in Deepnote with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Deepnote, # you need to set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Deepnote"},{"location":"environments/notebook/deepnote/#deepnote","text":"","title":"Deepnote"},{"location":"environments/notebook/deepnote/#features","text":"The features of ipyvizzu-story that are available in Deepnote are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story ** Export the Story into a html file Get the html Story as a string * Deepnote disables the fullscreen button **mandatory","title":"Features"},{"location":"environments/notebook/deepnote/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/deepnote/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/deepnote/#sample","text":"Try ipyvizzu-story in Deepnote with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Deepnote, # you need to set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyterlab/","text":"JupyterLab Features The features of ipyvizzu-story that are available in JupyterLab are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in JupyterLab with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"JupyterLab"},{"location":"environments/notebook/jupyterlab/#jupyterlab","text":"","title":"JupyterLab"},{"location":"environments/notebook/jupyterlab/#features","text":"The features of ipyvizzu-story that are available in JupyterLab are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/notebook/jupyterlab/#installation","text":"Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/jupyterlab/#sample","text":"Try ipyvizzu-story in JupyterLab with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyterlite/","text":"JupyterLite Features The features of ipyvizzu-story that are available in JupyterLite are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). import micropip await micropip.install(\"ipyvizzu-story[jupyter]\") Sample Try ipyvizzu-story in JupyterLite with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"JupyterLite"},{"location":"environments/notebook/jupyterlite/#jupyterlite","text":"","title":"JupyterLite"},{"location":"environments/notebook/jupyterlite/#features","text":"The features of ipyvizzu-story that are available in JupyterLite are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/notebook/jupyterlite/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). import micropip await micropip.install(\"ipyvizzu-story[jupyter]\")","title":"Installation"},{"location":"environments/notebook/jupyterlite/#sample","text":"Try ipyvizzu-story in JupyterLite with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/jupyternotebook/","text":"Jupyter Notebook Features The features of ipyvizzu-story that are available in Jupyter Notebook are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in Jupyter Notebook with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Jupyter Notebook"},{"location":"environments/notebook/jupyternotebook/#jupyter-notebook","text":"","title":"Jupyter Notebook"},{"location":"environments/notebook/jupyternotebook/#features","text":"The features of ipyvizzu-story that are available in Jupyter Notebook are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/notebook/jupyternotebook/#installation","text":"Run the following command in your command line pip install ipyvizzu-story[jupyter] or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/jupyternotebook/#sample","text":"Try ipyvizzu-story in Jupyter Notebook with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/kaggle/","text":"Kaggle Features The features of ipyvizzu-story that are available in Kaggle are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string * Kaggle disables the fullscreen button Live example Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in Kaggle with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Kaggle"},{"location":"environments/notebook/kaggle/#kaggle","text":"","title":"Kaggle"},{"location":"environments/notebook/kaggle/#features","text":"The features of ipyvizzu-story that are available in Kaggle are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen * Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string * Kaggle disables the fullscreen button","title":"Features"},{"location":"environments/notebook/kaggle/#live-example","text":"","title":"Live example"},{"location":"environments/notebook/kaggle/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/kaggle/#sample","text":"Try ipyvizzu-story in Kaggle with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/notebook/noteable/","text":"Noteable Features The features of ipyvizzu-story that are available in Noteable are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in Noteable with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Noteable"},{"location":"environments/notebook/noteable/#noteable","text":"","title":"Noteable"},{"location":"environments/notebook/noteable/#features","text":"The features of ipyvizzu-story that are available in Noteable are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/notebook/noteable/#installation","text":"Place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/notebook/noteable/#sample","text":"Try ipyvizzu-story in Noteable with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/","text":"ipyvizzu-story is available in the following App platforms. ipyvizzu-story tries to figure out the environment it is used in and import the correct type of Story , however Story could also be imported using full path. We would love to add more environments and examples, so if you miss anything from our list, please open an issue in our Github repo . Streamlit Flask Panel Mercury Voil\u00e0","title":"App platforms"},{"location":"environments/platform/flask/","text":"Flask Features The features of ipyvizzu-story that are available in Flask are marked with a green check. Display the created Story ( play method) * Display the created Story ( _repr_html_ method) * Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string *you can display the created Story in other ways, see the sample below Installation Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story flask Sample Try ipyvizzu-story in Flask with the following sample. # import flask, ipyvizzu and ipyvizzu-story from pathlib import Path from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.py.story import Story from flask import Flask, render_template # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file Path(\"static\").mkdir(parents=True, exist_ok=True) story.export_to_html(filename=\"static/mystory.html\") # or you can get the html Story as a string html = story.to_html() # you can display the Story from the saved string app = Flask(__name__) @app.route(\"/\") def vizzu(): return render_template(\"vizzu.html\", mystory=html) Place the above code blocks into a python file (for example called application.py ), create the html template ( templates/vizzu.html ) with the following content if you display the Story from the saved string <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mystory }}\" width=\"800px\"> </iframe> </div> </body> </html> or with the following if you display the Story from the exported html file <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\" {{url_for('static', filename='/mystory.html')}}\" width=\"800px\"> </iframe> </div> </body> </html> and run the following command in your command line in order to try it. flask --app application run Check the Tutorial for more info.","title":"Flask"},{"location":"environments/platform/flask/#flask","text":"","title":"Flask"},{"location":"environments/platform/flask/#features","text":"The features of ipyvizzu-story that are available in Flask are marked with a green check. Display the created Story ( play method) * Display the created Story ( _repr_html_ method) * Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string *you can display the created Story in other ways, see the sample below","title":"Features"},{"location":"environments/platform/flask/#installation","text":"Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story flask","title":"Installation"},{"location":"environments/platform/flask/#sample","text":"Try ipyvizzu-story in Flask with the following sample. # import flask, ipyvizzu and ipyvizzu-story from pathlib import Path from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.py.story import Story from flask import Flask, render_template # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file Path(\"static\").mkdir(parents=True, exist_ok=True) story.export_to_html(filename=\"static/mystory.html\") # or you can get the html Story as a string html = story.to_html() # you can display the Story from the saved string app = Flask(__name__) @app.route(\"/\") def vizzu(): return render_template(\"vizzu.html\", mystory=html) Place the above code blocks into a python file (for example called application.py ), create the html template ( templates/vizzu.html ) with the following content if you display the Story from the saved string <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\"data:text/html, {{ mystory }}\" width=\"800px\"> </iframe> </div> </body> </html> or with the following if you display the Story from the exported html file <!DOCTYPE html> <html> <body> <div class=\"container\"> <iframe frameborder=\"0\" height=\"480px\" scrolling=\"no\" src=\" {{url_for('static', filename='/mystory.html')}}\" width=\"800px\"> </iframe> </div> </body> </html> and run the following command in your command line in order to try it. flask --app application run Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/mercury/","text":"Mercury Features The features of ipyvizzu-story that are available in Mercury are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Live example Installation Add ipyvizzu-story to requirements.txt . python-dotenv pandas mercury ipyvizzu-story Sample Try ipyvizzu-story in Mercury with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story from IPython.display import display as display_html, HTML import mercury as mr # setup Mercury App app = mr.App( title=\"ipyvizzu-story demo\", description=\"ipyvizzu-story demo with mercury\", ) # add widget selected = mr.MultiSelect( label=\"Select what you want to see\", value=[\"animation\"], choices=[\"animation\", \"code\"], ) # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can get the html Story as a string html = story.to_html() if \"animation\" in selected.value: story.play() if \"code\" in selected.value: display_html(html) Check the Tutorial for more info.","title":"Mercury"},{"location":"environments/platform/mercury/#mercury","text":"","title":"Mercury"},{"location":"environments/platform/mercury/#features","text":"The features of ipyvizzu-story that are available in Mercury are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/platform/mercury/#live-example","text":"","title":"Live example"},{"location":"environments/platform/mercury/#installation","text":"Add ipyvizzu-story to requirements.txt . python-dotenv pandas mercury ipyvizzu-story","title":"Installation"},{"location":"environments/platform/mercury/#sample","text":"Try ipyvizzu-story in Mercury with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story from IPython.display import display as display_html, HTML import mercury as mr # setup Mercury App app = mr.App( title=\"ipyvizzu-story demo\", description=\"ipyvizzu-story demo with mercury\", ) # add widget selected = mr.MultiSelect( label=\"Select what you want to see\", value=[\"animation\"], choices=[\"animation\", \"code\"], ) # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can get the html Story as a string html = story.to_html() if \"animation\" in selected.value: story.play() if \"code\" in selected.value: display_html(html) Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/panel/","text":"Panel Features The features of ipyvizzu-story that are available in Panel are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) * Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string *for example, used in pn.pane.HTML method Installation Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story[panel] Sample Try ipyvizzu-story in Panel with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory.env.pn.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Panel if you want to use the `play` method, # you need to set the width and height in pixels story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can customize Panel before `play` # import panel as pn # # pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") # # pn.state.template.param.update( # title=\"ipyvizzu-story\", # ) # # story.play() # or if you would like to customize it completely, # you can do it with the `_repr_html_` method # import panel as pn # # pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") # # pn.state.template.param.update( # title=\"ipyvizzu-story\", # ) # # pn.pane.HTML( # story, # height=500, # sizing_mode=\"stretch_both\" # ).servable() Place the above code blocks into a python file (for example called ipyvizzustory_example.py ) and run the following command in your command line in order to try it. panel serve ipyvizzustory_example.py --autoreload Check the Tutorial for more info.","title":"Panel"},{"location":"environments/platform/panel/#panel","text":"","title":"Panel"},{"location":"environments/platform/panel/#features","text":"The features of ipyvizzu-story that are available in Panel are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) * Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string *for example, used in pn.pane.HTML method","title":"Features"},{"location":"environments/platform/panel/#installation","text":"Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story[panel]","title":"Installation"},{"location":"environments/platform/panel/#sample","text":"Try ipyvizzu-story in Panel with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory.env.pn.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # note: in Panel if you want to use the `play` method, # you need to set the width and height in pixels story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can customize Panel before `play` # import panel as pn # # pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") # # pn.state.template.param.update( # title=\"ipyvizzu-story\", # ) # # story.play() # or if you would like to customize it completely, # you can do it with the `_repr_html_` method # import panel as pn # # pn.extension(sizing_mode=\"stretch_width\", template=\"fast\") # # pn.state.template.param.update( # title=\"ipyvizzu-story\", # ) # # pn.pane.HTML( # story, # height=500, # sizing_mode=\"stretch_both\" # ).servable() Place the above code blocks into a python file (for example called ipyvizzustory_example.py ) and run the following command in your command line in order to try it. panel serve ipyvizzustory_example.py --autoreload Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/streamlit/","text":"Streamlit Features The features of ipyvizzu-story that are available in Streamlit are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story[streamlit] Sample Try ipyvizzu-story in Streamlit with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.st.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step(Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})) ) story.add_slide(slide2) # note: in Streamlit if you want to use the `play` method, # you need to set the width and height in pixels story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() Place the above code blocks into a python file (for example called ipyvizzustory_example.py ) and run the following command in your command line in order to try it. streamlit run ipyvizzustory_example.py Check the Tutorial for more info.","title":"Streamlit"},{"location":"environments/platform/streamlit/#streamlit","text":"","title":"Streamlit"},{"location":"environments/platform/streamlit/#features","text":"The features of ipyvizzu-story that are available in Streamlit are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/platform/streamlit/#installation","text":"Run the following command in your command line in order to install ipyvizzu-story (visit Installation chapter for more options and details). pip install ipyvizzu-story[streamlit]","title":"Installation"},{"location":"environments/platform/streamlit/#sample","text":"Try ipyvizzu-story in Streamlit with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.st.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step(Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"})) ) story.add_slide(slide2) # note: in Streamlit if you want to use the `play` method, # you need to set the width and height in pixels story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() Place the above code blocks into a python file (for example called ipyvizzustory_example.py ) and run the following command in your command line in order to try it. streamlit run ipyvizzustory_example.py Check the Tutorial for more info.","title":"Sample"},{"location":"environments/platform/voila/","text":"Voil\u00e0 Features The features of ipyvizzu-story that are available in Voil\u00e0 are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string Installation Run the following command in your command line pip install ipyvizzu-story[jupyter] voila or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter] Sample Try ipyvizzu-story in Voil\u00e0 with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Place the above code blocks into notebook cells in a notebook file (for example called ipyvizzustory_example.ipynb ) and run the following command in your command line in order to try it. voila ipyvizzustory_example.ipynb Check the Tutorial for more info.","title":"Voil\u00e0"},{"location":"environments/platform/voila/#voila","text":"","title":"Voil\u00e0"},{"location":"environments/platform/voila/#features","text":"The features of ipyvizzu-story that are available in Voil\u00e0 are marked with a green check. Display the created Story ( play method) Display the created Story ( _repr_html_ method) Use fullscreen Use navigation buttons Set width/height of the Story Export the Story into a html file Get the html Story as a string","title":"Features"},{"location":"environments/platform/voila/#installation","text":"Run the following command in your command line pip install ipyvizzu-story[jupyter] voila or place the following code into a notebook cell in order to install ipyvizzu-story (visit Installation chapter for more options and details). !pip install ipyvizzu-story[jupyter]","title":"Installation"},{"location":"environments/platform/voila/#sample","text":"Try ipyvizzu-story in Voil\u00e0 with the following sample. # import ipyvizzu and ipyvizzu-story from ipyvizzu import Data, Config from ipyvizzustory import Slide, Step from ipyvizzustory import Story # or # from ipyvizzustory.env.ipy.story import Story # create data and initialize Story with the created data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # you can also add data with pandas # import pandas as pd # # data = Data() # df = pd.read_csv( # \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" # ) # data.add_df(df) story = Story(data=data) # create Slides and Steps and add them to the Story slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide1) slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # you can set the width and height (CSS style) story.set_size(width=\"800px\", height=\"480px\") # you can export the Story into a html file story.export_to_html(filename=\"mystory.html\") # or you can get the html Story as a string html = story.to_html() print(html) # you can display the Story with the `play` method story.play() # or you can also use the `_repr_html_` method. # story Place the above code blocks into notebook cells in a notebook file (for example called ipyvizzustory_example.ipynb ) and run the following command in your command line in order to try it. voila ipyvizzustory_example.ipynb Check the Tutorial for more info.","title":"Sample"},{"location":"examples/","text":"Examples","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/_basic/","text":"Basic example The below story shows a basic use case for ipyvizzu-story . from ipyvizzu import Data, Config from ipyvizzustory import Story, Slide, Step # Create data object data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # Create story object, add data to it story = Story(data=data) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) # Add the slide to the story story.add_slide(slide1) # Create the second slide # Configs provided here are changes to the visualization # created in the previous Step slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # Play the created story! story.play()","title":"Basic example"},{"location":"examples/_basic/#basic-example","text":"The below story shows a basic use case for ipyvizzu-story . from ipyvizzu import Data, Config from ipyvizzustory import Story, Slide, Step # Create data object data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) # Create story object, add data to it story = Story(data=data) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) # Add the slide to the story story.add_slide(slide1) # Create the second slide # Configs provided here are changes to the visualization # created in the previous Step slide2 = Slide( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) story.add_slide(slide2) # Play the created story! story.play()","title":"Basic example"},{"location":"examples/linkedinpoll/","text":"Presentation Poll Results In August, 2022, we asked data scientists in 5 LinkedIn groups about how often they have to present the results of their analysis to business stakeholders. This is a data story about the results of that poll. import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/linkedinpoll/linkedinpoll.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Create story object, add data to it story = Story(data=data) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"450px\") # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Style( { \"legend\": { \"label\": {\"fontSize\": \"1.1em\"}, \"paddingRight\": \"-1em\", }, \"plot\": { \"marker\": {\"label\": {\"fontSize\": \"1.1em\"}}, \"paddingLeft\": \"10em\", \"xAxis\": { \"title\": {\"color\": \"#00000000\"}, \"label\": {\"fontSize\": \"1.1em\"}, }, \"yAxis\": {\"label\": {\"fontSize\": \"1.1em\"}}, }, \"logo\": {\"width\": \"6em\"}, \"fontSize\": \"0.8em\", } ), Config( { \"x\": {\"set\": [\"Vote percentage [%]\", \"Answer\"]}, \"y\": \"Group number\", \"color\": \"Answer\", \"label\": \"Vote percentage [%]\", \"title\": \"How often do you present \" + \"your findings to business stakeholders?\", } ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}), Config( { \"split\": True, \"title\": \"2 or more is the most popular answer in every group\", } ), ) ) story.add_slide(slide2) slide3 = Slide( Step( Style( { \"plot\": { \"marker\": {\"label\": {\"fontSize\": \"0.916667em\"}} } } ), Config( { \"x\": {\"set\": [\"Vote count\", \"Answer\"]}, \"label\": \"Vote count\", \"title\": \"61% of the votes came from one group\", } ), ) ) story.add_slide(slide3) slide4 = Slide() slide4.add_step( Step( Style({\"plot\": {\"yAxis\": {\"title\": {\"color\": \"#00000000\"}}}}), Config( { \"x\": \"Answer\", \"y\": [\"Group number\", \"Vote count\"], \"split\": False, \"legend\": \"color\", } ), ) ) slide4.add_step( Step( Style({\"plot\": {\"marker\": {\"label\": {\"fontSize\": \"1.1em\"}}}}), Config( {\"y\": \"Vote count\", \"title\": \"More than 700 people voted\"} ), ) ) story.add_slide(slide4) slide5 = Slide() slide5.add_step( Step( Config( { \"x\": [\"Answer percentage [%]\", \"Answer\"], \"y\": None, \"label\": \"Answer percentage [%]\", } ) ) ) slide5.add_step( Step( Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}), Config( { \"coordSystem\": \"polar\", \"title\": \"More than two-third of respondents present \" + \"at least once per month\", } ), ) ) story.add_slide(slide5) # Play the created story! story.play() Group 1 : AI & ML - Analytics , Data Science . SAP BI/ Analytics Cloud /Tableau /Power BI /Birst Group 2 : Artificial Intelligence, Digital Transformation Data Science, Automation, Machine Learning Analytics Group 3 : Data Scientist, Data Analyst and Data Engineer Group 4 : Python Developers Community (moderated) Group 5 : Data Analytics, Data Science, Business Analytics, Business Intelligence, Data Scientist & Analyst","title":"Presentation Poll Results"},{"location":"examples/linkedinpoll/#presentation-poll-results","text":"In August, 2022, we asked data scientists in 5 LinkedIn groups about how often they have to present the results of their analysis to business stakeholders. This is a data story about the results of that poll. import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/linkedinpoll/linkedinpoll.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Create story object, add data to it story = Story(data=data) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"450px\") # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Style( { \"legend\": { \"label\": {\"fontSize\": \"1.1em\"}, \"paddingRight\": \"-1em\", }, \"plot\": { \"marker\": {\"label\": {\"fontSize\": \"1.1em\"}}, \"paddingLeft\": \"10em\", \"xAxis\": { \"title\": {\"color\": \"#00000000\"}, \"label\": {\"fontSize\": \"1.1em\"}, }, \"yAxis\": {\"label\": {\"fontSize\": \"1.1em\"}}, }, \"logo\": {\"width\": \"6em\"}, \"fontSize\": \"0.8em\", } ), Config( { \"x\": {\"set\": [\"Vote percentage [%]\", \"Answer\"]}, \"y\": \"Group number\", \"color\": \"Answer\", \"label\": \"Vote percentage [%]\", \"title\": \"How often do you present \" + \"your findings to business stakeholders?\", } ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}), Config( { \"split\": True, \"title\": \"2 or more is the most popular answer in every group\", } ), ) ) story.add_slide(slide2) slide3 = Slide( Step( Style( { \"plot\": { \"marker\": {\"label\": {\"fontSize\": \"0.916667em\"}} } } ), Config( { \"x\": {\"set\": [\"Vote count\", \"Answer\"]}, \"label\": \"Vote count\", \"title\": \"61% of the votes came from one group\", } ), ) ) story.add_slide(slide3) slide4 = Slide() slide4.add_step( Step( Style({\"plot\": {\"yAxis\": {\"title\": {\"color\": \"#00000000\"}}}}), Config( { \"x\": \"Answer\", \"y\": [\"Group number\", \"Vote count\"], \"split\": False, \"legend\": \"color\", } ), ) ) slide4.add_step( Step( Style({\"plot\": {\"marker\": {\"label\": {\"fontSize\": \"1.1em\"}}}}), Config( {\"y\": \"Vote count\", \"title\": \"More than 700 people voted\"} ), ) ) story.add_slide(slide4) slide5 = Slide() slide5.add_step( Step( Config( { \"x\": [\"Answer percentage [%]\", \"Answer\"], \"y\": None, \"label\": \"Answer percentage [%]\", } ) ) ) slide5.add_step( Step( Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}), Config( { \"coordSystem\": \"polar\", \"title\": \"More than two-third of respondents present \" + \"at least once per month\", } ), ) ) story.add_slide(slide5) # Play the created story! story.play() Group 1 : AI & ML - Analytics , Data Science . SAP BI/ Analytics Cloud /Tableau /Power BI /Birst Group 2 : Artificial Intelligence, Digital Transformation Data Science, Automation, Machine Learning Analytics Group 3 : Data Scientist, Data Analyst and Data Engineer Group 4 : Python Developers Community (moderated) Group 5 : Data Analytics, Data Science, Business Analytics, Business Intelligence, Data Scientist & Analyst","title":"Presentation Poll Results"},{"location":"examples/population/","text":"UN Population Forecast In this example, we explore the population of Africa between 1953-2098. On top of that, this story shows how to use the chart configuration presets. Check ipyvizzu - Chart presets chapter and ipyvizzu - Preset charts gallery for more details on the available chart presets. import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/population/population.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Create story object, add data to it story = Story(data=data) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Data.filter(\"record.Continent == 'Africa'\"), Config.stackedArea( { \"x\": \"Year\", \"y\": \"Medium\", \"stackedBy\": \"Subregion\", \"title\": \"Population of Africa 1953-2098\", } ), Style({\"plot\": {\"xAxis\": {\"label\": {\"angle\": 2.0}}}}), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Config.percentageArea( { \"x\": \"Year\", \"y\": \"Medium\", \"stackedBy\": \"Subregion\", } ), ) ) story.add_slide(slide2) slide3 = Slide( Step( Config.stream( { \"x\": \"Year\", \"y\": \"Medium\", \"stackedBy\": \"Subregion\", } ), ) ) story.add_slide(slide3) slide4 = Slide( Step( Config.violin( { \"x\": \"Year\", \"y\": \"Medium\", \"splittedBy\": \"Subregion\", } ), ) ) story.add_slide(slide4) # Play the created story! story.play()","title":"UN Population Forecast"},{"location":"examples/population/#un-population-forecast","text":"In this example, we explore the population of Africa between 1953-2098. On top of that, this story shows how to use the chart configuration presets. Check ipyvizzu - Chart presets chapter and ipyvizzu - Preset charts gallery for more details on the available chart presets. import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/population/population.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Create story object, add data to it story = Story(data=data) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Data.filter(\"record.Continent == 'Africa'\"), Config.stackedArea( { \"x\": \"Year\", \"y\": \"Medium\", \"stackedBy\": \"Subregion\", \"title\": \"Population of Africa 1953-2098\", } ), Style({\"plot\": {\"xAxis\": {\"label\": {\"angle\": 2.0}}}}), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Config.percentageArea( { \"x\": \"Year\", \"y\": \"Medium\", \"stackedBy\": \"Subregion\", } ), ) ) story.add_slide(slide2) slide3 = Slide( Step( Config.stream( { \"x\": \"Year\", \"y\": \"Medium\", \"stackedBy\": \"Subregion\", } ), ) ) story.add_slide(slide3) slide4 = Slide( Step( Config.violin( { \"x\": \"Year\", \"y\": \"Medium\", \"splittedBy\": \"Subregion\", } ), ) ) story.add_slide(slide4) # Play the created story! story.play()","title":"UN Population Forecast"},{"location":"examples/proglangs/","text":"Popularity of Programming Languages What programming languages do data scientists use? This was one of the questions in the State of Data Science Reports published by Anaconda between 2020 and 2022. This data story shows the answers to this question. import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/proglangs/proglangs.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Create story object, add data to it story = Story(data=data) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"600px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Set a handler that prevents showing specific elements label_handler_method = ( \"if(event.data.text.split(' ')[0] < 5) event.preventDefault()\" ) story.add_event(\"plot-marker-label-draw\", label_handler_method) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Data.filter(\"record.Year == 2022\"), Config( { \"x\": [\"Popularity\", \"Value[%]\"], \"y\": [\"Language\", \"Year\", \"Lang_year\"], \"color\": \"Popularity\", \"label\": \"Value[%]\", \"align\": \"stretch\", \"title\": \"Use of programming languages by data scientists in 2022\", \"lightness\": \"Year\", \"legend\": \"color\", } ), Style( { \"logo\": {\"width\": \"5em\"}, \"plot\": { \"xAxis\": {\"title\": {\"color\": \"#00000000\"}}, \"paddingLeft\": \"2.5em\", \"marker\": { \"colorPalette\": \"#3DAE2BFF \" + \"#00833EFF \" + \"#00A19BFF \" + \"#0075A9FF \" + \"#003764FF\", \"minLightness\": 0, \"maxLightness\": 0.4, }, }, \"fontSize\": \"0.8em\", } ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Config( { \"split\": True, \"align\": \"min\", \"title\": \"Python is always or frequently used by 58%\", } ), Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}), ) ) story.add_slide(slide2) slide3 = Slide() slide3.add_step( Step( Config({\"split\": False, \"align\": \"stretch\"}), Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#999999FF\"}}}}), ) ) slide3.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && record.Year == 2022 \"\"\" ), Config({\"x\": {\"range\": {\"max\": 100}}, \"align\": \"min\"}), ) ) slide3.add_step( Step( Config( { \"sort\": \"byValue\", \"title\": \"Python & SQL are the most popular by a huge margin\", } ) ) ) story.add_slide(slide3) slide4 = Slide() slide4.add_step( Step( Config( { \"sort\": \"none\", \"title\": \"Let's focus on the six languages with data since 2020\", } ) ) ) slide4.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && (record.Language == 'R' || record.Language == 'Python' || record.Language == 'JavaScript' || record.Language == 'Java' || record.Language == 'C#' || record.Language == 'C/C++') && record.Year == 2022 \"\"\" ), ) ) slide4.add_step( Step( Config( { \"y\": [\"Lang_year\", \"Year\"], \"x\": [\"Popularity\", \"Language\", \"Value[%]\"], } ) ) ) story.add_slide(slide4) slide5 = Slide() slide5.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && (record.Language == 'R' || record.Language == 'Python' || record.Language == 'JavaScript' || record.Language == 'Java' || record.Language == 'C#' || record.Language == 'C/C++') && record.Year != 2020 \"\"\" ), ) ) slide5.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && (record.Language == 'R' || record.Language == 'Python' || record.Language == 'JavaScript' || record.Language == 'Java' || record.Language == 'C#' || record.Language == 'C/C++') \"\"\" ), Config( { \"title\": \"C/C++, C#, Java and Javascript are gaining popularity\" } ), ) ) story.add_slide(slide5) # Play the created story! story.play()","title":"Popularity of Programming Languages"},{"location":"examples/proglangs/#popularity-of-programming-languages","text":"What programming languages do data scientists use? This was one of the questions in the State of Data Science Reports published by Anaconda between 2020 and 2022. This data story shows the answers to this question. import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/proglangs/proglangs.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Create story object, add data to it story = Story(data=data) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"600px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Set a handler that prevents showing specific elements label_handler_method = ( \"if(event.data.text.split(' ')[0] < 5) event.preventDefault()\" ) story.add_event(\"plot-marker-label-draw\", label_handler_method) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Data.filter(\"record.Year == 2022\"), Config( { \"x\": [\"Popularity\", \"Value[%]\"], \"y\": [\"Language\", \"Year\", \"Lang_year\"], \"color\": \"Popularity\", \"label\": \"Value[%]\", \"align\": \"stretch\", \"title\": \"Use of programming languages by data scientists in 2022\", \"lightness\": \"Year\", \"legend\": \"color\", } ), Style( { \"logo\": {\"width\": \"5em\"}, \"plot\": { \"xAxis\": {\"title\": {\"color\": \"#00000000\"}}, \"paddingLeft\": \"2.5em\", \"marker\": { \"colorPalette\": \"#3DAE2BFF \" + \"#00833EFF \" + \"#00A19BFF \" + \"#0075A9FF \" + \"#003764FF\", \"minLightness\": 0, \"maxLightness\": 0.4, }, }, \"fontSize\": \"0.8em\", } ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Config( { \"split\": True, \"align\": \"min\", \"title\": \"Python is always or frequently used by 58%\", } ), Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#00000000\"}}}}), ) ) story.add_slide(slide2) slide3 = Slide() slide3.add_step( Step( Config({\"split\": False, \"align\": \"stretch\"}), Style({\"plot\": {\"xAxis\": {\"label\": {\"color\": \"#999999FF\"}}}}), ) ) slide3.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && record.Year == 2022 \"\"\" ), Config({\"x\": {\"range\": {\"max\": 100}}, \"align\": \"min\"}), ) ) slide3.add_step( Step( Config( { \"sort\": \"byValue\", \"title\": \"Python & SQL are the most popular by a huge margin\", } ) ) ) story.add_slide(slide3) slide4 = Slide() slide4.add_step( Step( Config( { \"sort\": \"none\", \"title\": \"Let's focus on the six languages with data since 2020\", } ) ) ) slide4.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && (record.Language == 'R' || record.Language == 'Python' || record.Language == 'JavaScript' || record.Language == 'Java' || record.Language == 'C#' || record.Language == 'C/C++') && record.Year == 2022 \"\"\" ), ) ) slide4.add_step( Step( Config( { \"y\": [\"Lang_year\", \"Year\"], \"x\": [\"Popularity\", \"Language\", \"Value[%]\"], } ) ) ) story.add_slide(slide4) slide5 = Slide() slide5.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && (record.Language == 'R' || record.Language == 'Python' || record.Language == 'JavaScript' || record.Language == 'Java' || record.Language == 'C#' || record.Language == 'C/C++') && record.Year != 2020 \"\"\" ), ) ) slide5.add_step( Step( Data.filter( \"\"\" (record.Popularity == 'Always' || record.Popularity == 'Frequently') && (record.Language == 'R' || record.Language == 'Python' || record.Language == 'JavaScript' || record.Language == 'Java' || record.Language == 'C#' || record.Language == 'C/C++') \"\"\" ), Config( { \"title\": \"C/C++, C#, Java and Javascript are gaining popularity\" } ), ) ) story.add_slide(slide5) # Play the created story! story.play()","title":"Popularity of Programming Languages"},{"location":"examples/titanic/","text":"Passengers of the Titanic import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/titanic/titanic.csv\", dtype={\"Pclass\": str}, ) df.loc[df[\"Age\"].between(0, 20, \"both\"), \"Age_group\"] = \"20-\" df.loc[df[\"Age\"].between(20, 30, \"right\"), \"Age_group\"] = \"20-30\" df.loc[df[\"Age\"].between(30, 40, \"right\"), \"Age_group\"] = \"30-40\" df.loc[df[\"Age\"].between(40, 50, \"right\"), \"Age_group\"] = \"40-50\" df.loc[df[\"Age\"].between(50, 60, \"right\"), \"Age_group\"] = \"50-60\" df.loc[df[\"Age\"].between(60, 100, \"right\"), \"Age_group\"] = \"60+\" df[\"Age_group\"] = df[\"Age_group\"].fillna(\"NaN\") # Prepare to sort the dataframe by salary list agegroupsorter = [ \"20-\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60+\", \"NaN\", ] # Create the dictionary that defines the order for sorting sorterIndex = dict(zip(agegroupsorter, range(len(agegroupsorter)))) # Generate a rank column that will be used to sort # the dataframe numerically df[\"Age_group_rank\"] = df[\"Age_group\"].map(sorterIndex) df.sort_values([\"Age_group_rank\"], inplace=True) data.add_df(df) # Set the style of the charts in the story style = Style( { \"plot\": { \"yAxis\": { \"label\": { \"fontSize\": \"1em\", \"paddingRight\": \"1.2em\", }, \"title\": {\"color\": \"#ffffff00\"}, }, \"xAxis\": { \"label\": { \"angle\": \"2.5\", \"fontSize\": \"1.1em\", \"paddingRight\": \"0em\", \"paddingTop\": \"1em\", }, \"title\": {\"fontSize\": \"1em\", \"paddingTop\": \"2.5em\"}, }, }, \"logo\": {\"width\": \"5em\"}, } ) # Create story object, add data and style settings to it story = Story(data=data, style=style) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Config.bar( {\"x\": \"Count\", \"title\": \"Passengers of the Titanic\"} ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide() slide2.add_step( Step( Config.stackedBar({\"x\": \"Count\", \"stackedBy\": \"Sex\"}), ) ) slide2.add_step( Step( Config.groupedBar( { \"x\": \"Count\", \"y\": \"Sex\", \"groupedBy\": \"Sex\", \"legend\": \"color\", \"title\": \"Rougly one-third of the passengers were ladies\", } ), ) ) story.add_slide(slide2) slide3 = Slide() slide3.add_step( Step( Config( { \"x\": [\"Count\", \"Survived\"], \"y\": \"Sex\", \"color\": \"Sex\", \"lightness\": \"Survived\", \"label\": [\"Survived\", \"Count\"], } ), ) ) slide3.add_step( Step( Config( { \"align\": \"stretch\", \"title\": \"Much more women survived than men\", } ), ) ) story.add_slide(slide3) slide4 = Slide() slide4.add_step( Step( Config( { \"x\": \"Count\", \"align\": \"none\", \"label\": None, \"lightness\": None, \"title\": \"Let's add the age of the passengers to the mix\", } ), ) ) slide4.add_step( Step( Config( { \"y\": [\"Count\", \"Sex\"], \"x\": \"Age_group\", \"label\": \"Count\", } ), ) ) story.add_slide(slide4) slide5 = Slide() slide5.add_step( Step( Config( { \"label\": None, \"title\": \"Let's see how many people survived/died \" + \"in these age groups\", } ), ) ) slide5.add_step( Step( Config( { \"y\": [\"Count\", \"Sex\", \"Survived\"], \"lightness\": \"Survived\", \"legend\": \"lightness\", } ), ) ) slide5.add_step( Step( Config( { \"y\": [\"Count\", \"Survived\", \"Sex\"], } ), ) ) story.add_slide(slide5) slide6 = Slide( Step( Config( { \"align\": \"stretch\", \"title\": \"Survival rate varies a bit between age groups\", } ), ) ) story.add_slide(slide6) slide7 = Slide( Step( Data.filter(\"record.Sex == 'male'\"), Config( { \"title\": \"But again shows a very different picture for men...\" } ), ) ) story.add_slide(slide7) slide8 = Slide() slide8.add_step(Step(Data.filter(None))) slide8.add_step( Step( Data.filter(\"record.Sex == 'female'\"), Config({\"title\": \"...and women\"}), ) ) story.add_slide(slide8) # Play the created story! story.play()","title":"Passengers of the Titanic"},{"location":"examples/titanic/#passengers-of-the-titanic","text":"import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/titanic/titanic.csv\", dtype={\"Pclass\": str}, ) df.loc[df[\"Age\"].between(0, 20, \"both\"), \"Age_group\"] = \"20-\" df.loc[df[\"Age\"].between(20, 30, \"right\"), \"Age_group\"] = \"20-30\" df.loc[df[\"Age\"].between(30, 40, \"right\"), \"Age_group\"] = \"30-40\" df.loc[df[\"Age\"].between(40, 50, \"right\"), \"Age_group\"] = \"40-50\" df.loc[df[\"Age\"].between(50, 60, \"right\"), \"Age_group\"] = \"50-60\" df.loc[df[\"Age\"].between(60, 100, \"right\"), \"Age_group\"] = \"60+\" df[\"Age_group\"] = df[\"Age_group\"].fillna(\"NaN\") # Prepare to sort the dataframe by salary list agegroupsorter = [ \"20-\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60+\", \"NaN\", ] # Create the dictionary that defines the order for sorting sorterIndex = dict(zip(agegroupsorter, range(len(agegroupsorter)))) # Generate a rank column that will be used to sort # the dataframe numerically df[\"Age_group_rank\"] = df[\"Age_group\"].map(sorterIndex) df.sort_values([\"Age_group_rank\"], inplace=True) data.add_df(df) # Set the style of the charts in the story style = Style( { \"plot\": { \"yAxis\": { \"label\": { \"fontSize\": \"1em\", \"paddingRight\": \"1.2em\", }, \"title\": {\"color\": \"#ffffff00\"}, }, \"xAxis\": { \"label\": { \"angle\": \"2.5\", \"fontSize\": \"1.1em\", \"paddingRight\": \"0em\", \"paddingTop\": \"1em\", }, \"title\": {\"fontSize\": \"1em\", \"paddingTop\": \"2.5em\"}, }, }, \"logo\": {\"width\": \"5em\"}, } ) # Create story object, add data and style settings to it story = Story(data=data, style=style) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Config.bar( {\"x\": \"Count\", \"title\": \"Passengers of the Titanic\"} ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide() slide2.add_step( Step( Config.stackedBar({\"x\": \"Count\", \"stackedBy\": \"Sex\"}), ) ) slide2.add_step( Step( Config.groupedBar( { \"x\": \"Count\", \"y\": \"Sex\", \"groupedBy\": \"Sex\", \"legend\": \"color\", \"title\": \"Rougly one-third of the passengers were ladies\", } ), ) ) story.add_slide(slide2) slide3 = Slide() slide3.add_step( Step( Config( { \"x\": [\"Count\", \"Survived\"], \"y\": \"Sex\", \"color\": \"Sex\", \"lightness\": \"Survived\", \"label\": [\"Survived\", \"Count\"], } ), ) ) slide3.add_step( Step( Config( { \"align\": \"stretch\", \"title\": \"Much more women survived than men\", } ), ) ) story.add_slide(slide3) slide4 = Slide() slide4.add_step( Step( Config( { \"x\": \"Count\", \"align\": \"none\", \"label\": None, \"lightness\": None, \"title\": \"Let's add the age of the passengers to the mix\", } ), ) ) slide4.add_step( Step( Config( { \"y\": [\"Count\", \"Sex\"], \"x\": \"Age_group\", \"label\": \"Count\", } ), ) ) story.add_slide(slide4) slide5 = Slide() slide5.add_step( Step( Config( { \"label\": None, \"title\": \"Let's see how many people survived/died \" + \"in these age groups\", } ), ) ) slide5.add_step( Step( Config( { \"y\": [\"Count\", \"Sex\", \"Survived\"], \"lightness\": \"Survived\", \"legend\": \"lightness\", } ), ) ) slide5.add_step( Step( Config( { \"y\": [\"Count\", \"Survived\", \"Sex\"], } ), ) ) story.add_slide(slide5) slide6 = Slide( Step( Config( { \"align\": \"stretch\", \"title\": \"Survival rate varies a bit between age groups\", } ), ) ) story.add_slide(slide6) slide7 = Slide( Step( Data.filter(\"record.Sex == 'male'\"), Config( { \"title\": \"But again shows a very different picture for men...\" } ), ) ) story.add_slide(slide7) slide8 = Slide() slide8.add_step(Step(Data.filter(None))) slide8.add_step( Step( Data.filter(\"record.Sex == 'female'\"), Config({\"title\": \"...and women\"}), ) ) story.add_slide(slide8) # Play the created story! story.play()","title":"Passengers of the Titanic"},{"location":"examples/trumptwitter/","text":"Trump Twitter Tirade import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/trumptwitter/trumptwitter.csv\", ) data.add_df(df) # Set the style of the charts in the story style = Style( { \"tooltip\": {\"fontSize\": \"22px\"}, \"title\": {\"paddingTop\": \"1.2em\", \"fontSize\": \"2.5em\"}, \"legend\": {\"label\": {\"fontSize\": \"1.8em\"}, \"width\": \"16em\"}, \"logo\": {\"width\": \"6em\"}, \"plot\": { \"marker\": {\"label\": {\"fontSize\": \"1.5em\"}}, \"yAxis\": { \"label\": { \"fontSize\": \"1.5em\", }, \"title\": {\"color\": \"#ffffff00\"}, \"interlacing\": {\"color\": \"#ffffff00\"}, }, \"xAxis\": { \"label\": { \"fontSize\": \"1.6em\", \"paddingTop\": \"1em\", }, \"title\": {\"fontSize\": \"1.4em\", \"paddingTop\": \"2.5em\"}, }, }, } ) # Create story object, add data and style settings to it story = Story(data=data, style=style) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Data.filter( \"record.Firsttweet === 'Yes' && record.Dummy === 'No'\" ), Config( { \"channels\": { \"y\": { \"set\": [\"tweets\"], }, \"x\": {\"set\": [\"Period\", \"year\", \"month\"]}, \"color\": \"Period\", }, \"title\": \"Trump started tweeting in May '09\", } ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Data.filter( \"record.Period === 'New to Twitter' && record.Dummy === 'No'\" ), Config( { \"title\": \"In the first two years he wasn't very active\", } ), ) ) story.add_slide(slide2) slide3 = Slide( Step( Data.filter( \"\"\" (record.Period === 'New to Twitter' || record.Period === 'Businessman') && record.Dummy === 'No' \"\"\" ), Config( { \"title\": \"Then he got hooked on\", } ), ) ) story.add_slide(slide3) slide4 = Slide( Step( Data.filter( \"\"\" (record.Period === 'New to Twitter' || record.Period === 'Businessman' || record.Period === 'Nominee') && record.Dummy === 'No' \"\"\" ), Config( { \"title\": \"Interesting trend after becoming a presidential nominee\", } ), ) ) story.add_slide(slide4) slide5 = Slide( Step( Data.filter(\"record.Dummy === 'No'\"), Config( { \"title\": \"And after he became President\", } ), ) ) story.add_slide(slide5) slide6 = Slide() slide6.add_step( Step( Config({\"geometry\": \"area\", \"align\": \"center\"}), ) ) slide6.add_step( Step( Config( { \"title\": \"All of Trump's tweets until May 2020\", } ), ) ) story.add_slide(slide6) slide7 = Slide( Step( Config( { \"y\": \"retweetcount\", \"title\": \"And the number of times these were retweeted\", } ), ) ) story.add_slide(slide7) slide8 = Slide() slide8.add_step( Step( Config( { \"y\": \"tweets\", \"title\": \"Let's focus on the number of tweets for now\", } ), ) ), slide8.add_step( Step( Config( { \"x\": {\"set\": [\"year\", \"month\"]}, \"color\": None, } ) ) ) story.add_slide(slide8) slide9 = Slide( Step( Config( { \"y\": [\"tweets\", \"Type\"], \"color\": \"Type\", \"title\": \"Original tweets, retweets & replies sent\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#A0CDEBFF #60C0E6FF #1DA1F3FF\" } } }, ), ) ) story.add_slide(slide9) slide10 = Slide( Step( Config({\"split\": True, \"align\": \"none\"}), Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}), ) ) story.add_slide(slide10) slide11 = Slide( Step( Config( { \"split\": False, \"align\": \"stretch\", \"title\": \"Original tweets, retweets & replies sent (%)\", } ), Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#999999ff\"}}}}), ) ) story.add_slide(slide11) slide12 = Slide() slide12.add_step( Step( Config( { \"align\": \"center\", \"title\": \"\", } ), ) ) slide12.add_step( Step( Config({\"y\": \"tweets\", \"color\": None, \"legend\": \"lightness\"}), Style( {\"plot\": {\"marker\": {\"colorPalette\": \"null\"}}}, ), ) ) slide12.add_step( Step( Config( { \"y\": [\"tweets\", \"Tool\"], \"color\": \"Tool\", \"title\": \"Tools Trump Used to Tweet\", \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#597696FF #ED2828FF #26EC87FF #29B9BFFF \" } } }, ), ) ) story.add_slide(slide12) slide13 = Slide( Step( Config({\"split\": True, \"align\": \"none\"}), Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}), ) ) story.add_slide(slide13) slide14 = Slide() slide14.add_step( Step( Config( { \"geometry\": \"rectangle\", } ), ) ) slide14.add_step( Step( Config( { \"x\": [\"tweets\", \"year\", \"month\"], \"y\": \"Tool\", \"geometry\": \"rectangle\", \"split\": False, \"align\": \"none\", } ), Style( { \"plot\": { \"xAxis\": {\"title\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"color\": \"#999999ff\"}}, } }, ), ) ) slide14.add_step( Step( Config( { \"x\": \"tweets\", \"label\": \"tweets\", } ), ) ) story.add_slide(slide14) slide15 = Slide() slide15.add_step( Step( Config( { \"x\": [\"tweets\", \"AMPM\", \"hour12\"], \"label\": None, } ), ) ) slide15.add_step( Step( Config( { \"y\": [\"tweets\", \"Tool\"], \"x\": [\"AMPM\", \"hour12\"], \"align\": \"max\", } ), ) ) slide15.add_step( Step( Config( { \"geometry\": \"area\", } ), ) ) slide15.add_step( Step( Config( { \"coordSystem\": \"polar\", \"rotate\": 180, \"title\": \"Time of Day When Trump Tweeted\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}, \"xAxis\": { \"label\": { \"fontSize\": \"2em\", \"paddingBottom\": \"2.5em\", \"paddingTop\": \"2.5em\", \"paddingLeft\": \"2.5em\", \"paddingRight\": \"2.5em\", } }, } } ), ) ) story.add_slide(slide15) slide16 = Slide( Step( Config( { \"y\": [\"Businessman\", \"Tool\"], \"title\": \"Times Trump Tweeted When Being a Businessman\", } ), ) ) story.add_slide(slide16) slide17 = Slide( Step( Config( { \"y\": [\"President\", \"Tool\"], \"title\": \"Times Trump Tweeted When Being President\", } ), ) ) story.add_slide(slide17) # Play the created story! story.play()","title":"Trump Twitter Tirade"},{"location":"examples/trumptwitter/#trump-twitter-tirade","text":"import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/trumptwitter/trumptwitter.csv\", ) data.add_df(df) # Set the style of the charts in the story style = Style( { \"tooltip\": {\"fontSize\": \"22px\"}, \"title\": {\"paddingTop\": \"1.2em\", \"fontSize\": \"2.5em\"}, \"legend\": {\"label\": {\"fontSize\": \"1.8em\"}, \"width\": \"16em\"}, \"logo\": {\"width\": \"6em\"}, \"plot\": { \"marker\": {\"label\": {\"fontSize\": \"1.5em\"}}, \"yAxis\": { \"label\": { \"fontSize\": \"1.5em\", }, \"title\": {\"color\": \"#ffffff00\"}, \"interlacing\": {\"color\": \"#ffffff00\"}, }, \"xAxis\": { \"label\": { \"fontSize\": \"1.6em\", \"paddingTop\": \"1em\", }, \"title\": {\"fontSize\": \"1.4em\", \"paddingTop\": \"2.5em\"}, }, }, } ) # Create story object, add data and style settings to it story = Story(data=data, style=style) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Each slide here is a page in the final interactive story # Add the first slide slide1 = Slide( Step( Data.filter( \"record.Firsttweet === 'Yes' && record.Dummy === 'No'\" ), Config( { \"channels\": { \"y\": { \"set\": [\"tweets\"], }, \"x\": {\"set\": [\"Period\", \"year\", \"month\"]}, \"color\": \"Period\", }, \"title\": \"Trump started tweeting in May '09\", } ), ) ) # Add the slide to the story story.add_slide(slide1) slide2 = Slide( Step( Data.filter( \"record.Period === 'New to Twitter' && record.Dummy === 'No'\" ), Config( { \"title\": \"In the first two years he wasn't very active\", } ), ) ) story.add_slide(slide2) slide3 = Slide( Step( Data.filter( \"\"\" (record.Period === 'New to Twitter' || record.Period === 'Businessman') && record.Dummy === 'No' \"\"\" ), Config( { \"title\": \"Then he got hooked on\", } ), ) ) story.add_slide(slide3) slide4 = Slide( Step( Data.filter( \"\"\" (record.Period === 'New to Twitter' || record.Period === 'Businessman' || record.Period === 'Nominee') && record.Dummy === 'No' \"\"\" ), Config( { \"title\": \"Interesting trend after becoming a presidential nominee\", } ), ) ) story.add_slide(slide4) slide5 = Slide( Step( Data.filter(\"record.Dummy === 'No'\"), Config( { \"title\": \"And after he became President\", } ), ) ) story.add_slide(slide5) slide6 = Slide() slide6.add_step( Step( Config({\"geometry\": \"area\", \"align\": \"center\"}), ) ) slide6.add_step( Step( Config( { \"title\": \"All of Trump's tweets until May 2020\", } ), ) ) story.add_slide(slide6) slide7 = Slide( Step( Config( { \"y\": \"retweetcount\", \"title\": \"And the number of times these were retweeted\", } ), ) ) story.add_slide(slide7) slide8 = Slide() slide8.add_step( Step( Config( { \"y\": \"tweets\", \"title\": \"Let's focus on the number of tweets for now\", } ), ) ), slide8.add_step( Step( Config( { \"x\": {\"set\": [\"year\", \"month\"]}, \"color\": None, } ) ) ) story.add_slide(slide8) slide9 = Slide( Step( Config( { \"y\": [\"tweets\", \"Type\"], \"color\": \"Type\", \"title\": \"Original tweets, retweets & replies sent\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#A0CDEBFF #60C0E6FF #1DA1F3FF\" } } }, ), ) ) story.add_slide(slide9) slide10 = Slide( Step( Config({\"split\": True, \"align\": \"none\"}), Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}), ) ) story.add_slide(slide10) slide11 = Slide( Step( Config( { \"split\": False, \"align\": \"stretch\", \"title\": \"Original tweets, retweets & replies sent (%)\", } ), Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#999999ff\"}}}}), ) ) story.add_slide(slide11) slide12 = Slide() slide12.add_step( Step( Config( { \"align\": \"center\", \"title\": \"\", } ), ) ) slide12.add_step( Step( Config({\"y\": \"tweets\", \"color\": None, \"legend\": \"lightness\"}), Style( {\"plot\": {\"marker\": {\"colorPalette\": \"null\"}}}, ), ) ) slide12.add_step( Step( Config( { \"y\": [\"tweets\", \"Tool\"], \"color\": \"Tool\", \"title\": \"Tools Trump Used to Tweet\", \"legend\": \"color\", } ), Style( { \"plot\": { \"marker\": { \"colorPalette\": \"#597696FF #ED2828FF #26EC87FF #29B9BFFF \" } } }, ), ) ) story.add_slide(slide12) slide13 = Slide( Step( Config({\"split\": True, \"align\": \"none\"}), Style({\"plot\": {\"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}}}), ) ) story.add_slide(slide13) slide14 = Slide() slide14.add_step( Step( Config( { \"geometry\": \"rectangle\", } ), ) ) slide14.add_step( Step( Config( { \"x\": [\"tweets\", \"year\", \"month\"], \"y\": \"Tool\", \"geometry\": \"rectangle\", \"split\": False, \"align\": \"none\", } ), Style( { \"plot\": { \"xAxis\": {\"title\": {\"color\": \"#ffffff00\"}}, \"yAxis\": {\"label\": {\"color\": \"#999999ff\"}}, } }, ), ) ) slide14.add_step( Step( Config( { \"x\": \"tweets\", \"label\": \"tweets\", } ), ) ) story.add_slide(slide14) slide15 = Slide() slide15.add_step( Step( Config( { \"x\": [\"tweets\", \"AMPM\", \"hour12\"], \"label\": None, } ), ) ) slide15.add_step( Step( Config( { \"y\": [\"tweets\", \"Tool\"], \"x\": [\"AMPM\", \"hour12\"], \"align\": \"max\", } ), ) ) slide15.add_step( Step( Config( { \"geometry\": \"area\", } ), ) ) slide15.add_step( Step( Config( { \"coordSystem\": \"polar\", \"rotate\": 180, \"title\": \"Time of Day When Trump Tweeted\", } ), Style( { \"plot\": { \"yAxis\": {\"label\": {\"color\": \"#ffffff00\"}}, \"xAxis\": { \"label\": { \"fontSize\": \"2em\", \"paddingBottom\": \"2.5em\", \"paddingTop\": \"2.5em\", \"paddingLeft\": \"2.5em\", \"paddingRight\": \"2.5em\", } }, } } ), ) ) story.add_slide(slide15) slide16 = Slide( Step( Config( { \"y\": [\"Businessman\", \"Tool\"], \"title\": \"Times Trump Tweeted When Being a Businessman\", } ), ) ) story.add_slide(slide16) slide17 = Slide( Step( Config( { \"y\": [\"President\", \"Tool\"], \"title\": \"Times Trump Tweeted When Being President\", } ), ) ) story.add_slide(slide17) # Play the created story! story.play()","title":"Trump Twitter Tirade"},{"location":"examples/usbudget/","text":"US Federal R&D budget US Federal R&D budget In this more involved example, we explore the history of the US Federal R&D budget between 1955-2020. On top of the base functionality, this story showcases: Styling the overall Story Setting the size of the Story Slides with multiple steps import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/usbudget/usbudget.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Set the style of the charts in the story style = Style( { \"plot\": { \"yAxis\": { \"label\": { \"fontSize\": \"1em\", \"paddingRight\": \"1.2em\", }, \"title\": {\"color\": \"#ffffff00\"}, }, \"xAxis\": { \"label\": { \"angle\": \"2.5\", \"fontSize\": \"1.1em\", \"paddingRight\": \"0em\", \"paddingTop\": \"1em\", }, \"title\": {\"fontSize\": \"0.8em\", \"paddingTop\": \"2.5em\"}, }, }, \"logo\": {\"width\": \"5em\"}, } ) # Create story object, add data and style settings to it story = Story(data=data, style=style) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Add the first slide, # containing a single animation step that sets the initial chart slide1 = Slide( Step( # Only include rows where the Function value != Defense # Note, filters currently only accept JavaScript style filters, # hence the \"!==\", rather than \"!=\" Data.filter(\"record.Function !== 'Defense'\"), Config( { \"channels\": { \"y\": { \"set\": [\"Amount[B$]\", \"Function\"], # Set the range of the y-axis # to the min and max of the data being shown # default value is 110% of the maximum value \"range\": {\"min\": \"0%\", \"max\": \"100%\"}, }, \"x\": {\"set\": [\"Year\"]}, \"color\": \"Function\", }, \"title\": \"Stacked Area Chart - U.S. R&D Budget in 1955-2020\", \"geometry\": \"area\", } ), ) ) # Add the slide to the story story.add_slide(slide1) # Show components side-by-side slide2 = Slide( Step( Config( { \"split\": True, \"title\": \"Show Components Side by Side\", } ) ) ) story.add_slide(slide2) # This slide contains multiple steps # Note that the slide is created as an empty object, # then steps are added to it one-by-one slide3 = Slide() # Step 1 - let's get back to the previous view slide3.add_step(Step(Config({\"split\": False}))) # Step 2 - Add the defense function to the chart by removing it from the filter slide3.add_step( Step( Data.filter(None), Config( {\"title\": \"Add New Category While Keeping the Context\"} ), ) ) # Add the multi-step slide to the story, just like any other slide story.add_slide(slide3) # Show share of components slide4 = Slide( Step( Config( { \"align\": \"stretch\", \"title\": \"Show Share of Components (%)\", } ) ) ) story.add_slide(slide4) # Compare data from 1955 and 2020 slide5 = Slide() # Step 1 - switch back to value instead of percentage slide5.add_step(Step(Config({\"align\": \"none\"}))) # Step 2 - switch to a stacked column chart by changing the geometry slide5.add_step( Step( Config( { \"geometry\": \"rectangle\", } ) ) ) # Step 3 - zoom to data from the first and last years slide5.add_step( Step( Data.filter( \"record.Year === '1955' || record.Year === '2020' \" ), Config( { \"title\": \"Zoom to Specific Elements\", } ), ), ) story.add_slide(slide5) # Group & rearrange elements for comparison slide6 = Slide() slide6.add_step( Step( Config( { \"x\": [\"Year\", \"Function\"], \"y\": \"Amount[B$]\", \"label\": \"Amount[B$]\", \"title\": \"Group & Rearrange for Better Comparison\", } ) ) ) slide6.add_step(Step(Config({\"x\": [\"Function\", \"Year\"]}))) story.add_slide(slide6) # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Set a handler that prevents showing the year values that are not divisible by 5 handler = \"\"\" let Year = parseFloat(event.data.text); if (!isNaN(Year) && Year > 1950 && Year < 2020 && Year % 5 !== 0) { event.preventDefault(); } \"\"\" # Add handler to the plot-axis-label-draw event so that it takes effect story.add_event(\"plot-axis-label-draw\", handler) # If you want to save the story as an interactive HTML # (containing only the output of the previous cell), # use the following command: # story.export_to_html(filename=\"mystory.html\") # Play the created story! story.play()","title":"US Federal R&D budget"},{"location":"examples/usbudget/#us-federal-rd-budget","text":"US Federal R&D budget In this more involved example, we explore the history of the US Federal R&D budget between 1955-2020. On top of the base functionality, this story showcases: Styling the overall Story Setting the size of the Story Slides with multiple steps import pandas as pd from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step # Create data object, read csv to data frame and add data frame to data object data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/examples/usbudget/usbudget.csv\", dtype={\"Year\": str}, ) data.add_df(df) # Set the style of the charts in the story style = Style( { \"plot\": { \"yAxis\": { \"label\": { \"fontSize\": \"1em\", \"paddingRight\": \"1.2em\", }, \"title\": {\"color\": \"#ffffff00\"}, }, \"xAxis\": { \"label\": { \"angle\": \"2.5\", \"fontSize\": \"1.1em\", \"paddingRight\": \"0em\", \"paddingTop\": \"1em\", }, \"title\": {\"fontSize\": \"0.8em\", \"paddingTop\": \"2.5em\"}, }, }, \"logo\": {\"width\": \"5em\"}, } ) # Create story object, add data and style settings to it story = Story(data=data, style=style) # Set the size of the HTML element # that appears within the notebook story.set_size(\"100%\", \"400px\") # Add the first slide, # containing a single animation step that sets the initial chart slide1 = Slide( Step( # Only include rows where the Function value != Defense # Note, filters currently only accept JavaScript style filters, # hence the \"!==\", rather than \"!=\" Data.filter(\"record.Function !== 'Defense'\"), Config( { \"channels\": { \"y\": { \"set\": [\"Amount[B$]\", \"Function\"], # Set the range of the y-axis # to the min and max of the data being shown # default value is 110% of the maximum value \"range\": {\"min\": \"0%\", \"max\": \"100%\"}, }, \"x\": {\"set\": [\"Year\"]}, \"color\": \"Function\", }, \"title\": \"Stacked Area Chart - U.S. R&D Budget in 1955-2020\", \"geometry\": \"area\", } ), ) ) # Add the slide to the story story.add_slide(slide1) # Show components side-by-side slide2 = Slide( Step( Config( { \"split\": True, \"title\": \"Show Components Side by Side\", } ) ) ) story.add_slide(slide2) # This slide contains multiple steps # Note that the slide is created as an empty object, # then steps are added to it one-by-one slide3 = Slide() # Step 1 - let's get back to the previous view slide3.add_step(Step(Config({\"split\": False}))) # Step 2 - Add the defense function to the chart by removing it from the filter slide3.add_step( Step( Data.filter(None), Config( {\"title\": \"Add New Category While Keeping the Context\"} ), ) ) # Add the multi-step slide to the story, just like any other slide story.add_slide(slide3) # Show share of components slide4 = Slide( Step( Config( { \"align\": \"stretch\", \"title\": \"Show Share of Components (%)\", } ) ) ) story.add_slide(slide4) # Compare data from 1955 and 2020 slide5 = Slide() # Step 1 - switch back to value instead of percentage slide5.add_step(Step(Config({\"align\": \"none\"}))) # Step 2 - switch to a stacked column chart by changing the geometry slide5.add_step( Step( Config( { \"geometry\": \"rectangle\", } ) ) ) # Step 3 - zoom to data from the first and last years slide5.add_step( Step( Data.filter( \"record.Year === '1955' || record.Year === '2020' \" ), Config( { \"title\": \"Zoom to Specific Elements\", } ), ), ) story.add_slide(slide5) # Group & rearrange elements for comparison slide6 = Slide() slide6.add_step( Step( Config( { \"x\": [\"Year\", \"Function\"], \"y\": \"Amount[B$]\", \"label\": \"Amount[B$]\", \"title\": \"Group & Rearrange for Better Comparison\", } ) ) ) slide6.add_step(Step(Config({\"x\": [\"Function\", \"Year\"]}))) story.add_slide(slide6) # Switch on the tooltip that appears # when the user hovers the mouse over a chart element story.set_feature(\"tooltip\", True) # Set a handler that prevents showing the year values that are not divisible by 5 handler = \"\"\" let Year = parseFloat(event.data.text); if (!isNaN(Year) && Year > 1950 && Year < 2020 && Year % 5 !== 0) { event.preventDefault(); } \"\"\" # Add handler to the plot-axis-label-draw event so that it takes effect story.add_event(\"plot-axis-label-draw\", handler) # If you want to save the story as an interactive HTML # (containing only the output of the previous cell), # use the following command: # story.export_to_html(filename=\"mystory.html\") # Play the created story! story.play()","title":"US Federal R&amp;D budget"},{"location":"reference/ipyvizzustory/","text":"Build, present and share animated data stories in Jupyter Notebook and similar environments. ipyvizzu-story package consists of two main parts: Storylib : environment independent modules Env : environment dependent modules ipyvizzu-story package tries to figure out the environment and import the correct type of Story , however Story could be imported with full path. ipyvizzu-story package imports the following objects in __init__.py : Story from Env.py.story or Env.ipy.story or Env.st.story Step Slide ipyvizzustory.get_story() A method for returning the appropriate Story for the environment. Returns: Type Description Union [ Story , Story , Story ] The appropriate Story for the environment. Source code in src/ipyvizzustory/__init__.py def get_story(): \"\"\" A method for returning the appropriate Story for the environment. Returns: (Union[ipyvizzustory.env.py.story.Story, ipyvizzustory.env.ipy.story.Story, ipyvizzustory.env.st.story.Story]): The appropriate `Story` for the environment. \"\"\" # pylint: disable=line-too-long return JupyterStory or StreamlitStory or PythonStory # type: ignore ipyvizzustory.Story = get_story() module-attribute Available types: Jupyter/IPython Story Streamlit Story Panel Story Python Story ipyvizzustory.Slide Bases: list A class for representing a slide of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Slide(list): \"\"\"A class for representing a slide of a presentation story.\"\"\" def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step) __init__(step=None) Slide constructor. Parameters: Name Type Description Default step Optional [ Step ] The first step can also be added to the slide in the constructor. None Example Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) add_step(step) A method for adding a step for the slide. Parameters: Name Type Description Default step Step The next step of the slide. required Raises: Type Description TypeError If the type of the step is not Step . Example Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step) ipyvizzustory.Step Bases: dict A class for representing a step of a slide. Source code in src/ipyvizzustory/storylib/story.py class Step(dict): \"\"\"A class for representing a step of a slide.\"\"\" def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options def _update(self, *animations: Union[Data, Style, Config]) -> None: for animation in animations: if not animation or type(animation) not in [ Data, Style, Config, ]: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data, Style or Config.\") if type(animation) == Data: # pylint: disable=unidiomatic-typecheck animation = DataFilter(animation) builded_animation = animation.build() common_keys = set(builded_animation).intersection(set(self)) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") self.update(builded_animation) __init__(*animations, **anim_options) Step constructor. Parameters: Name Type Description Default *animations Union [ Data , Style , Config ] List of Data , Config and Style objects. A Step can contain each of the above once. () **anim_options Optional [ Union [ str , int , float , dict ]] Animation options such as duration. {} Raises: Type Description ValueError If animations are not set. Example Initialize a step with a Config object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) Source code in src/ipyvizzustory/storylib/story.py def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options","title":"Code reference"},{"location":"reference/ipyvizzustory/#ipyvizzustory.get_story","text":"A method for returning the appropriate Story for the environment. Returns: Type Description Union [ Story , Story , Story ] The appropriate Story for the environment. Source code in src/ipyvizzustory/__init__.py def get_story(): \"\"\" A method for returning the appropriate Story for the environment. Returns: (Union[ipyvizzustory.env.py.story.Story, ipyvizzustory.env.ipy.story.Story, ipyvizzustory.env.st.story.Story]): The appropriate `Story` for the environment. \"\"\" # pylint: disable=line-too-long return JupyterStory or StreamlitStory or PythonStory # type: ignore","title":"get_story()"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Story","text":"Available types: Jupyter/IPython Story Streamlit Story Panel Story Python Story","title":"Story"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Slide","text":"Bases: list A class for representing a slide of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Slide(list): \"\"\"A class for representing a slide of a presentation story.\"\"\" def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step)","title":"Slide"},{"location":"reference/ipyvizzustory/#ipyvizzustory.storylib.story.Slide.__init__","text":"Slide constructor. Parameters: Name Type Description Default step Optional [ Step ] The first step can also be added to the slide in the constructor. None Example Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step)","title":"__init__()"},{"location":"reference/ipyvizzustory/#ipyvizzustory.storylib.story.Slide.add_step","text":"A method for adding a step for the slide. Parameters: Name Type Description Default step Step The next step of the slide. required Raises: Type Description TypeError If the type of the step is not Step . Example Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step)","title":"add_step()"},{"location":"reference/ipyvizzustory/#ipyvizzustory.Step","text":"Bases: dict A class for representing a step of a slide. Source code in src/ipyvizzustory/storylib/story.py class Step(dict): \"\"\"A class for representing a step of a slide.\"\"\" def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options def _update(self, *animations: Union[Data, Style, Config]) -> None: for animation in animations: if not animation or type(animation) not in [ Data, Style, Config, ]: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data, Style or Config.\") if type(animation) == Data: # pylint: disable=unidiomatic-typecheck animation = DataFilter(animation) builded_animation = animation.build() common_keys = set(builded_animation).intersection(set(self)) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") self.update(builded_animation)","title":"Step"},{"location":"reference/ipyvizzustory/#ipyvizzustory.storylib.story.Step.__init__","text":"Step constructor. Parameters: Name Type Description Default *animations Union [ Data , Style , Config ] List of Data , Config and Style objects. A Step can contain each of the above once. () **anim_options Optional [ Union [ str , int , float , dict ]] Animation options such as duration. {} Raises: Type Description ValueError If animations are not set. Example Initialize a step with a Config object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) Source code in src/ipyvizzustory/storylib/story.py def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options","title":"__init__()"},{"location":"reference/ipyvizzustory/__version__/","text":"ipyvizzustory.__version__ A module for storing version number.","title":"  version  "},{"location":"reference/ipyvizzustory/__version__/#ipyvizzustory.__version__","text":"A module for storing version number.","title":"__version__"},{"location":"reference/ipyvizzustory/env/","text":"ipyvizzustory.env Environment dependent modules. ipyvizzustory.env.ipy Jupyter / IPython environment dependent modules. story A module for working with presentation stories in Jupyter / IPython environment. Story Bases: Story A class for representing a presentation story in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html())) __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/ipy/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html())) ipyvizzustory.env.py Python environment dependent modules. story A module for working with presentation stories in Python environment. Story Bases: Story A class for representing a presentation story in Python environment. Source code in src/ipyvizzustory/env/py/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Python` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html() __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/py/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for returning the assembled HTML code in Python environment. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/env/py/story.py def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html() ipyvizzustory.env.st Streamlit environment dependent modules. story A module for working with presentation stories in Streamlit environment. Story Bases: Story A class for representing a presentation story in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, ) __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/st/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, ) ipyvizzustory.env.pn Panel environment dependent modules. story A module for working with presentation stories in Panel environment. Story Bases: Story A class for representing a presentation story in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable() __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/pn/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"Env"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env","text":"Environment dependent modules.","title":"env"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy","text":"Jupyter / IPython environment dependent modules.","title":"ipy"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story","text":"A module for working with presentation stories in Jupyter / IPython environment.","title":"story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story.Story","text":"Bases: Story A class for representing a presentation story in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"Story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/ipy/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.ipy.story.Story.play","text":"A method for displaying the assembled HTML code in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"play()"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py","text":"Python environment dependent modules.","title":"py"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story","text":"A module for working with presentation stories in Python environment.","title":"story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story.Story","text":"Bases: Story A class for representing a presentation story in Python environment. Source code in src/ipyvizzustory/env/py/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Python` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"Story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/py/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.py.story.Story.play","text":"A method for returning the assembled HTML code in Python environment. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/env/py/story.py def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"play()"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st","text":"Streamlit environment dependent modules.","title":"st"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story","text":"A module for working with presentation stories in Streamlit environment.","title":"story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story.Story","text":"Bases: Story A class for representing a presentation story in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"Story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/st/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.st.story.Story.play","text":"A method for displaying the assembled HTML code in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"play()"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn","text":"Panel environment dependent modules.","title":"pn"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story","text":"A module for working with presentation stories in Panel environment.","title":"story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story.Story","text":"Bases: Story A class for representing a presentation story in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"Story"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/pn/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/#ipyvizzustory.env.pn.story.Story.play","text":"A method for displaying the assembled HTML code in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"play()"},{"location":"reference/ipyvizzustory/env/ipy/","text":"ipyvizzustory.env.ipy Jupyter / IPython environment dependent modules. ipyvizzustory.env.ipy.story A module for working with presentation stories in Jupyter / IPython environment. Story Bases: Story A class for representing a presentation story in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html())) __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/ipy/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"Ipy"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy","text":"Jupyter / IPython environment dependent modules.","title":"ipy"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story","text":"A module for working with presentation stories in Jupyter / IPython environment.","title":"story"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story.Story","text":"Bases: Story A class for representing a presentation story in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"Story"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/ipy/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/ipy/#ipyvizzustory.env.ipy.story.Story.play","text":"A method for displaying the assembled HTML code in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"play()"},{"location":"reference/ipyvizzustory/env/ipy/story/","text":"ipyvizzustory.env.ipy.story A module for working with presentation stories in Jupyter / IPython environment. ipyvizzustory.env.ipy.story.Story Bases: Story A class for representing a presentation story in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html())) __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/ipy/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"Story"},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story","text":"A module for working with presentation stories in Jupyter / IPython environment.","title":"story"},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story.Story","text":"Bases: Story A class for representing a presentation story in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Jupyter`/`IPython` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"Story"},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/ipy/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/ipy/story/#ipyvizzustory.env.ipy.story.Story.play","text":"A method for displaying the assembled HTML code in Jupyter / IPython environment. Source code in src/ipyvizzustory/env/ipy/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Jupyter`/`IPython` environment.\"\"\" display_html(HTML(self.to_html()))","title":"play()"},{"location":"reference/ipyvizzustory/env/pn/","text":"ipyvizzustory.env.pn Panel environment dependent modules. ipyvizzustory.env.pn.story A module for working with presentation stories in Panel environment. Story Bases: Story A class for representing a presentation story in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable() __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/pn/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"Pn"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn","text":"Panel environment dependent modules.","title":"pn"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story","text":"A module for working with presentation stories in Panel environment.","title":"story"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story.Story","text":"Bases: Story A class for representing a presentation story in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"Story"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/pn/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/pn/#ipyvizzustory.env.pn.story.Story.play","text":"A method for displaying the assembled HTML code in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"play()"},{"location":"reference/ipyvizzustory/env/pn/story/","text":"ipyvizzustory.env.pn.story A module for working with presentation stories in Panel environment. ipyvizzustory.env.pn.story.Story Bases: Story A class for representing a presentation story in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable() __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/pn/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"Story"},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story","text":"A module for working with presentation stories in Panel environment.","title":"story"},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story.Story","text":"Bases: Story A class for representing a presentation story in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Panel` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"Story"},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/pn/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/pn/story/#ipyvizzustory.env.pn.story.Story.play","text":"A method for displaying the assembled HTML code in Panel environment. Source code in src/ipyvizzustory/env/pn/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Panel` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() HTML( self.to_html(), width=_width, height=_height, ).servable()","title":"play()"},{"location":"reference/ipyvizzustory/env/py/","text":"ipyvizzustory.env.py Python environment dependent modules. ipyvizzustory.env.py.story A module for working with presentation stories in Python environment. Story Bases: Story A class for representing a presentation story in Python environment. Source code in src/ipyvizzustory/env/py/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Python` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html() __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/py/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for returning the assembled HTML code in Python environment. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/env/py/story.py def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"Py"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py","text":"Python environment dependent modules.","title":"py"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story","text":"A module for working with presentation stories in Python environment.","title":"story"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story.Story","text":"Bases: Story A class for representing a presentation story in Python environment. Source code in src/ipyvizzustory/env/py/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Python` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"Story"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/py/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/py/#ipyvizzustory.env.py.story.Story.play","text":"A method for returning the assembled HTML code in Python environment. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/env/py/story.py def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"play()"},{"location":"reference/ipyvizzustory/env/py/story/","text":"ipyvizzustory.env.py.story A module for working with presentation stories in Python environment. ipyvizzustory.env.py.story.Story Bases: Story A class for representing a presentation story in Python environment. Source code in src/ipyvizzustory/env/py/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Python` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html() __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/py/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for returning the assembled HTML code in Python environment. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/env/py/story.py def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"Story"},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story","text":"A module for working with presentation stories in Python environment.","title":"story"},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story.Story","text":"Bases: Story A class for representing a presentation story in Python environment. Source code in src/ipyvizzustory/env/py/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Python` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"Story"},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/py/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/py/story/#ipyvizzustory.env.py.story.Story.play","text":"A method for returning the assembled HTML code in Python environment. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/env/py/story.py def play(self) -> str: \"\"\" A method for returning the assembled `HTML` code in `Python` environment. Returns: The assembled `HTML` code as string. \"\"\" return self.to_html()","title":"play()"},{"location":"reference/ipyvizzustory/env/st/","text":"ipyvizzustory.env.st Streamlit environment dependent modules. ipyvizzustory.env.st.story A module for working with presentation stories in Streamlit environment. Story Bases: Story A class for representing a presentation story in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, ) __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/st/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"St"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st","text":"Streamlit environment dependent modules.","title":"st"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story","text":"A module for working with presentation stories in Streamlit environment.","title":"story"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story.Story","text":"Bases: Story A class for representing a presentation story in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"Story"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/st/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/st/#ipyvizzustory.env.st.story.Story.play","text":"A method for displaying the assembled HTML code in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"play()"},{"location":"reference/ipyvizzustory/env/st/story/","text":"ipyvizzustory.env.st.story A module for working with presentation stories in Streamlit environment. ipyvizzustory.env.st.story.Story Bases: Story A class for representing a presentation story in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, ) __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/st/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) play() A method for displaying the assembled HTML code in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"Story"},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story","text":"A module for working with presentation stories in Streamlit environment.","title":"story"},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story.Story","text":"Bases: Story A class for representing a presentation story in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py class Story(StoryLib): \"\"\"A class for representing a presentation story in `Streamlit` environment.\"\"\" def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style) def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"Story"},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Source code in src/ipyvizzustory/env/st/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. \"\"\" super().__init__(data=data, style=style)","title":"__init__()"},{"location":"reference/ipyvizzustory/env/st/story/#ipyvizzustory.env.st.story.Story.play","text":"A method for displaying the assembled HTML code in Streamlit environment. Source code in src/ipyvizzustory/env/st/story.py def play(self) -> None: \"\"\"A method for displaying the assembled `HTML` code in `Streamlit` environment.\"\"\" _width, _height = self._size.get_width_height_in_pixels() html( self.to_html(), width=_width, height=_height, )","title":"play()"},{"location":"reference/ipyvizzustory/storylib/","text":"ipyvizzustory.storylib Environment independent modules. ipyvizzustory.storylib.story A module for working with presentation stories. Step Bases: dict A class for representing a step of a slide. Source code in src/ipyvizzustory/storylib/story.py class Step(dict): \"\"\"A class for representing a step of a slide.\"\"\" def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options def _update(self, *animations: Union[Data, Style, Config]) -> None: for animation in animations: if not animation or type(animation) not in [ Data, Style, Config, ]: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data, Style or Config.\") if type(animation) == Data: # pylint: disable=unidiomatic-typecheck animation = DataFilter(animation) builded_animation = animation.build() common_keys = set(builded_animation).intersection(set(self)) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") self.update(builded_animation) __init__(*animations, **anim_options) Step constructor. Parameters: Name Type Description Default *animations Union [ Data , Style , Config ] List of Data , Config and Style objects. A Step can contain each of the above once. () **anim_options Optional [ Union [ str , int , float , dict ]] Animation options such as duration. {} Raises: Type Description ValueError If animations are not set. Example Initialize a step with a Config object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) Source code in src/ipyvizzustory/storylib/story.py def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options Slide Bases: list A class for representing a slide of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Slide(list): \"\"\"A class for representing a slide of a presentation story.\"\"\" def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step) __init__(step=None) Slide constructor. Parameters: Name Type Description Default step Optional [ Step ] The first step can also be added to the slide in the constructor. None Example Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) add_step(step) A method for adding a step for the slide. Parameters: Name Type Description Default step Step The next step of the slide. required Raises: Type Description TypeError If the type of the step is not Step . Example Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step) StorySize A class for representing the size of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class StorySize: \"\"\"A class for representing the size of a presentation story.\"\"\" def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\" @staticmethod def _convert_to_pixel_or_return(value: Any) -> Optional[str]: if StorySize._is_int(value) or StorySize._is_float(value): return str(value) + \"px\" return value @staticmethod def _is_int(value: Any) -> bool: if isinstance(value, int): return True if isinstance(value, str): if re.search(r\"^[-+]?[0-9]+$\", value): return True return False @staticmethod def _is_float(value: Any) -> bool: if isinstance(value, float): return True if isinstance(value, str): if re.search(r\"^[+-]?[0-9]+\\.[0-9]+$\", value): return True return False @property def width(self) -> Optional[str]: \"\"\" A property for storing the width of a presentation story. Returns: The width of a presentation story. \"\"\" return self._width @property def height(self) -> Optional[str]: \"\"\" A property for storing the height of a presentation story. Returns: The height of a presentation story. \"\"\" return self._height @property def aspect_ratio(self) -> Optional[Union[int, float, str]]: \"\"\" A property for storing the aspect ratio of a presentation story. Returns: The aspect ratio of a presentation story. \"\"\" return self._aspect_ratio @property def style(self) -> str: \"\"\" A property for storing the style of a presentation story. Note: If neither `width`, `height` nor `aspect_ratio` is set, it returns an empty string. Returns: The cssText width and height of a presentation story. \"\"\" return self._style @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height) width: Optional[str] property A property for storing the width of a presentation story. Returns: Type Description Optional [ str ] The width of a presentation story. height: Optional[str] property A property for storing the height of a presentation story. Returns: Type Description Optional [ str ] The height of a presentation story. aspect_ratio: Optional[Union[int, float, str]] property A property for storing the aspect ratio of a presentation story. Returns: Type Description Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story. style: str property A property for storing the style of a presentation story. Note If neither width , height nor aspect_ratio is set, it returns an empty string. Returns: Type Description str The cssText width and height of a presentation story. __init__(width=None, height=None, aspect_ratio=None) StorySize constructor. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of a presentation story. None height Optional [ Union [ int , float , str ]] The height of a presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story. None Raises: Type Description ValueError If width, height and aspect_ratio are set together. Source code in src/ipyvizzustory/storylib/story.py def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\" is_pixel(value) staticmethod A static method for checking the type of the given value. Parameters: Name Type Description Default value Any The value to check. required Returns: Type Description bool True if the value is pixel, False otherwise. Source code in src/ipyvizzustory/storylib/story.py @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False get_width_height_in_pixels() A method for returning the width and height in pixels. Raises: Type Description ValueError If width and height are not in pixels when aspect_ratio is not set. ValueError If width or height is not in pixel when aspect_ratio is set. ValueError If aspect_ratio is not a float when aspect_ratio is set. Returns: Type Description Tuple [ int , int ] The width and height in pixels as int. Source code in src/ipyvizzustory/storylib/story.py def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height) Story Bases: dict A class for representing a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Story(dict): \"\"\"A class for representing a presentation story.\"\"\" # pylint: disable=too-many-instance-attributes def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = [] @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu-story` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]): self._analytics = bool(analytics) @property def vizzu(self) -> Optional[str]: \"\"\" A property for changing `vizzu` url. Note: If `None`, vizzu url is set by `vizzu-story`. Returns: `Vizzu` url. \"\"\" return self._vizzu @vizzu.setter def vizzu(self, url: str) -> None: self._vizzu = url @property def vizzu_story(self) -> str: \"\"\" A property for changing `vizzu-story` url. Returns: `Vizzu-story` url. \"\"\" return self._vizzu_story @vizzu_story.setter def vizzu_story(self, url: str) -> None: self._vizzu_story = url @property def start_slide(self) -> Optional[int]: \"\"\" A property for setting the starter slide. Returns: Number of the starter slide. \"\"\" return self._start_slide @start_slide.setter def start_slide(self, number: int) -> None: self._start_slide = number def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide) def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\") def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" ) def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio) def _repr_html_(self) -> str: return self.to_html() def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), ) def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html()) analytics: bool property writable A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. Returns: Type Description bool The value of the property (default True ). vizzu: Optional[str] property writable A property for changing vizzu url. Note If None , vizzu url is set by vizzu-story . Returns: Type Description Optional [ str ] Vizzu url. vizzu_story: str property writable A property for changing vizzu-story url. Returns: Type Description str Vizzu-story url. start_slide: Optional[int] property writable A property for setting the starter slide. Returns: Type Description Optional [ int ] Number of the starter slide. __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Raises: Type Description TypeError If the type of the data is not ipyvizzu.Data . TypeError If the type of the style is not ipyvizzu.Style . Example Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = [] add_slide(slide) A method for adding a slide for the story. Parameters: Name Type Description Default slide Slide The next slide of the story. required Raises: Type Description TypeError If the type of the slide is not Slide . Example Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide) set_feature(name, enabled) A method for enabling or disabling a feature of the story. Parameters: Name Type Description Default name str The name of the feature. required enabled bool True if enabled or False if disabled. required Example Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) Source code in src/ipyvizzustory/storylib/story.py def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\") add_event(event, handler) A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The handler JavaScript expression as string. required Example Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzustory/storylib/story.py def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" ) set_size(width=None, height=None, aspect_ratio=None) A method for setting width/height settings. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of the presentation story. None height Optional [ Union [ int , float , str ]] The height of the presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of the presentation story. None Example Change the size of the story: story.set_size(\"100%\", \"400px\") Source code in src/ipyvizzustory/storylib/story.py def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio) to_html() A method for assembling the HTML code. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/storylib/story.py def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), ) export_to_html(filename) A method for exporting the story into HTML file. Parameters: Name Type Description Default filename PathLike The path of the target HTML file. required Source code in src/ipyvizzustory/storylib/story.py def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html()) ipyvizzustory.storylib.animation A module for working with chart animations. DataFilter Bases: Data A class for representing a data filter. Source code in src/ipyvizzustory/storylib/animation.py class DataFilter(Data): \"\"\"A class for representing a data filter.\"\"\" def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]} build() A method for overwriting Data.build method. Data initialized with a DataFilter must contain only a filter. Returns: Type Description dict A dictionary contains the filter key with the filter expression. Raises: Type Description ValueError If DataFilter does not contain a filter or contains anything else. Source code in src/ipyvizzustory/storylib/animation.py def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]} ipyvizzustory.storylib.template A module for storing the HTML templates. VIZZU_STORY: str = 'https://cdn.jsdelivr.net/npm/vizzu-story@0.6/dist/vizzu-story.min.js' module-attribute A variable for storing the default url of the vizzu-story package. DISPLAY_INDENT: str = ' ' module-attribute A variable for storing the default indent in the HTML template. DISPLAY_TEMPLATE: str = '\\n<div>\\n <vizzu-player id=\"{id}\" {vizzu} {start_slide} controller></vizzu-player>\\n <script type=\"module\">\\n import VizzuPlayer from \"{vizzu_story}\";\\n\\n class IpyvizzuStory {{\\n static version = \"{version}\";\\n static analytics = undefined;\\n\\n static changeAnalyticsTo(analytics) {{\\n if (IpyvizzuStory.analytics !== analytics) {{\\n console.log(\"ipyvizzu-story gather usage stats:\", analytics);\\n IpyvizzuStory.analytics = analytics;\\n }}\\n if (analytics) {{\\n IpyvizzuStory._addHeadScript();\\n }} else {{\\n IpyvizzuStory._removeScript(\"ipyvizzu-story-analytics-head\");\\n }}\\n }}\\n\\n static _addHeadScript() {{\\n const scriptId = \"ipyvizzu-story-analytics-head\";\\n if (!IpyvizzuStory._isScriptAppended(scriptId)) {{\\n const script = document.createElement(\"script\");\\n script.defer = true;\\n script.src = \"https://plausible.io/js/script.local.js\";\\n script.dataset.domain = \"usage.ipyvizzu-story.com\";\\n script.id = scriptId;\\n document.getElementsByTagName(\"head\")[0].appendChild(script);\\n }}\\n }}\\n\\n static _isScriptAppended(id) {{\\n return document.querySelector(`script[id=\"${{id}}\"]`) !== null;\\n }}\\n\\n static _removeScript(id) {{\\n const script = document.getElementById(id);\\n if (script) script.remove();\\n }}\\n }}\\n\\n if (IpyvizzuStory.version !== window.IpyvizzuStory?.version) {{\\n window.IpyvizzuStory = IpyvizzuStory;\\n console.log(`ipyvizzu-story ${{IpyvizzuStory.version}}`);\\n }}\\n\\n window.IpyvizzuStory?.changeAnalyticsTo({analytics});\\n\\n const vp = document.getElementById(\"{id}\");\\n vp.initializing.then(chart => {{\\n const lib = vp.Vizzu;\\n\\n // story.set_size()\\n {chart_size}\\n\\n // story.set_feature()\\n {chart_features}\\n // story.add_event()\\n {chart_events}\\n\\n const vizzuPlayerData = {vizzu_player_data};\\n vp.slides = vizzuPlayerData;\\n }});\\n </script>\\n</div>\\n' module-attribute A variable for storing the vizzu-story HTML template.","title":"Storylib"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib","text":"Environment independent modules.","title":"storylib"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story","text":"A module for working with presentation stories.","title":"story"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Step","text":"Bases: dict A class for representing a step of a slide. Source code in src/ipyvizzustory/storylib/story.py class Step(dict): \"\"\"A class for representing a step of a slide.\"\"\" def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options def _update(self, *animations: Union[Data, Style, Config]) -> None: for animation in animations: if not animation or type(animation) not in [ Data, Style, Config, ]: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data, Style or Config.\") if type(animation) == Data: # pylint: disable=unidiomatic-typecheck animation = DataFilter(animation) builded_animation = animation.build() common_keys = set(builded_animation).intersection(set(self)) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") self.update(builded_animation)","title":"Step"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Step.__init__","text":"Step constructor. Parameters: Name Type Description Default *animations Union [ Data , Style , Config ] List of Data , Config and Style objects. A Step can contain each of the above once. () **anim_options Optional [ Union [ str , int , float , dict ]] Animation options such as duration. {} Raises: Type Description ValueError If animations are not set. Example Initialize a step with a Config object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) Source code in src/ipyvizzustory/storylib/story.py def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Slide","text":"Bases: list A class for representing a slide of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Slide(list): \"\"\"A class for representing a slide of a presentation story.\"\"\" def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step)","title":"Slide"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Slide.__init__","text":"Slide constructor. Parameters: Name Type Description Default step Optional [ Step ] The first step can also be added to the slide in the constructor. None Example Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step)","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Slide.add_step","text":"A method for adding a step for the slide. Parameters: Name Type Description Default step Step The next step of the slide. required Raises: Type Description TypeError If the type of the step is not Step . Example Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step)","title":"add_step()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize","text":"A class for representing the size of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class StorySize: \"\"\"A class for representing the size of a presentation story.\"\"\" def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\" @staticmethod def _convert_to_pixel_or_return(value: Any) -> Optional[str]: if StorySize._is_int(value) or StorySize._is_float(value): return str(value) + \"px\" return value @staticmethod def _is_int(value: Any) -> bool: if isinstance(value, int): return True if isinstance(value, str): if re.search(r\"^[-+]?[0-9]+$\", value): return True return False @staticmethod def _is_float(value: Any) -> bool: if isinstance(value, float): return True if isinstance(value, str): if re.search(r\"^[+-]?[0-9]+\\.[0-9]+$\", value): return True return False @property def width(self) -> Optional[str]: \"\"\" A property for storing the width of a presentation story. Returns: The width of a presentation story. \"\"\" return self._width @property def height(self) -> Optional[str]: \"\"\" A property for storing the height of a presentation story. Returns: The height of a presentation story. \"\"\" return self._height @property def aspect_ratio(self) -> Optional[Union[int, float, str]]: \"\"\" A property for storing the aspect ratio of a presentation story. Returns: The aspect ratio of a presentation story. \"\"\" return self._aspect_ratio @property def style(self) -> str: \"\"\" A property for storing the style of a presentation story. Note: If neither `width`, `height` nor `aspect_ratio` is set, it returns an empty string. Returns: The cssText width and height of a presentation story. \"\"\" return self._style @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height)","title":"StorySize"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.width","text":"A property for storing the width of a presentation story. Returns: Type Description Optional [ str ] The width of a presentation story.","title":"width"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.height","text":"A property for storing the height of a presentation story. Returns: Type Description Optional [ str ] The height of a presentation story.","title":"height"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.aspect_ratio","text":"A property for storing the aspect ratio of a presentation story. Returns: Type Description Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story.","title":"aspect_ratio"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.style","text":"A property for storing the style of a presentation story. Note If neither width , height nor aspect_ratio is set, it returns an empty string. Returns: Type Description str The cssText width and height of a presentation story.","title":"style"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.__init__","text":"StorySize constructor. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of a presentation story. None height Optional [ Union [ int , float , str ]] The height of a presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story. None Raises: Type Description ValueError If width, height and aspect_ratio are set together. Source code in src/ipyvizzustory/storylib/story.py def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\"","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.is_pixel","text":"A static method for checking the type of the given value. Parameters: Name Type Description Default value Any The value to check. required Returns: Type Description bool True if the value is pixel, False otherwise. Source code in src/ipyvizzustory/storylib/story.py @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False","title":"is_pixel()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.StorySize.get_width_height_in_pixels","text":"A method for returning the width and height in pixels. Raises: Type Description ValueError If width and height are not in pixels when aspect_ratio is not set. ValueError If width or height is not in pixel when aspect_ratio is set. ValueError If aspect_ratio is not a float when aspect_ratio is set. Returns: Type Description Tuple [ int , int ] The width and height in pixels as int. Source code in src/ipyvizzustory/storylib/story.py def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height)","title":"get_width_height_in_pixels()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story","text":"Bases: dict A class for representing a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Story(dict): \"\"\"A class for representing a presentation story.\"\"\" # pylint: disable=too-many-instance-attributes def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = [] @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu-story` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]): self._analytics = bool(analytics) @property def vizzu(self) -> Optional[str]: \"\"\" A property for changing `vizzu` url. Note: If `None`, vizzu url is set by `vizzu-story`. Returns: `Vizzu` url. \"\"\" return self._vizzu @vizzu.setter def vizzu(self, url: str) -> None: self._vizzu = url @property def vizzu_story(self) -> str: \"\"\" A property for changing `vizzu-story` url. Returns: `Vizzu-story` url. \"\"\" return self._vizzu_story @vizzu_story.setter def vizzu_story(self, url: str) -> None: self._vizzu_story = url @property def start_slide(self) -> Optional[int]: \"\"\" A property for setting the starter slide. Returns: Number of the starter slide. \"\"\" return self._start_slide @start_slide.setter def start_slide(self, number: int) -> None: self._start_slide = number def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide) def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\") def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" ) def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio) def _repr_html_(self) -> str: return self.to_html() def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), ) def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html())","title":"Story"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.analytics","text":"A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. Returns: Type Description bool The value of the property (default True ).","title":"analytics"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.vizzu","text":"A property for changing vizzu url. Note If None , vizzu url is set by vizzu-story . Returns: Type Description Optional [ str ] Vizzu url.","title":"vizzu"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.vizzu_story","text":"A property for changing vizzu-story url. Returns: Type Description str Vizzu-story url.","title":"vizzu_story"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.start_slide","text":"A property for setting the starter slide. Returns: Type Description Optional [ int ] Number of the starter slide.","title":"start_slide"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Raises: Type Description TypeError If the type of the data is not ipyvizzu.Data . TypeError If the type of the style is not ipyvizzu.Style . Example Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = []","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.add_slide","text":"A method for adding a slide for the story. Parameters: Name Type Description Default slide Slide The next slide of the story. required Raises: Type Description TypeError If the type of the slide is not Slide . Example Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide)","title":"add_slide()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.set_feature","text":"A method for enabling or disabling a feature of the story. Parameters: Name Type Description Default name str The name of the feature. required enabled bool True if enabled or False if disabled. required Example Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) Source code in src/ipyvizzustory/storylib/story.py def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\")","title":"set_feature()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.add_event","text":"A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The handler JavaScript expression as string. required Example Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzustory/storylib/story.py def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" )","title":"add_event()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.set_size","text":"A method for setting width/height settings. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of the presentation story. None height Optional [ Union [ int , float , str ]] The height of the presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of the presentation story. None Example Change the size of the story: story.set_size(\"100%\", \"400px\") Source code in src/ipyvizzustory/storylib/story.py def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio)","title":"set_size()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.to_html","text":"A method for assembling the HTML code. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/storylib/story.py def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), )","title":"to_html()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.story.Story.export_to_html","text":"A method for exporting the story into HTML file. Parameters: Name Type Description Default filename PathLike The path of the target HTML file. required Source code in src/ipyvizzustory/storylib/story.py def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html())","title":"export_to_html()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.animation","text":"A module for working with chart animations.","title":"animation"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.animation.DataFilter","text":"Bases: Data A class for representing a data filter. Source code in src/ipyvizzustory/storylib/animation.py class DataFilter(Data): \"\"\"A class for representing a data filter.\"\"\" def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]}","title":"DataFilter"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.animation.DataFilter.build","text":"A method for overwriting Data.build method. Data initialized with a DataFilter must contain only a filter. Returns: Type Description dict A dictionary contains the filter key with the filter expression. Raises: Type Description ValueError If DataFilter does not contain a filter or contains anything else. Source code in src/ipyvizzustory/storylib/animation.py def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]}","title":"build()"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template","text":"A module for storing the HTML templates.","title":"template"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template.VIZZU_STORY","text":"A variable for storing the default url of the vizzu-story package.","title":"VIZZU_STORY"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template.DISPLAY_INDENT","text":"A variable for storing the default indent in the HTML template.","title":"DISPLAY_INDENT"},{"location":"reference/ipyvizzustory/storylib/#ipyvizzustory.storylib.template.DISPLAY_TEMPLATE","text":"A variable for storing the vizzu-story HTML template.","title":"DISPLAY_TEMPLATE"},{"location":"reference/ipyvizzustory/storylib/animation/","text":"ipyvizzustory.storylib.animation A module for working with chart animations. ipyvizzustory.storylib.animation.DataFilter Bases: Data A class for representing a data filter. Source code in src/ipyvizzustory/storylib/animation.py class DataFilter(Data): \"\"\"A class for representing a data filter.\"\"\" def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]} build() A method for overwriting Data.build method. Data initialized with a DataFilter must contain only a filter. Returns: Type Description dict A dictionary contains the filter key with the filter expression. Raises: Type Description ValueError If DataFilter does not contain a filter or contains anything else. Source code in src/ipyvizzustory/storylib/animation.py def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]}","title":"Animation"},{"location":"reference/ipyvizzustory/storylib/animation/#ipyvizzustory.storylib.animation","text":"A module for working with chart animations.","title":"animation"},{"location":"reference/ipyvizzustory/storylib/animation/#ipyvizzustory.storylib.animation.DataFilter","text":"Bases: Data A class for representing a data filter. Source code in src/ipyvizzustory/storylib/animation.py class DataFilter(Data): \"\"\"A class for representing a data filter.\"\"\" def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]}","title":"DataFilter"},{"location":"reference/ipyvizzustory/storylib/animation/#ipyvizzustory.storylib.animation.DataFilter.build","text":"A method for overwriting Data.build method. Data initialized with a DataFilter must contain only a filter. Returns: Type Description dict A dictionary contains the filter key with the filter expression. Raises: Type Description ValueError If DataFilter does not contain a filter or contains anything else. Source code in src/ipyvizzustory/storylib/animation.py def build(self) -> dict: \"\"\" A method for overwriting [Data.build][ipyvizzu.animation.Data.build] method. Data initialized with a `DataFilter` must contain only a filter. Returns: A dictionary contains the filter key with the filter expression. Raises: ValueError: If `DataFilter` does not contain a filter or contains anything else. \"\"\" if len(self.keys()) != 1 or \"filter\" not in self: raise KeyError(\"Data must contain filter and only that.\") return {\"filter\": self[\"filter\"]}","title":"build()"},{"location":"reference/ipyvizzustory/storylib/story/","text":"ipyvizzustory.storylib.story A module for working with presentation stories. ipyvizzustory.storylib.story.Step Bases: dict A class for representing a step of a slide. Source code in src/ipyvizzustory/storylib/story.py class Step(dict): \"\"\"A class for representing a step of a slide.\"\"\" def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options def _update(self, *animations: Union[Data, Style, Config]) -> None: for animation in animations: if not animation or type(animation) not in [ Data, Style, Config, ]: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data, Style or Config.\") if type(animation) == Data: # pylint: disable=unidiomatic-typecheck animation = DataFilter(animation) builded_animation = animation.build() common_keys = set(builded_animation).intersection(set(self)) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") self.update(builded_animation) __init__(*animations, **anim_options) Step constructor. Parameters: Name Type Description Default *animations Union [ Data , Style , Config ] List of Data , Config and Style objects. A Step can contain each of the above once. () **anim_options Optional [ Union [ str , int , float , dict ]] Animation options such as duration. {} Raises: Type Description ValueError If animations are not set. Example Initialize a step with a Config object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) Source code in src/ipyvizzustory/storylib/story.py def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options ipyvizzustory.storylib.story.Slide Bases: list A class for representing a slide of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Slide(list): \"\"\"A class for representing a slide of a presentation story.\"\"\" def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step) __init__(step=None) Slide constructor. Parameters: Name Type Description Default step Optional [ Step ] The first step can also be added to the slide in the constructor. None Example Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) add_step(step) A method for adding a step for the slide. Parameters: Name Type Description Default step Step The next step of the slide. required Raises: Type Description TypeError If the type of the step is not Step . Example Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step) ipyvizzustory.storylib.story.StorySize A class for representing the size of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class StorySize: \"\"\"A class for representing the size of a presentation story.\"\"\" def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\" @staticmethod def _convert_to_pixel_or_return(value: Any) -> Optional[str]: if StorySize._is_int(value) or StorySize._is_float(value): return str(value) + \"px\" return value @staticmethod def _is_int(value: Any) -> bool: if isinstance(value, int): return True if isinstance(value, str): if re.search(r\"^[-+]?[0-9]+$\", value): return True return False @staticmethod def _is_float(value: Any) -> bool: if isinstance(value, float): return True if isinstance(value, str): if re.search(r\"^[+-]?[0-9]+\\.[0-9]+$\", value): return True return False @property def width(self) -> Optional[str]: \"\"\" A property for storing the width of a presentation story. Returns: The width of a presentation story. \"\"\" return self._width @property def height(self) -> Optional[str]: \"\"\" A property for storing the height of a presentation story. Returns: The height of a presentation story. \"\"\" return self._height @property def aspect_ratio(self) -> Optional[Union[int, float, str]]: \"\"\" A property for storing the aspect ratio of a presentation story. Returns: The aspect ratio of a presentation story. \"\"\" return self._aspect_ratio @property def style(self) -> str: \"\"\" A property for storing the style of a presentation story. Note: If neither `width`, `height` nor `aspect_ratio` is set, it returns an empty string. Returns: The cssText width and height of a presentation story. \"\"\" return self._style @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height) width: Optional[str] property A property for storing the width of a presentation story. Returns: Type Description Optional [ str ] The width of a presentation story. height: Optional[str] property A property for storing the height of a presentation story. Returns: Type Description Optional [ str ] The height of a presentation story. aspect_ratio: Optional[Union[int, float, str]] property A property for storing the aspect ratio of a presentation story. Returns: Type Description Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story. style: str property A property for storing the style of a presentation story. Note If neither width , height nor aspect_ratio is set, it returns an empty string. Returns: Type Description str The cssText width and height of a presentation story. __init__(width=None, height=None, aspect_ratio=None) StorySize constructor. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of a presentation story. None height Optional [ Union [ int , float , str ]] The height of a presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story. None Raises: Type Description ValueError If width, height and aspect_ratio are set together. Source code in src/ipyvizzustory/storylib/story.py def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\" is_pixel(value) staticmethod A static method for checking the type of the given value. Parameters: Name Type Description Default value Any The value to check. required Returns: Type Description bool True if the value is pixel, False otherwise. Source code in src/ipyvizzustory/storylib/story.py @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False get_width_height_in_pixels() A method for returning the width and height in pixels. Raises: Type Description ValueError If width and height are not in pixels when aspect_ratio is not set. ValueError If width or height is not in pixel when aspect_ratio is set. ValueError If aspect_ratio is not a float when aspect_ratio is set. Returns: Type Description Tuple [ int , int ] The width and height in pixels as int. Source code in src/ipyvizzustory/storylib/story.py def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height) ipyvizzustory.storylib.story.Story Bases: dict A class for representing a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Story(dict): \"\"\"A class for representing a presentation story.\"\"\" # pylint: disable=too-many-instance-attributes def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = [] @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu-story` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]): self._analytics = bool(analytics) @property def vizzu(self) -> Optional[str]: \"\"\" A property for changing `vizzu` url. Note: If `None`, vizzu url is set by `vizzu-story`. Returns: `Vizzu` url. \"\"\" return self._vizzu @vizzu.setter def vizzu(self, url: str) -> None: self._vizzu = url @property def vizzu_story(self) -> str: \"\"\" A property for changing `vizzu-story` url. Returns: `Vizzu-story` url. \"\"\" return self._vizzu_story @vizzu_story.setter def vizzu_story(self, url: str) -> None: self._vizzu_story = url @property def start_slide(self) -> Optional[int]: \"\"\" A property for setting the starter slide. Returns: Number of the starter slide. \"\"\" return self._start_slide @start_slide.setter def start_slide(self, number: int) -> None: self._start_slide = number def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide) def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\") def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" ) def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio) def _repr_html_(self) -> str: return self.to_html() def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), ) def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html()) analytics: bool property writable A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. Returns: Type Description bool The value of the property (default True ). vizzu: Optional[str] property writable A property for changing vizzu url. Note If None , vizzu url is set by vizzu-story . Returns: Type Description Optional [ str ] Vizzu url. vizzu_story: str property writable A property for changing vizzu-story url. Returns: Type Description str Vizzu-story url. start_slide: Optional[int] property writable A property for setting the starter slide. Returns: Type Description Optional [ int ] Number of the starter slide. __init__(data, style=None) Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Raises: Type Description TypeError If the type of the data is not ipyvizzu.Data . TypeError If the type of the style is not ipyvizzu.Style . Example Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = [] add_slide(slide) A method for adding a slide for the story. Parameters: Name Type Description Default slide Slide The next slide of the story. required Raises: Type Description TypeError If the type of the slide is not Slide . Example Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide) set_feature(name, enabled) A method for enabling or disabling a feature of the story. Parameters: Name Type Description Default name str The name of the feature. required enabled bool True if enabled or False if disabled. required Example Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) Source code in src/ipyvizzustory/storylib/story.py def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\") add_event(event, handler) A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The handler JavaScript expression as string. required Example Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzustory/storylib/story.py def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" ) set_size(width=None, height=None, aspect_ratio=None) A method for setting width/height settings. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of the presentation story. None height Optional [ Union [ int , float , str ]] The height of the presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of the presentation story. None Example Change the size of the story: story.set_size(\"100%\", \"400px\") Source code in src/ipyvizzustory/storylib/story.py def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio) to_html() A method for assembling the HTML code. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/storylib/story.py def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), ) export_to_html(filename) A method for exporting the story into HTML file. Parameters: Name Type Description Default filename PathLike The path of the target HTML file. required Source code in src/ipyvizzustory/storylib/story.py def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html())","title":"Story"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story","text":"A module for working with presentation stories.","title":"story"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Step","text":"Bases: dict A class for representing a step of a slide. Source code in src/ipyvizzustory/storylib/story.py class Step(dict): \"\"\"A class for representing a step of a slide.\"\"\" def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options def _update(self, *animations: Union[Data, Style, Config]) -> None: for animation in animations: if not animation or type(animation) not in [ Data, Style, Config, ]: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data, Style or Config.\") if type(animation) == Data: # pylint: disable=unidiomatic-typecheck animation = DataFilter(animation) builded_animation = animation.build() common_keys = set(builded_animation).intersection(set(self)) if common_keys: raise ValueError(f\"Animation is already merged: {common_keys}\") self.update(builded_animation)","title":"Step"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Step.__init__","text":"Step constructor. Parameters: Name Type Description Default *animations Union [ Data , Style , Config ] List of Data , Config and Style objects. A Step can contain each of the above once. () **anim_options Optional [ Union [ str , int , float , dict ]] Animation options such as duration. {} Raises: Type Description ValueError If animations are not set. Example Initialize a step with a Config object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) Source code in src/ipyvizzustory/storylib/story.py def __init__( self, *animations: Union[Data, Style, Config], **anim_options: Optional[Union[str, int, float, dict]], ): \"\"\" Step constructor. Args: *animations: List of [Data][ipyvizzu.Data], [Config][ipyvizzu.Config] and [Style][ipyvizzu.Style] objects. A `Step` can contain each of the above once. **anim_options: Animation options such as duration. Raises: ValueError: If `animations` are not set. Example: Initialize a step with a [Config][ipyvizzu.Config] object: step = Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) \"\"\" super().__init__() if not animations: raise ValueError(\"No animation was set.\") self._update(*animations) if anim_options: self[\"animOptions\"] = anim_options","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Slide","text":"Bases: list A class for representing a slide of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Slide(list): \"\"\"A class for representing a slide of a presentation story.\"\"\" def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step) def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step)","title":"Slide"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Slide.__init__","text":"Slide constructor. Parameters: Name Type Description Default step Optional [ Step ] The first step can also be added to the slide in the constructor. None Example Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, step: Optional[Step] = None): \"\"\" Slide constructor. Args: step: The first step can also be added to the slide in the constructor. Example: Initialize a slide without step: slide = Slide() Initialize a slide with a step: slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) \"\"\" super().__init__() if step: self.add_step(step)","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Slide.add_step","text":"A method for adding a step for the slide. Parameters: Name Type Description Default step Step The next step of the slide. required Raises: Type Description TypeError If the type of the step is not Step . Example Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_step(self, step: Step) -> None: \"\"\" A method for adding a step for the slide. Args: step: The next step of the slide. Raises: TypeError: If the type of the `step` is not [Step][ipyvizzustory.storylib.story.Step]. Example: Add steps to a slide: slide = Slide() slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}) ) ) \"\"\" if not step or type(step) != Step: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Step.\") self.append(step)","title":"add_step()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize","text":"A class for representing the size of a presentation story. Source code in src/ipyvizzustory/storylib/story.py class StorySize: \"\"\"A class for representing the size of a presentation story.\"\"\" def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\" @staticmethod def _convert_to_pixel_or_return(value: Any) -> Optional[str]: if StorySize._is_int(value) or StorySize._is_float(value): return str(value) + \"px\" return value @staticmethod def _is_int(value: Any) -> bool: if isinstance(value, int): return True if isinstance(value, str): if re.search(r\"^[-+]?[0-9]+$\", value): return True return False @staticmethod def _is_float(value: Any) -> bool: if isinstance(value, float): return True if isinstance(value, str): if re.search(r\"^[+-]?[0-9]+\\.[0-9]+$\", value): return True return False @property def width(self) -> Optional[str]: \"\"\" A property for storing the width of a presentation story. Returns: The width of a presentation story. \"\"\" return self._width @property def height(self) -> Optional[str]: \"\"\" A property for storing the height of a presentation story. Returns: The height of a presentation story. \"\"\" return self._height @property def aspect_ratio(self) -> Optional[Union[int, float, str]]: \"\"\" A property for storing the aspect ratio of a presentation story. Returns: The aspect ratio of a presentation story. \"\"\" return self._aspect_ratio @property def style(self) -> str: \"\"\" A property for storing the style of a presentation story. Note: If neither `width`, `height` nor `aspect_ratio` is set, it returns an empty string. Returns: The cssText width and height of a presentation story. \"\"\" return self._style @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height)","title":"StorySize"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.width","text":"A property for storing the width of a presentation story. Returns: Type Description Optional [ str ] The width of a presentation story.","title":"width"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.height","text":"A property for storing the height of a presentation story. Returns: Type Description Optional [ str ] The height of a presentation story.","title":"height"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.aspect_ratio","text":"A property for storing the aspect ratio of a presentation story. Returns: Type Description Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story.","title":"aspect_ratio"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.style","text":"A property for storing the style of a presentation story. Note If neither width , height nor aspect_ratio is set, it returns an empty string. Returns: Type Description str The cssText width and height of a presentation story.","title":"style"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.__init__","text":"StorySize constructor. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of a presentation story. None height Optional [ Union [ int , float , str ]] The height of a presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of a presentation story. None Raises: Type Description ValueError If width, height and aspect_ratio are set together. Source code in src/ipyvizzustory/storylib/story.py def __init__( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ): \"\"\" StorySize constructor. Args: width: The width of a presentation story. height: The height of a presentation story. aspect_ratio: The aspect ratio of a presentation story. Raises: ValueError: If width, height and aspect_ratio are set together. \"\"\" width = self._convert_to_pixel_or_return(width) height = self._convert_to_pixel_or_return(height) self._width = width self._height = height self._aspect_ratio = aspect_ratio self._style = \"\" if None not in [width, height, aspect_ratio]: raise ValueError( \"width, height and aspect ratio cannot be set at the same time\" ) if all([height is not None, aspect_ratio is not None]): width = \"unset\" if any([width is not None, height is not None, aspect_ratio is not None]): _width = \"\" if width is None else f\"width: {width};\" _height = \"\" if height is None else f\"height: {height};\" _aspect_ratio = ( \"\" if aspect_ratio is None else f\"aspect-ratio: {aspect_ratio} !important;\" ) self._style = f\"vp.style.cssText = '{_aspect_ratio}{_width}{_height}'\"","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.is_pixel","text":"A static method for checking the type of the given value. Parameters: Name Type Description Default value Any The value to check. required Returns: Type Description bool True if the value is pixel, False otherwise. Source code in src/ipyvizzustory/storylib/story.py @staticmethod def is_pixel(value: Any) -> bool: \"\"\" A static method for checking the type of the given value. Args: value: The value to check. Returns: `True` if the value is pixel, `False` otherwise. \"\"\" if StorySize._is_int(value) or StorySize._is_float(value): return True if isinstance(value, str) and value.endswith(\"px\"): if StorySize._is_int(value[0:-2]) or StorySize._is_float(value[0:-2]): return True return False","title":"is_pixel()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.StorySize.get_width_height_in_pixels","text":"A method for returning the width and height in pixels. Raises: Type Description ValueError If width and height are not in pixels when aspect_ratio is not set. ValueError If width or height is not in pixel when aspect_ratio is set. ValueError If aspect_ratio is not a float when aspect_ratio is set. Returns: Type Description Tuple [ int , int ] The width and height in pixels as int. Source code in src/ipyvizzustory/storylib/story.py def get_width_height_in_pixels(self) -> Tuple[int, int]: \"\"\" A method for returning the width and height in pixels. Raises: ValueError: If width and height are not in pixels when aspect_ratio is not set. ValueError: If width or height is not in pixel when aspect_ratio is set. ValueError: If aspect_ratio is not a float when aspect_ratio is set. Returns: The width and height in pixels as int. \"\"\" if self.aspect_ratio is None: if any( [ not StorySize.is_pixel(self.width), not StorySize.is_pixel(self.height), ] ): raise ValueError(\"width and height should be in pixels\") _width = int(float(self.width[:-2])) # type: ignore _height = int(float(self.height[:-2])) # type: ignore else: if not any( [ StorySize._is_int(self.aspect_ratio), StorySize._is_float(self.aspect_ratio), ] ): raise ValueError(\"aspect_ratio should be a float\") if not any( [StorySize.is_pixel(self.width), StorySize.is_pixel(self.height)] ): raise ValueError(\"width or height should be in pixels\") _aspect_ratio = float(self.aspect_ratio) if StorySize.is_pixel(self.width): _width = float(self.width[:-2]) # type: ignore _height = int(_width / _aspect_ratio) _width = int(_width) else: _height = float(self.height[:-2]) # type: ignore _width = int(_height * _aspect_ratio) _height = int(_height) return (_width, _height)","title":"get_width_height_in_pixels()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story","text":"Bases: dict A class for representing a presentation story. Source code in src/ipyvizzustory/storylib/story.py class Story(dict): \"\"\"A class for representing a presentation story.\"\"\" # pylint: disable=too-many-instance-attributes def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = [] @property def analytics(self) -> bool: \"\"\" A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with `ipyvizzu-story` remains GDPR compatible. Returns: The value of the property (default `True`). \"\"\" return self._analytics @analytics.setter def analytics(self, analytics: Optional[bool]): self._analytics = bool(analytics) @property def vizzu(self) -> Optional[str]: \"\"\" A property for changing `vizzu` url. Note: If `None`, vizzu url is set by `vizzu-story`. Returns: `Vizzu` url. \"\"\" return self._vizzu @vizzu.setter def vizzu(self, url: str) -> None: self._vizzu = url @property def vizzu_story(self) -> str: \"\"\" A property for changing `vizzu-story` url. Returns: `Vizzu-story` url. \"\"\" return self._vizzu_story @vizzu_story.setter def vizzu_story(self, url: str) -> None: self._vizzu_story = url @property def start_slide(self) -> Optional[int]: \"\"\" A property for setting the starter slide. Returns: Number of the starter slide. \"\"\" return self._start_slide @start_slide.setter def start_slide(self, number: int) -> None: self._start_slide = number def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide) def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\") def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" ) def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio) def _repr_html_(self) -> str: return self.to_html() def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), ) def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html())","title":"Story"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.analytics","text":"A property for enabling/disabling the usage statistics feature. The usage statistics feature allows aggregate usage data collection using Plausible's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. Returns: Type Description bool The value of the property (default True ).","title":"analytics"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.vizzu","text":"A property for changing vizzu url. Note If None , vizzu url is set by vizzu-story . Returns: Type Description Optional [ str ] Vizzu url.","title":"vizzu"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.vizzu_story","text":"A property for changing vizzu-story url. Returns: Type Description str Vizzu-story url.","title":"vizzu_story"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.start_slide","text":"A property for setting the starter slide. Returns: Type Description Optional [ int ] Number of the starter slide.","title":"start_slide"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.__init__","text":"Presentation Story constructor. Parameters: Name Type Description Default data Data Data set for the whole presentation story. After initialization data can not be modified, but it can be filtered. required style Optional [ Style ] Style settings for the presentation story. style can be changed at each presentation step. None Raises: Type Description TypeError If the type of the data is not ipyvizzu.Data . TypeError If the type of the style is not ipyvizzu.Style . Example Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) Source code in src/ipyvizzustory/storylib/story.py def __init__(self, data: Data, style: Optional[Style] = None): \"\"\" Presentation Story constructor. Args: data: Data set for the whole presentation story. After initialization `data` can not be modified, but it can be filtered. style: Style settings for the presentation story. `style` can be changed at each presentation step. Raises: TypeError: If the type of the `data` is not `ipyvizzu.Data`. TypeError: If the type of the `style` is not `ipyvizzu.Style`. Example: Initialize a story with data and without style: data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2]) story = Story(data=data) \"\"\" super().__init__() self._analytics = True self._vizzu: Optional[str] = None self._vizzu_story: str = VIZZU_STORY self._start_slide: Optional[int] = None self._size: StorySize = StorySize() self._features: List[str] = [] self._events: List[str] = [] if not data or type(data) != Data: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Data.\") self.update(data.build()) if style: if type(style) != Style: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Style.\") self.update(style.build()) self[\"slides\"] = []","title":"__init__()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.add_slide","text":"A method for adding a slide for the story. Parameters: Name Type Description Default slide Slide The next slide of the story. required Raises: Type Description TypeError If the type of the slide is not Slide . Example Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) Source code in src/ipyvizzustory/storylib/story.py def add_slide(self, slide: Slide) -> None: \"\"\" A method for adding a slide for the story. Args: slide: The next slide of the story. Raises: TypeError: If the type of the `slide` is not [Slide][ipyvizzustory.storylib.story.Slide]. Example: Add a slide to the story: story.add_slide( Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}) ) ) ) \"\"\" if not slide or type(slide) != Slide: # pylint: disable=unidiomatic-typecheck raise TypeError(\"Type must be Slide.\") self[\"slides\"].append(slide)","title":"add_slide()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.set_feature","text":"A method for enabling or disabling a feature of the story. Parameters: Name Type Description Default name str The name of the feature. required enabled bool True if enabled or False if disabled. required Example Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) Source code in src/ipyvizzustory/storylib/story.py def set_feature(self, name: str, enabled: bool) -> None: \"\"\" A method for enabling or disabling a feature of the story. Args: name: The name of the feature. enabled: `True` if enabled or `False` if disabled. Example: Set a feature of the story, for example enable the tooltip: story.set_feature(\"tooltip\", True) \"\"\" self._features.append(f\"chart.feature('{name}', {json.dumps(enabled)});\")","title":"set_feature()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.add_event","text":"A method for creating and turning on an event handler. Parameters: Name Type Description Default event str The type of the event. required handler str The handler JavaScript expression as string. required Example Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") Source code in src/ipyvizzustory/storylib/story.py def add_event(self, event: str, handler: str) -> None: \"\"\" A method for creating and turning on an event handler. Args: event: The type of the event. handler: The handler `JavaScript` expression as string. Example: Add an event handler to the story: story.add_event(\"click\", \"alert(JSON.stringify(event.data));\") \"\"\" self._events.append( f\"chart.on('{event}', event => {{{' '.join(handler.split())}}});\" )","title":"add_event()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.set_size","text":"A method for setting width/height settings. Parameters: Name Type Description Default width Optional [ Union [ int , float , str ]] The width of the presentation story. None height Optional [ Union [ int , float , str ]] The height of the presentation story. None aspect_ratio Optional [ Union [ int , float , str ]] The aspect ratio of the presentation story. None Example Change the size of the story: story.set_size(\"100%\", \"400px\") Source code in src/ipyvizzustory/storylib/story.py def set_size( self, width: Optional[Union[int, float, str]] = None, height: Optional[Union[int, float, str]] = None, aspect_ratio: Optional[Union[int, float, str]] = None, ) -> None: \"\"\" A method for setting width/height settings. Args: width: The width of the presentation story. height: The height of the presentation story. aspect_ratio: The aspect ratio of the presentation story. Example: Change the size of the story: story.set_size(\"100%\", \"400px\") \"\"\" self._size = StorySize(width=width, height=height, aspect_ratio=aspect_ratio)","title":"set_size()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.to_html","text":"A method for assembling the HTML code. Returns: Type Description str The assembled HTML code as string. Source code in src/ipyvizzustory/storylib/story.py def to_html(self) -> str: \"\"\" A method for assembling the `HTML` code. Returns: The assembled `HTML` code as string. \"\"\" vizzu_player_data = f\"{json.dumps(self, cls=RawJavaScriptEncoder)}\" return DISPLAY_TEMPLATE.format( id=uuid.uuid4().hex[:7], version=__version__, analytics=str(self._analytics).lower(), vizzu=f'vizzu-url=\"{self._vizzu}\"' if self._vizzu else \"\", vizzu_story=self._vizzu_story, vizzu_player_data=vizzu_player_data, start_slide=f'start-slide=\"{self._start_slide}\"' if self._start_slide else \"\", chart_size=self._size.style, chart_features=f\"\\n{DISPLAY_INDENT * 3}\".join(self._features), chart_events=f\"\\n{DISPLAY_INDENT * 3}\".join(self._events), )","title":"to_html()"},{"location":"reference/ipyvizzustory/storylib/story/#ipyvizzustory.storylib.story.Story.export_to_html","text":"A method for exporting the story into HTML file. Parameters: Name Type Description Default filename PathLike The path of the target HTML file. required Source code in src/ipyvizzustory/storylib/story.py def export_to_html(self, filename: PathLike) -> None: \"\"\" A method for exporting the story into `HTML` file. Args: filename: The path of the target `HTML` file. \"\"\" with open(filename, \"w\", encoding=\"utf8\") as file_desc: file_desc.write(self.to_html())","title":"export_to_html()"},{"location":"reference/ipyvizzustory/storylib/template/","text":"ipyvizzustory.storylib.template A module for storing the HTML templates. ipyvizzustory.storylib.template.VIZZU_STORY: str = 'https://cdn.jsdelivr.net/npm/vizzu-story@0.6/dist/vizzu-story.min.js' module-attribute A variable for storing the default url of the vizzu-story package. ipyvizzustory.storylib.template.DISPLAY_INDENT: str = ' ' module-attribute A variable for storing the default indent in the HTML template. ipyvizzustory.storylib.template.DISPLAY_TEMPLATE: str = '\\n<div>\\n <vizzu-player id=\"{id}\" {vizzu} {start_slide} controller></vizzu-player>\\n <script type=\"module\">\\n import VizzuPlayer from \"{vizzu_story}\";\\n\\n class IpyvizzuStory {{\\n static version = \"{version}\";\\n static analytics = undefined;\\n\\n static changeAnalyticsTo(analytics) {{\\n if (IpyvizzuStory.analytics !== analytics) {{\\n console.log(\"ipyvizzu-story gather usage stats:\", analytics);\\n IpyvizzuStory.analytics = analytics;\\n }}\\n if (analytics) {{\\n IpyvizzuStory._addHeadScript();\\n }} else {{\\n IpyvizzuStory._removeScript(\"ipyvizzu-story-analytics-head\");\\n }}\\n }}\\n\\n static _addHeadScript() {{\\n const scriptId = \"ipyvizzu-story-analytics-head\";\\n if (!IpyvizzuStory._isScriptAppended(scriptId)) {{\\n const script = document.createElement(\"script\");\\n script.defer = true;\\n script.src = \"https://plausible.io/js/script.local.js\";\\n script.dataset.domain = \"usage.ipyvizzu-story.com\";\\n script.id = scriptId;\\n document.getElementsByTagName(\"head\")[0].appendChild(script);\\n }}\\n }}\\n\\n static _isScriptAppended(id) {{\\n return document.querySelector(`script[id=\"${{id}}\"]`) !== null;\\n }}\\n\\n static _removeScript(id) {{\\n const script = document.getElementById(id);\\n if (script) script.remove();\\n }}\\n }}\\n\\n if (IpyvizzuStory.version !== window.IpyvizzuStory?.version) {{\\n window.IpyvizzuStory = IpyvizzuStory;\\n console.log(`ipyvizzu-story ${{IpyvizzuStory.version}}`);\\n }}\\n\\n window.IpyvizzuStory?.changeAnalyticsTo({analytics});\\n\\n const vp = document.getElementById(\"{id}\");\\n vp.initializing.then(chart => {{\\n const lib = vp.Vizzu;\\n\\n // story.set_size()\\n {chart_size}\\n\\n // story.set_feature()\\n {chart_features}\\n // story.add_event()\\n {chart_events}\\n\\n const vizzuPlayerData = {vizzu_player_data};\\n vp.slides = vizzuPlayerData;\\n }});\\n </script>\\n</div>\\n' module-attribute A variable for storing the vizzu-story HTML template.","title":"Template"},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template","text":"A module for storing the HTML templates.","title":"template"},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template.VIZZU_STORY","text":"A variable for storing the default url of the vizzu-story package.","title":"VIZZU_STORY"},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template.DISPLAY_INDENT","text":"A variable for storing the default indent in the HTML template.","title":"DISPLAY_INDENT"},{"location":"reference/ipyvizzustory/storylib/template/#ipyvizzustory.storylib.template.DISPLAY_TEMPLATE","text":"A variable for storing the vizzu-story HTML template.","title":"DISPLAY_TEMPLATE"},{"location":"tutorial/","text":"Tutorial This is an excellent starting point to get acquainted with ipyvizzu-story , as it walks you through the installation and initialization of the extension, introduces the logic it employs and the different settings to control how your animated data stories look and behave. The tutorial is organized into chapters that introduce the concept and the details of ipyvizzu-story step-by-step. You can find the list of chapters at the end of this page and in the menu. Since ipyvizzu-story is built on top of ipyvizzu , it's recommended that you learn and understand ipyvizzu first. The tutorial for ipyvizzu can be found here . Basic logic of ipyvizzu-story With ipyvizzu-story , you can build, show and export a Story object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into Slides and Steps . When played, ipyvizzu-story automatically adds a set of buttons underneath the chart, via which the users can navigate between the Slides within the story. Slides can contain one or more Steps . A Step (and a single-Step Slide ) is basically the same as the Chart object in ipyvizzu , with a minor, but important difference: all of the data has to be added to the story at initialization, and it can be filtered at every Step throughout the Story . In case of a Slide with multiple Steps , all, but the last Steps are interim charts that connect a Slide with a previous Slide but the animation will not stop at these Steps when the Story is being played. Installation pip install ipyvizzu-story Visit Installation chapter for more options and details. Usage Note ipyvizzu-story generates JavaScript code, then the vizzu-story and vizzu calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser. vizzu-story and vizzu reports its errors there. If you get a vizzu-story or vizzu error in your browser console that is not straightforward to understand, please clean your browser cache first, because it might be caused by an older version being stored in your browser. Data Initialization Building blocks Export","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This is an excellent starting point to get acquainted with ipyvizzu-story , as it walks you through the installation and initialization of the extension, introduces the logic it employs and the different settings to control how your animated data stories look and behave. The tutorial is organized into chapters that introduce the concept and the details of ipyvizzu-story step-by-step. You can find the list of chapters at the end of this page and in the menu. Since ipyvizzu-story is built on top of ipyvizzu , it's recommended that you learn and understand ipyvizzu first. The tutorial for ipyvizzu can be found here .","title":"Tutorial"},{"location":"tutorial/#basic-logic-of-ipyvizzu-story","text":"With ipyvizzu-story , you can build, show and export a Story object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into Slides and Steps . When played, ipyvizzu-story automatically adds a set of buttons underneath the chart, via which the users can navigate between the Slides within the story. Slides can contain one or more Steps . A Step (and a single-Step Slide ) is basically the same as the Chart object in ipyvizzu , with a minor, but important difference: all of the data has to be added to the story at initialization, and it can be filtered at every Step throughout the Story . In case of a Slide with multiple Steps , all, but the last Steps are interim charts that connect a Slide with a previous Slide but the animation will not stop at these Steps when the Story is being played.","title":"Basic logic of ipyvizzu-story"},{"location":"tutorial/#installation","text":"pip install ipyvizzu-story Visit Installation chapter for more options and details.","title":"Installation"},{"location":"tutorial/#usage","text":"Note ipyvizzu-story generates JavaScript code, then the vizzu-story and vizzu calls are evaluated by the browser. Therefore if a blank space appears where the chart should be, check the console log of your browser. vizzu-story and vizzu reports its errors there. If you get a vizzu-story or vizzu error in your browser console that is not straightforward to understand, please clean your browser cache first, because it might be caused by an older version being stored in your browser. Data Initialization Building blocks Export","title":"Usage"},{"location":"tutorial/building_blocks/","text":"Building blocks In ipyvizzu-story , you can build, show and export a Story object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into Slides and Steps . Slides and Steps Slides can contain one or more Steps . A Step (and a single-Step Slide ) is basically the same as the Chart object in ipyvizzu , with a minor, but important difference: all of the data has to be added to the story at initialization, and it can be filtered at every Step throughout the Story . slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide) In case of a Slide with a sequence of Steps , all, but the last Steps are interim charts that connect a Slide with a previous Slide . The animation will be automatically played until the last Step in the sequence, allowing for more complex transitions between Slides . slide = Slide() slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\", \"geometry\": \"rectangle\"}), ) ) story.add_slide(slide) Viewers can navigate between Slides with the navigation controls that appear beneath the chart. They can also use the PgUp and PgDn buttons, and the left and right arrows to navigate between Slides , and the Home and End buttons to jump to the first and last Slide in the Story . On each chart, you can define the chart configuration, style and animation options using the same objects as in ipyvizzu . However, you can not modify the underlying data between the slides, just the data filter can be used. slide = Slide( Step( Data.filter(\"record['Foo'] == 'Bob'\"), Config({\"geometry\": \"circle\"}), Style({\"plot\": {\"marker\": {\"colorPalette\": \"#FF0000\"}}}), duration=1, ) ) story.add_slide(slide) Tip Check ipyvizzu - Filtering & adding new records chapter and ipyvizzu - Style chapter for more details on data filtering and style options. There are some parameters of the Story you can change before you play it. Story features You can enable or disable chart features, such as the Tooltip that appears if the viewer hovers their mouse over a specific element of the chart. story.set_feature(\"tooltip\", True) Tip See ipyvizzu - Axes, title, tooltip chapter for more details on chart features. Story events You have many more options to change the look and feel of the Story by using events. handler = \"alert(JSON.stringify(event.data))\" story.add_event(\"click\", handler) Tip See ipyvizzu - Events chapter for more details on events. Play After you created the Story , you can play it with the play , or the _repr_html_ method, depending on the environment you run ipyvizzu-story in. story.play() or story Info If you run into issues with playing your story, check the Environments chapter for more details on the available features in your environment.","title":"Building blocks"},{"location":"tutorial/building_blocks/#building-blocks","text":"In ipyvizzu-story , you can build, show and export a Story object that contains all of the data being shown throughout the story and the charts created based on that data, arranged into Slides and Steps .","title":"Building blocks"},{"location":"tutorial/building_blocks/#slides-and-steps","text":"Slides can contain one or more Steps . A Step (and a single-Step Slide ) is basically the same as the Chart object in ipyvizzu , with a minor, but important difference: all of the data has to be added to the story at initialization, and it can be filtered at every Step throughout the Story . slide = Slide( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\"}), ) ) story.add_slide(slide) In case of a Slide with a sequence of Steps , all, but the last Steps are interim charts that connect a Slide with a previous Slide . The animation will be automatically played until the last Step in the sequence, allowing for more complex transitions between Slides . slide = Slide() slide.add_step( Step( Config({\"color\": \"Foo\", \"x\": \"Baz\", \"geometry\": \"circle\"}), ) ) slide.add_step( Step( Config({\"x\": \"Foo\", \"y\": \"Bar\", \"geometry\": \"rectangle\"}), ) ) story.add_slide(slide) Viewers can navigate between Slides with the navigation controls that appear beneath the chart. They can also use the PgUp and PgDn buttons, and the left and right arrows to navigate between Slides , and the Home and End buttons to jump to the first and last Slide in the Story . On each chart, you can define the chart configuration, style and animation options using the same objects as in ipyvizzu . However, you can not modify the underlying data between the slides, just the data filter can be used. slide = Slide( Step( Data.filter(\"record['Foo'] == 'Bob'\"), Config({\"geometry\": \"circle\"}), Style({\"plot\": {\"marker\": {\"colorPalette\": \"#FF0000\"}}}), duration=1, ) ) story.add_slide(slide) Tip Check ipyvizzu - Filtering & adding new records chapter and ipyvizzu - Style chapter for more details on data filtering and style options. There are some parameters of the Story you can change before you play it.","title":"Slides and Steps"},{"location":"tutorial/building_blocks/#story-features","text":"You can enable or disable chart features, such as the Tooltip that appears if the viewer hovers their mouse over a specific element of the chart. story.set_feature(\"tooltip\", True) Tip See ipyvizzu - Axes, title, tooltip chapter for more details on chart features.","title":"Story features"},{"location":"tutorial/building_blocks/#story-events","text":"You have many more options to change the look and feel of the Story by using events. handler = \"alert(JSON.stringify(event.data))\" story.add_event(\"click\", handler) Tip See ipyvizzu - Events chapter for more details on events.","title":"Story events"},{"location":"tutorial/building_blocks/#play","text":"After you created the Story , you can play it with the play , or the _repr_html_ method, depending on the environment you run ipyvizzu-story in. story.play() or story Info If you run into issues with playing your story, check the Environments chapter for more details on the available features in your environment.","title":"Play"},{"location":"tutorial/data/","text":"Data You can use the same data definition formats as in the ipyvizzu library: pandas DataFrame , JSON , or add data manually in different formats. Similarly to ipyvizzu , there are two types of data series: dimensions and measures. Note Please note, that all of the data used throughout your data story has to be added to the story at initialization. The data being shown can be filtered at each step. Tip See ipyvizzu - Data chapter for more details about data. Here's some sample code for common use cases. Using pandas DataFrame from ipyvizzu import Data import pandas as pd data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" ) data.add_df(df) Specify data by series from ipyvizzu import Data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2])","title":"Data"},{"location":"tutorial/data/#data","text":"You can use the same data definition formats as in the ipyvizzu library: pandas DataFrame , JSON , or add data manually in different formats. Similarly to ipyvizzu , there are two types of data series: dimensions and measures. Note Please note, that all of the data used throughout your data story has to be added to the story at initialization. The data being shown can be filtered at each step. Tip See ipyvizzu - Data chapter for more details about data. Here's some sample code for common use cases.","title":"Data"},{"location":"tutorial/data/#using-pandas-dataframe","text":"from ipyvizzu import Data import pandas as pd data = Data() df = pd.read_csv( \"https://ipyvizzu-story.vizzuhq.com/0.9/assets/data/data.csv\" ) data.add_df(df)","title":"Using pandas DataFrame"},{"location":"tutorial/data/#specify-data-by-series","text":"from ipyvizzu import Data data = Data() data.add_series(\"Foo\", [\"Alice\", \"Bob\", \"Ted\"]) data.add_series(\"Bar\", [15, 32, 12]) data.add_series(\"Baz\", [5, 3, 2])","title":"Specify data by series"},{"location":"tutorial/export/","text":"Export You can export your Story into an HTML file, by calling the export_to_html method. The data, the Story and the navigation buttons will all be included in the generated HTML file. story.export_to_html(filename=\"mystory.html\") You can also get the raw HTML string using the following code. html = story.to_html() print(html)","title":"Export"},{"location":"tutorial/export/#export","text":"You can export your Story into an HTML file, by calling the export_to_html method. The data, the Story and the navigation buttons will all be included in the generated HTML file. story.export_to_html(filename=\"mystory.html\") You can also get the raw HTML string using the following code. html = story.to_html() print(html)","title":"Export"},{"location":"tutorial/initialization/","text":"Initialization Import From ipyvizzu import Data , Config and Style and from ipyvizzu-story import Story , Slide and Step : from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step Constructor You need to put the Data object (described in the Data chapter) into the Story constructor. You can not alter the data later but the data being shown can be filtered at each step. story = Story(data=data) You can set the style used initally for the story as you can see in this example , and you can alter the style at each step within the story. story = Story(data=data, style=Style({\"title\": {\"fontSize\": 50}})) Tip Check ipyvizzu - Color palette & fonts chapter and ipyvizzu - Chart layout chapter for more details on the available styling options. Size ipyvizzu-story tries to apply the ideal width and height for the story, but you can also set them manually with the set_size method. story.set_size(width=\"100%\", height=\"400px\") You can also set the aspect ratio of the story. This will not affect the aspect ratio in full-screen view as that will be determined by the actual screen's dimensions. story.set_size(aspect_ratio=16 / 9) If you use the aspect_ratio , the width or height parameters can also be set, but in some environments, if you want to use the play method, it will only accept pixels. story.set_size(width=\"800px\", aspect_ratio=16 / 9) Story properties Analytics The usage statistics feature in ipyvizzu-story allows aggregate usage data collection using Plausible 's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Usage statistics feature is optional, and by default, it is enabled (default value: True ). Users can choose to opt-out if they prefer not to participate in data collection. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. To disable usage statistics feature, set analytics property to False . story.analytics = False Vizzu ipyvizzu-story requires and downloads the Vizzu JavaScript / C++ library from jsDelivr CDN , but you can also use a different or self-hosted version of it. story.vizzu = \"<url>/vizzu.min.js\" Info The default value of vizzu property is None , because the default version of Vizzu is stored in the vizzu-story package. Vizzu-Story ipyvizzu-story requires and downloads the Vizzu-Story JavaScript package from jsDelivr CDN , but you can also use a different or self-hosted version of it. story.vizzu_story = \"<url>/vizzu-story.min.js\" Start slide You can start the story on a specific slide via the start_slide property. You can also use negative numbers, where -1 means the last slide. story.start_slide = 3","title":"Initialization"},{"location":"tutorial/initialization/#initialization","text":"","title":"Initialization"},{"location":"tutorial/initialization/#import","text":"From ipyvizzu import Data , Config and Style and from ipyvizzu-story import Story , Slide and Step : from ipyvizzu import Data, Config, Style from ipyvizzustory import Story, Slide, Step","title":"Import"},{"location":"tutorial/initialization/#constructor","text":"You need to put the Data object (described in the Data chapter) into the Story constructor. You can not alter the data later but the data being shown can be filtered at each step. story = Story(data=data) You can set the style used initally for the story as you can see in this example , and you can alter the style at each step within the story. story = Story(data=data, style=Style({\"title\": {\"fontSize\": 50}})) Tip Check ipyvizzu - Color palette & fonts chapter and ipyvizzu - Chart layout chapter for more details on the available styling options.","title":"Constructor"},{"location":"tutorial/initialization/#size","text":"ipyvizzu-story tries to apply the ideal width and height for the story, but you can also set them manually with the set_size method. story.set_size(width=\"100%\", height=\"400px\") You can also set the aspect ratio of the story. This will not affect the aspect ratio in full-screen view as that will be determined by the actual screen's dimensions. story.set_size(aspect_ratio=16 / 9) If you use the aspect_ratio , the width or height parameters can also be set, but in some environments, if you want to use the play method, it will only accept pixels. story.set_size(width=\"800px\", aspect_ratio=16 / 9)","title":"Size"},{"location":"tutorial/initialization/#story-properties","text":"","title":"Story properties"},{"location":"tutorial/initialization/#analytics","text":"The usage statistics feature in ipyvizzu-story allows aggregate usage data collection using Plausible 's algorithm. Enabling this feature helps us follow the progress and overall trends of our library, allowing us to focus our resources effectively and better serve our users. We do not track, collect, or store any personal data or personally identifiable information. All data is isolated to a single day, a single site, and a single device only. Usage statistics feature is optional, and by default, it is enabled (default value: True ). Users can choose to opt-out if they prefer not to participate in data collection. Please note that even when this feature is enabled, publishing anything made with ipyvizzu-story remains GDPR compatible. To disable usage statistics feature, set analytics property to False . story.analytics = False","title":"Analytics"},{"location":"tutorial/initialization/#vizzu","text":"ipyvizzu-story requires and downloads the Vizzu JavaScript / C++ library from jsDelivr CDN , but you can also use a different or self-hosted version of it. story.vizzu = \"<url>/vizzu.min.js\" Info The default value of vizzu property is None , because the default version of Vizzu is stored in the vizzu-story package.","title":"Vizzu"},{"location":"tutorial/initialization/#vizzu-story","text":"ipyvizzu-story requires and downloads the Vizzu-Story JavaScript package from jsDelivr CDN , but you can also use a different or self-hosted version of it. story.vizzu_story = \"<url>/vizzu-story.min.js\"","title":"Vizzu-Story"},{"location":"tutorial/initialization/#start-slide","text":"You can start the story on a specific slide via the start_slide property. You can also use negative numbers, where -1 means the last slide. story.start_slide = 3","title":"Start slide"},{"location":"coverage/","text":"article h1, article > a, .md-sidebar--secondary { display: none !important; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}